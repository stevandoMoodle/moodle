{"version":3,"file":"embed.min.js","sources":["../src/embed.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Media plugin Embed class for Moodle.\n *\n * @module      tiny_media/embed\n * @copyright   2022 Huong Nguyen <huongnv13@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport EmbedModal from './embedmodal';\nimport {getEmbedPermissions} from './options';\nimport {getFilePicker} from 'editor_tiny/options';\nimport {EmbedHandler} from './embed/embedhandler';\nimport {\n    insertMediaTemplateContext,\n    getSelectedMediaElement,\n} from './embed/embedhelpers';\nimport {EmbedInsert} from './embed/embedinsert';\nimport {startMediaLoading} from './helpers';\nimport Selectors from \"./selectors\";\n\nexport default class MediaEmbed {\n    editor = null;\n    canShowFilePicker = false;\n    canShowFilePickerTrack = false;\n    canShowDropZone = false;\n\n    constructor(editor) {\n        const permissions = getEmbedPermissions(editor);\n        const options = getFilePicker(editor, 'media');\n\n        // Indicates whether the file picker can be shown.\n        this.canShowFilePicker = permissions.filepicker\n            && (typeof options !== 'undefined')\n            && Object.keys(options.repositories).length > 0;\n        this.canShowFilePickerTrack = permissions.filepicker && (typeof getFilePicker(editor, 'subtitle') !== 'undefined');\n        this.canShowDropZone = Object.values(options.repositories).some(repository => repository.type === 'upload');\n        this.editor = editor;\n    }\n\n    async displayDialogue() {\n        const [mediaType, selectedMedia] = getSelectedMediaElement(this.editor);\n        this.mediaType = mediaType;\n        this.selectedMedia = selectedMedia;\n        this.currentModal = await EmbedModal.create({\n            large: true,\n            templateContext: {elementid: this.editor.getElement().id},\n        });\n        this.root = this.currentModal.getRoot()[0];\n\n        if (this.selectedMedia) {\n            // Preview the selected media.\n            this.isUpdating = true;\n            this.loadSelectedMedia();\n        } else {\n            const embedHandler = new EmbedHandler(this);\n            embedHandler.loadTemplatePromise(insertMediaTemplateContext(this));\n            embedHandler.registerEventListeners(this.currentModal);\n        }\n    }\n\n    loadSelectedMedia = () => {\n        // Start the spinner.\n        startMediaLoading(this.root, Selectors.EMBED.type);\n\n        let mediaSource = null;\n        if (this.mediaType === 'link') {\n            // Main source used for the preview.\n            mediaSource = this.selectedMedia.href;\n        } else {\n            // Main source used for the preview.\n            mediaSource = this.selectedMedia.querySelector('source').src;\n\n            // If the selected media has more than one sources, it has main source and alternative sources.\n            const sources = this.selectedMedia.querySelectorAll('source');\n            if (sources.length > 1) {\n                let allSources = [];\n                Object.keys(sources).forEach(function(source) {\n                    allSources.push(sources[source].src);\n                });\n                this.allSources = allSources; // Used to later check if the embedded media has alternative sources.\n            }\n        }\n\n        if (this.selectedMedia.classList.contains('media-link')) { // This means a link was embedded as audio/video.\n            // Let's record the media tag type for later usage.\n            this.mediaTagType = this.mediaType;\n\n            // Let's override the mediaType prop to \"link\", so it can later be previewed.\n            this.mediaType = 'link';\n        }\n\n        // Load media preview.\n        const embedInsert = new EmbedInsert(this);\n        embedInsert.init();\n        embedInsert.loadMediaPreview(mediaSource);\n        (new EmbedHandler(this)).registerEventListeners(this.currentModal);\n    };\n}\n"],"names":["constructor","editor","this","root","Selectors","EMBED","type","mediaSource","mediaType","selectedMedia","href","querySelector","src","sources","querySelectorAll","length","allSources","Object","keys","forEach","source","push","classList","contains","mediaTagType","embedInsert","EmbedInsert","init","loadMediaPreview","EmbedHandler","registerEventListeners","currentModal","permissions","options","canShowFilePicker","filepicker","repositories","canShowFilePickerTrack","canShowDropZone","values","some","repository","EmbedModal","create","large","templateContext","elementid","getElement","id","getRoot","isUpdating","loadSelectedMedia","embedHandler","loadTemplatePromise"],"mappings":"uuBAyCIA,YAAYC,sCALH,gDACW,kDACK,2CACP,6CAoCE,oCAEEC,KAAKC,KAAMC,mBAAUC,MAAMC,UAEzCC,YAAc,QACK,SAAnBL,KAAKM,UAELD,YAAcL,KAAKO,cAAcC,SAC9B,CAEHH,YAAcL,KAAKO,cAAcE,cAAc,UAAUC,UAGnDC,QAAUX,KAAKO,cAAcK,iBAAiB,aAChDD,QAAQE,OAAS,EAAG,KAChBC,WAAa,GACjBC,OAAOC,KAAKL,SAASM,SAAQ,SAASC,QAClCJ,WAAWK,KAAKR,QAAQO,QAAQR,aAE/BI,WAAaA,YAItBd,KAAKO,cAAca,UAAUC,SAAS,qBAEjCC,aAAetB,KAAKM,eAGpBA,UAAY,cAIfiB,YAAc,IAAIC,yBAAYxB,MACpCuB,YAAYE,OACZF,YAAYG,iBAAiBrB,iBACxBsB,2BAAa3B,MAAO4B,uBAAuB5B,KAAK6B,uBApE/CC,aAAc,gCAAoB/B,QAClCgC,SAAU,2BAAchC,OAAQ,cAGjCiC,kBAAoBF,YAAYG,iBACV,IAAZF,SACRhB,OAAOC,KAAKe,QAAQG,cAAcrB,OAAS,OAC7CsB,uBAAyBL,YAAYG,iBAA4D,KAAtC,2BAAclC,OAAQ,iBACjFqC,gBAAkBrB,OAAOsB,OAAON,QAAQG,cAAcI,MAAKC,YAAkC,WAApBA,WAAWnC,YACpFL,OAASA,qCAIPO,UAAWC,gBAAiB,yCAAwBP,KAAKD,gBAC3DO,UAAYA,eACZC,cAAgBA,mBAChBsB,mBAAqBW,oBAAWC,OAAO,CACxCC,OAAO,EACPC,gBAAiB,CAACC,UAAW5C,KAAKD,OAAO8C,aAAaC,WAErD7C,KAAOD,KAAK6B,aAAakB,UAAU,GAEpC/C,KAAKO,mBAEAyC,YAAa,OACbC,wBACF,OACGC,aAAe,IAAIvB,2BAAa3B,MACtCkD,aAAaC,qBAAoB,4CAA2BnD,OAC5DkD,aAAatB,uBAAuB5B,KAAK6B"}