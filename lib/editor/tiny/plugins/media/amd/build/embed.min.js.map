{"version":3,"file":"embed.min.js","sources":["../src/embed.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Media plugin Embed class for Moodle.\n *\n * @module      tiny_media/embed\n * @copyright   2022 Huong Nguyen <huongnv13@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getString} from 'core/str';\nimport * as ModalEvents from 'core/modal_events';\nimport EmbedModal from './embedmodal';\nimport {getEmbedPermissions} from './options';\nimport {getFilePicker} from 'editor_tiny/options';\n\nexport default class MediaEmbed {\n    editor = null;\n    canShowFilePicker = false;\n    canShowFilePickerPoster = false;\n    canShowFilePickerTrack = false;\n\n    constructor(editor) {\n        const permissions = getEmbedPermissions(editor);\n\n        // Indicates whether the file picker can be shown.\n        this.canShowFilePicker = permissions.filepicker && (typeof getFilePicker(editor, 'media') !== 'undefined');\n        this.canShowFilePickerPoster = permissions.filepicker && (typeof getFilePicker(editor, 'image') !== 'undefined');\n        this.canShowFilePickerTrack = permissions.filepicker && (typeof getFilePicker(editor, 'subtitle') !== 'undefined');\n\n        this.editor = editor;\n    }\n\n    async getTemplateContext() {\n        return {\n            elementid: this.editor.getElement().id,\n            showfilepicker: this.canShowFilePicker,\n            showfilepickerposter: this.canShowFilePickerPoster,\n            showfilepickertrack: this.canShowFilePickerTrack,\n        };\n    }\n\n    async displayDialogue() {\n        this.currentModal = await EmbedModal.create({\n            title: getString('createmedia', 'tiny_media'),\n            templateContext: await this.getTemplateContext(),\n        });\n\n        await this.registerEventListeners(this.currentModal);\n    }\n\n    async registerEventListeners(modal) {\n        await modal.getBody();\n        const $root = modal.getRoot();\n\n        $root.on(ModalEvents.hidden, () => {\n            this.currentModal.destroy();\n        });\n    }\n}\n"],"names":["constructor","editor","permissions","canShowFilePicker","filepicker","canShowFilePickerPoster","canShowFilePickerTrack","elementid","this","getElement","id","showfilepicker","showfilepickerposter","showfilepickertrack","currentModal","EmbedModal","create","title","templateContext","getTemplateContext","registerEventListeners","modal","getBody","getRoot","on","ModalEvents","hidden","destroy"],"mappings":"68CAmCIA,YAAYC,sCALH,gDACW,mDACM,kDACD,SAGfC,aAAc,gCAAoBD,aAGnCE,kBAAoBD,YAAYE,iBAAyD,KAAnC,2BAAcH,OAAQ,cAC5EI,wBAA0BH,YAAYE,iBAAyD,KAAnC,2BAAcH,OAAQ,cAClFK,uBAAyBJ,YAAYE,iBAA4D,KAAtC,2BAAcH,OAAQ,iBAEjFA,OAASA,wCAIP,CACHM,UAAWC,KAAKP,OAAOQ,aAAaC,GACpCC,eAAgBH,KAAKL,kBACrBS,qBAAsBJ,KAAKH,wBAC3BQ,oBAAqBL,KAAKF,qDAKzBQ,mBAAqBC,oBAAWC,OAAO,CACxCC,OAAO,kBAAU,cAAe,cAChCC,sBAAuBV,KAAKW,6BAG1BX,KAAKY,uBAAuBZ,KAAKM,2CAGdO,aACnBA,MAAMC,UACED,MAAME,UAEdC,GAAGC,YAAYC,QAAQ,UACpBZ,aAAaa"}