{"version":3,"file":"embedinsert.min.js","sources":["../../src/embed/embedinsert.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny media plugin embed upload class.\n *\n * This handles the embed upload using url, drag-drop and repositories.\n *\n * @module      tiny_media/embed/embedinsert\n * @copyright   2024 Stevani Andolo <stevani@hotmail.com.au>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {prefetchStrings} from 'core/prefetch';\nimport {getStrings} from 'core/str';\nimport {component} from \"../common\";\nimport {\n    setPropertiesFromData,\n    startMediaLoading,\n    stopMediaLoading,\n    showElements,\n} from '../helpers';\nimport Selectors from \"../selectors\";\nimport Dropzone from 'core/dropzone';\nimport uploadFile from 'editor_tiny/uploader';\n\nprefetchStrings('tiny_media', [\n    'insertmedia',\n    'addmediafilesdrop',\n    'uploading',\n    'loadingmedia',\n]);\n\nexport class EmbedInsert {\n\n    constructor(data) {\n        setPropertiesFromData(this, data); // Creates dynamic properties based on \"data\" param.\n    }\n\n    /**\n     * Init the dropzone and lang strings.\n     */\n    init = async() => {\n        const langStringKeys = [\n            'insertmedia',\n            'addmediafilesdrop',\n            'uploading',\n            'loadingmedia',\n        ];\n        const langStringValues = await getStrings([...langStringKeys].map((key) => ({key, component})));\n        this.langStrings = Object.fromEntries(langStringKeys.map((key, index) => [key, langStringValues[index]]));\n        this.currentModal.setTitle(this.langStrings.insertmedia);\n\n        // Let's init the dropzone if canShowDropZone is true and mediaType is null.\n        if (this.canShowDropZone && !this.mediaType) {\n            const dropZoneEle = document.querySelector(Selectors.EMBED.elements.dropzoneContainer);\n            const dropZone = new Dropzone(\n                dropZoneEle,\n                'audio/*,video/*',\n                files => {\n                    this.handleUploadedFile(files);\n                }\n            );\n\n            dropZone.setLabel(this.langStrings.addmediafilesdrop);\n            dropZone.init();\n        }\n    };\n\n    /**\n     * Updates the content of the loader icon.\n     *\n     * @param {HTMLElement} root - The root element containing the loader icon.\n     * @param {object} langStrings - An object containing language strings.\n     * @param {number|null} progress - The progress percentage (optional).\n     * @returns {void}\n     */\n    updateLoaderIcon = (root, langStrings, progress = null) => {\n        const loaderIcon = this.root.querySelector(Selectors.EMBED.elements.loaderIcon);\n        if (loaderIcon && loaderIcon.classList.contains('d-none')) {\n            showElements(Selectors.EMBED.elements.loaderIcon);\n        }\n\n        const loaderIconState = root.querySelector(Selectors.EMBED.elements.loaderIconContainer + ' div');\n        loaderIconState.innerHTML = (progress !== null) ?\n                               `${langStrings.uploading} ${Math.round(progress)}%` :\n                               langStrings.loadingmedia;\n    };\n\n    /**\n     * Handles media preview on file picker callback.\n     *\n     * @param {object} params Object of uploaded file\n     */\n    filePickerCallback = (params) => {\n        if (params.url) {\n            window.console.log(params.url);\n            stopMediaLoading(this.root, 'EMBED');\n        }\n    };\n\n    /**\n     * Handles the uploaded file, initiates the upload process, and updates the UI during the upload.\n     *\n     * @param {FileList} files - The list of files to upload (usually from a file input field).\n     * @returns {Promise<void>} A promise that resolves when the file is uploaded and processed.\n     */\n    handleUploadedFile = async(files) => {\n        try {\n            startMediaLoading(this.root, 'EMBED');\n            const fileURL = await uploadFile(this.editor, 'media', files[0], files[0].name, (progress) => {\n                this.updateLoaderIcon(this.root, this.langStrings, progress);\n            });\n\n            // Set the loader icon content to \"loading\" after the file upload completes.\n            this.updateLoaderIcon(this.root, this.langStrings);\n            this.filePickerCallback({url: fileURL});\n        } catch (error) {\n            // Handle the error.\n            const urlWarningLabelEle = this.root.querySelector(Selectors.EMBED.elements.urlWarning);\n            urlWarningLabelEle.innerHTML = error.error !== undefined ? error.error : error;\n            showElements(Selectors.EMBED.elements.urlWarning, this.root);\n            stopMediaLoading(this.root, 'EMBED');\n        }\n    };\n}\n"],"names":["constructor","data","async","langStringKeys","langStringValues","map","key","component","langStrings","Object","fromEntries","index","currentModal","setTitle","this","insertmedia","canShowDropZone","mediaType","dropZoneEle","document","querySelector","Selectors","EMBED","elements","dropzoneContainer","dropZone","Dropzone","files","handleUploadedFile","setLabel","addmediafilesdrop","init","root","progress","loaderIcon","_this","classList","contains","loaderIconState","loaderIconContainer","innerHTML","uploading","Math","round","loadingmedia","params","url","window","console","log","fileURL","editor","name","updateLoaderIcon","filePickerCallback","error","urlWarning","undefined"],"mappings":"6tBAsCgB,aAAc,CAC1B,cACA,oBACA,YACA,4CAKAA,YAAYC,kDAOLC,gBACGC,eAAiB,CACnB,cACA,oBACA,YACA,gBAEEC,uBAAyB,mBAAW,IAAID,gBAAgBE,KAAKC,OAAUA,IAAAA,IAAKC,UAAAA,+BAC7EC,YAAcC,OAAOC,YAAYP,eAAeE,KAAI,CAACC,IAAKK,QAAU,CAACL,IAAKF,iBAAiBO,gBAC3FC,aAAaC,SAASC,KAAKN,YAAYO,aAGxCD,KAAKE,kBAAoBF,KAAKG,UAAW,OACnCC,YAAcC,SAASC,cAAcC,mBAAUC,MAAMC,SAASC,mBAC9DC,SAAW,IAAIC,kBACjBR,YACA,mBACAS,aACSC,mBAAmBD,UAIhCF,SAASI,SAASf,KAAKN,YAAYsB,mBACnCL,SAASM,oDAYE,SAACC,KAAMxB,iBAAayB,gEAAW,WACxCC,WAAaC,MAAKH,KAAKZ,cAAcC,mBAAUC,MAAMC,SAASW,YAChEA,YAAcA,WAAWE,UAAUC,SAAS,qCAC/BhB,mBAAUC,MAAMC,SAASW,kBAGpCI,gBAAkBN,KAAKZ,cAAcC,mBAAUC,MAAMC,SAASgB,oBAAsB,QAC1FD,gBAAgBE,UAA0B,OAAbP,mBACHzB,YAAYiC,sBAAaC,KAAKC,MAAMV,eACvCzB,YAAYoC,2DAQjBC,SACdA,OAAOC,MACPC,OAAOC,QAAQC,IAAIJ,OAAOC,mCACThC,KAAKkB,KAAM,wDAUf9B,MAAAA,2CAEKY,KAAKkB,KAAM,eACvBkB,cAAgB,qBAAWpC,KAAKqC,OAAQ,QAASxB,MAAM,GAAIA,MAAM,GAAGyB,MAAOnB,gBACxEoB,iBAAiBvC,KAAKkB,KAAMlB,KAAKN,YAAayB,kBAIlDoB,iBAAiBvC,KAAKkB,KAAMlB,KAAKN,kBACjC8C,mBAAmB,CAACR,IAAKI,UAChC,MAAOK,OAEsBzC,KAAKkB,KAAKZ,cAAcC,mBAAUC,MAAMC,SAASiC,YACzDhB,eAA4BiB,IAAhBF,MAAMA,MAAsBA,MAAMA,MAAQA,gCAC5DlC,mBAAUC,MAAMC,SAASiC,WAAY1C,KAAKkB,oCACtClB,KAAKkB,KAAM,gDAtFVlB,KAAMb"}