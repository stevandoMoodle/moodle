define("tiny_media/embed/embedhelpers",["exports","../selectors","core/str","../common","editor_tiny/options","../helpers"],(function(_exports,_selectors,_str,_common,_options,_helpers){var obj;
/**
   * Tiny media plugin embed helpers.
   *
   * This provides easy access to any classes without instantiating a new object.
   *
   * @module      tiny_media/embed/embedhelpers
   * @copyright   2024 Stevani Andolo <stevani@hotmail.com.au>
   * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.prepareMoodleLang=_exports.mediaDetailsTemplateContext=_exports.isYoutubeUrl=_exports.insertMediaThumbnailTemplateContext=_exports.insertMediaTemplateContext=_exports.hasAudioVideoAttr=_exports.getSelectedMediaElement=_exports.getMoodleLangObj=_exports.getHelpStrings=_exports.getFileMimeTypeFromUrl=_exports.getEmbeddedMediaDetails=_exports.formatMediaUrl=void 0,_selectors=(obj=_selectors)&&obj.__esModule?obj:{default:obj};_exports.insertMediaTemplateContext=props=>({mediaType:props.mediaType,showDropzone:props.canShowDropZone,showFilePicker:props.canShowFilePicker,fileType:"audio/video"});_exports.insertMediaThumbnailTemplateContext=props=>({elementid:props.editor.id,showDropzone:props.canShowDropZone,bodyTemplate:_selectors.default.EMBED.template.body.insertMediaBody,footerTemplate:_selectors.default.EMBED.template.footer.insertMediaFooter,fileType:"image",selector:_selectors.default.EMBED.type});_exports.getSelectedMediaElement=editor=>{let mediaType=null,selectedMedia=null;const mediaElm=editor.selection.getNode();return mediaElm?"video"===mediaElm.nodeName.toLowerCase()||"audio"===mediaElm.nodeName.toLowerCase()?(mediaType=mediaElm.nodeName.toLowerCase(),selectedMedia=mediaElm):mediaElm.querySelector("video")?(mediaType="video",selectedMedia=mediaElm.querySelector("video")):mediaElm.querySelector("audio")&&(mediaType="audio",selectedMedia=mediaElm.querySelector("audio")):(mediaType=null,selectedMedia=null),[mediaType,selectedMedia]};_exports.formatMediaUrl=async(url,props)=>{let params={},media=null;props.selectedMedia&&(media=props.selectedMedia,params={controls:hasAudioVideoAttr(media,"controls")?"1":"0",autoplay:hasAudioVideoAttr(media,"autoplay")?"1":"0",loop:hasAudioVideoAttr(media,"loop")});let urlParams="";const[isYoutube,youtubeType]=isYoutubeUrl(url);if(isYoutube){let fetchUrl=await fetch("https://www.youtube.com/oembed?url=".concat(url,"&format=json")),youtubeData=JSON.parse(await fetchUrl.text());const youtubeRegex=/(youtu.*be.*|y2u.*be.*)\/(watch\?v=|embed\/|v|shorts|)(.*?((?=[&#?])|$))/gm.exec(url),site=youtubeRegex[1],idOrType=youtubeRegex[3],playlistCheckRegex=/[?&]list=([^#?&]*)/;props.selectedMedia&&(params.mute=hasAudioVideoAttr(media,"muted"));let isYoutubePlaylist=!1;("playlist"===idOrType||playlistCheckRegex.test(url))&&(isYoutubePlaylist=!0);const isShort=["youtu.be","y2u.be"].includes(site),isNoCookie="youtube-nocookie.com"===youtubeType;return isYoutubePlaylist?(params.list=/[&?]list=([^&]+)/i.exec(url)[1],urlParams=(0,_helpers.createUrlParams)(params),urlParams=""===urlParams?"":"?".concat(urlParams),url=isNoCookie?"https://www.youtube-nocookie.com/embed/videoseries".concat(urlParams):"https://".concat(isShort?"youtube.com":site,"/embed/videoseries").concat(urlParams)):(urlParams=(0,_helpers.createUrlParams)(params),urlParams=""===urlParams?"":"?".concat(urlParams),url=isNoCookie?"https://www.youtube-nocookie.com/embed/".concat(idOrType+urlParams):"https://".concat(isShort?"youtube.com":site,"/embed/").concat(idOrType+urlParams)),[url,"link",youtubeData.title]}if(url.includes("https://vimeo.com/")){props.selectedMedia&&(params.muted=hasAudioVideoAttr(media,"muted")),urlParams=(0,_helpers.createUrlParams)(params),urlParams=""===urlParams?"":"?".concat(urlParams);const vimeoVideoIdRegExp=/^.*(vimeo\.com\/)((channels\/[A-z]+\/)|(groups\/[A-z]+\/videos\/))?([0-9]+)/,vimeoVideoId=url.match(vimeoVideoIdRegExp)[5],fetchUrl=await fetch("https://vimeo.com/api/v2/video/".concat(vimeoVideoId,".json")),vimeoData=JSON.parse(await fetchUrl.text())[0];return[url.replaceAll("vimeo.com","player.vimeo.com/video")+urlParams,"link",vimeoData.title]}return[url,null,null]};const isYoutubeUrl=url=>{let isYoutube=!1,type=null;const youtubeTypes=["youtube.com","youtube-nocookie.com","youtu.be","y2u.be"];for(let i=0;i<youtubeTypes.length;i++)if(url.includes(youtubeTypes[i])){isYoutube=!0,type=youtubeTypes[i];break}return[isYoutube,type]};_exports.isYoutubeUrl=isYoutubeUrl;_exports.mediaDetailsTemplateContext=async props=>{const context={bodyTemplate:_selectors.default.EMBED.template.body.mediaDetailsBody,footerTemplate:_selectors.default.EMBED.template.footer.mediaDetailsFooter,isVideo:"video"===props.mediaType,isAudio:"audio"===props.mediaType,isLink:"link"===props.mediaType,canHaveThumbnail:"video"===props.mediaType||"video"===props.mediaTagType,isUpdating:props.isUpdating,isNewFileOrLinkUpload:props.newMediaLink||props.newFileUpload,selector:_selectors.default.EMBED.type};return context.isLink&&(context.linkMediaType=[{label:await(0,_str.getString)("audio",_common.component),value:"audio",selected:"audio"===props.mediaTagType?"selected":""},{label:await(0,_str.getString)("video",_common.component),value:"video",selected:"video"===props.mediaTagType?"selected":""}]),{...context,...props}};_exports.getHelpStrings=async()=>{const[customsize,linkcustomsize]=await(0,_str.getStrings)(["customsize_help","linkcustomsize_help"].map((key=>({key:key,component:_common.component}))));return{customsize:customsize,linkcustomsize:linkcustomsize}};_exports.prepareMoodleLang=editor=>{const moodleLangs=(0,_options.getMoodleLang)(editor),currentLanguage=(0,_options.getCurrentLanguage)(editor);return{installed:Object.entries(moodleLangs.installed).map((_ref=>{let[lang,code]=_ref;return{lang:lang,code:code,default:lang===currentLanguage}})),available:Object.entries(moodleLangs.available).map((_ref2=>{let[lang,code]=_ref2;return{lang:lang,code:code,default:lang===currentLanguage}}))}};_exports.getMoodleLangObj=(subtitleLang,editor)=>{const{available:available}=(0,_options.getMoodleLang)(editor);return available[subtitleLang]?{lang:subtitleLang,code:available[subtitleLang]}:null};_exports.getEmbeddedMediaDetails=props=>{var _props$media$poster;const tracks={subtitles:[],captions:[],descriptions:[],chapters:[],metadata:[]};props.root.querySelectorAll(_selectors.default.EMBED.elements.mediaMetadataTabPane).forEach((metaData=>{metaData.querySelectorAll(_selectors.default.EMBED.elements.track).forEach((track=>{tracks[metaData.dataset.trackKind].push({src:track.querySelector(_selectors.default.EMBED.elements.url).value,srclang:track.querySelector(_selectors.default.EMBED.elements.trackLang).value,label:track.querySelector(_selectors.default.EMBED.elements.trackLabel).value,defaultTrack:track.querySelector(_selectors.default.EMBED.elements.trackDefault).checked})}))}));const querySelector=element=>props.root.querySelector(element),mediaDataProps={};return mediaDataProps.media={type:props.mediaType,sources:props.media,poster:null!==(_props$media$poster=props.media.poster)&&void 0!==_props$media$poster?_props$media$poster:null,title:querySelector(_selectors.default.EMBED.elements.title).value,width:querySelector(_selectors.default.EMBED.elements.width).value,height:querySelector(_selectors.default.EMBED.elements.height).value,autoplay:querySelector(_selectors.default.EMBED.elements.mediaAutoplay).checked,loop:querySelector(_selectors.default.EMBED.elements.mediaLoop).checked,muted:querySelector(_selectors.default.EMBED.elements.mediaMute).checked,controls:querySelector(_selectors.default.EMBED.elements.mediaControl).checked,tracks:tracks},mediaDataProps.link=!1,mediaDataProps};const hasAudioVideoAttr=(elem,attr)=>elem.hasAttribute(attr)&&(elem.getAttribute(attr)||""===elem.getAttribute(attr));_exports.hasAudioVideoAttr=hasAudioVideoAttr;_exports.getFileMimeTypeFromUrl=async url=>{let fetchedMimeType=null,fileName=null;const uri=url.split("/");uri.length>0&&(fileName=uri[uri.length-1]);const mimeTypes=_selectors.default.MEDIA_MIME_TYPES;for(const property in mimeTypes){if(!fileName||!fileName.includes(".")){fetchedMimeType="link";break}{let fileExtension=fileName.split(".");if(fileExtension=fileExtension[fileExtension.length-1].toLowerCase(),fileExtension.includes("?")&&fileExtension.split("?")[0]===property)fetchedMimeType=mimeTypes[property];else if(fileExtension===property){fetchedMimeType=mimeTypes[property];break}}}return fetchedMimeType}}));

//# sourceMappingURL=embedhelpers.min.js.map