{"version":3,"file":"embedhandler.min.js","sources":["../../src/embed/embedhandler.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny media plugin embed handler class.\n *\n * This handles anything that embed requires like:\n * - Calling the media preview in embedPreview.\n * - Loading the embed insert.\n * - Getting selected media data.\n * - Handles url and repository uploads.\n * - Reset embed insert when embed preview is deleted.\n * - Handles media embedding into tiny and etc.\n *\n * @module      tiny_media/embed/embedhandler\n * @copyright   2024 Stevani Andolo <stevani@hotmail.com.au>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Selectors from \"../selectors\";\nimport {EmbedInsert} from './embedinsert';\nimport {\n    body,\n    footer,\n    setPropertiesFromData,\n    hideElements,\n    isValidUrl,\n} from '../helpers';\nimport * as ModalEvents from 'core/modal_events';\nimport {displayFilepicker} from 'editor_tiny/utils';\n\nexport class EmbedHandler {\n\n    constructor(data) {\n        setPropertiesFromData(this, data); // Creates dynamic properties based on \"data\" param.\n    }\n\n    /**\n     * Load the media insert dialogue.\n     *\n     * @param {object} templateContext Object template context\n     */\n    loadTemplatePromise = (templateContext) => {\n        templateContext.elementid = this.editor.id;\n        templateContext.bodyTemplate = Selectors.EMBED.template.body.insertMediaBody;\n        templateContext.footerTemplate = Selectors.EMBED.template.footer.insertMediaFooter;\n        templateContext.selector = 'EMBED';\n\n        Promise.all([body(templateContext, this.root), footer(templateContext, this.root)])\n            .then(() => {\n                (new EmbedInsert(this)).init();\n                return;\n            })\n            .catch(error => {\n                window.console.log(error);\n            });\n    };\n\n    /**\n     * Handles changes in the media URL input field and loads a preview of the media if the URL has changed.\n     */\n    urlChanged() {\n        hideElements(Selectors.EMBED.elements.urlWarning, this.root);\n        const url = this.root.querySelector(Selectors.EMBED.elements.fromUrl).value;\n        if (url && url !== this.currentUrl) {\n            window.console.log(url);\n        }\n    }\n\n    /**\n     * Callback for file picker that previews the media or add the captions and subtitles.\n     *\n     * @param {object} params Object of media url and etc\n     */\n    trackFilePickerCallback(params) {\n        if (params.url !== '') {\n            window.console.log(params.url);\n        }\n    }\n\n    /**\n     * Handle click events.\n     *\n     * @param {html} e Selected element\n     */\n    clickHandler = async(e) => {\n        const element = e.target;\n\n        const mediaBrowser = element.closest(Selectors.EMBED.actions.mediaBrowser);\n        if (mediaBrowser) {\n            e.preventDefault();\n            const params = await displayFilepicker(this.editor, 'media');\n            this.trackFilePickerCallback(params);\n        }\n\n        const addUrlEle = e.target.closest(Selectors.EMBED.actions.addUrl);\n        if (addUrlEle) {\n            this.urlChanged();\n        }\n    };\n\n    /**\n     * Enables or disables the URL-related buttons in the footer based on the current URL and input value.\n     *\n     * @param {html} input Url input field\n     */\n    toggleUrlButton(input) {\n        const url = input.value;\n        const addUrl = this.root.querySelector(Selectors.EMBED.actions.addUrl);\n        addUrl.disabled = !(url !== \"\" && isValidUrl(url));\n    }\n\n    registerEventListeners = async(modal) => {\n        await modal.getBody();\n        const $root = modal.getRoot();\n        const root = $root[0];\n        if (this.canShowFilePickerTrack) {\n            root.addEventListener('click', this.clickHandler.bind(this));\n        }\n\n        root.addEventListener('input', (e) => {\n            const urlEle = e.target.closest(Selectors.EMBED.elements.fromUrl);\n            if (urlEle) {\n                this.toggleUrlButton(urlEle);\n            }\n        });\n\n        $root.on(ModalEvents.hidden, () => {\n            this.currentModal.destroy();\n        });\n    };\n}\n"],"names":["constructor","data","templateContext","elementid","this","editor","id","bodyTemplate","Selectors","EMBED","template","body","insertMediaBody","footerTemplate","footer","insertMediaFooter","selector","Promise","all","root","then","EmbedInsert","init","catch","error","window","console","log","async","e","target","closest","actions","mediaBrowser","preventDefault","params","trackFilePickerCallback","addUrl","urlChanged","modal","getBody","$root","getRoot","canShowFilePickerTrack","addEventListener","clickHandler","bind","urlEle","elements","fromUrl","toggleUrlButton","on","ModalEvents","hidden","currentModal","destroy","urlWarning","url","querySelector","value","currentUrl","input","disabled"],"mappings":"m+CA6CIA,YAAYC,kDASWC,kBACnBA,gBAAgBC,UAAYC,KAAKC,OAAOC,GACxCJ,gBAAgBK,aAAeC,mBAAUC,MAAMC,SAASC,KAAKC,gBAC7DV,gBAAgBW,eAAiBL,mBAAUC,MAAMC,SAASI,OAAOC,kBACjEb,gBAAgBc,SAAW,QAE3BC,QAAQC,IAAI,EAAC,iBAAKhB,gBAAiBE,KAAKe,OAAO,mBAAOjB,gBAAiBE,KAAKe,QACvEC,MAAK,SACGC,yBAAYjB,MAAOkB,UAG3BC,OAAMC,QACHC,OAAOC,QAAQC,IAAIH,kDA+BhBI,MAAAA,OACKC,EAAEC,OAEWC,QAAQvB,mBAAUC,MAAMuB,QAAQC,cAC3C,CACdJ,EAAEK,uBACIC,aAAe,4BAAkB/B,KAAKC,OAAQ,cAC/C+B,wBAAwBD,QAGfN,EAAEC,OAAOC,QAAQvB,mBAAUC,MAAMuB,QAAQK,cAElDC,+DAeYV,MAAAA,cACfW,MAAMC,gBACNC,MAAQF,MAAMG,UACdvB,KAAOsB,MAAM,GACfrC,KAAKuC,wBACLxB,KAAKyB,iBAAiB,QAASxC,KAAKyC,aAAaC,KAAK1C,OAG1De,KAAKyB,iBAAiB,SAAUf,UACtBkB,OAASlB,EAAEC,OAAOC,QAAQvB,mBAAUC,MAAMuC,SAASC,SACrDF,aACKG,gBAAgBH,WAI7BN,MAAMU,GAAGC,YAAYC,QAAQ,UACpBC,aAAaC,mDA9FAnD,KAAMH,MA2BhCqC,uCACiB9B,mBAAUC,MAAMuC,SAASQ,WAAYpD,KAAKe,YACjDsC,IAAMrD,KAAKe,KAAKuC,cAAclD,mBAAUC,MAAMuC,SAASC,SAASU,MAClEF,KAAOA,MAAQrD,KAAKwD,YACpBnC,OAAOC,QAAQC,IAAI8B,KAS3BrB,wBAAwBD,QACD,KAAfA,OAAOsB,KACPhC,OAAOC,QAAQC,IAAIQ,OAAOsB,KA8BlCP,gBAAgBW,aACNJ,IAAMI,MAAMF,MACHvD,KAAKe,KAAKuC,cAAclD,mBAAUC,MAAMuB,QAAQK,QACxDyB,WAAqB,KAARL,MAAc,uBAAWA"}