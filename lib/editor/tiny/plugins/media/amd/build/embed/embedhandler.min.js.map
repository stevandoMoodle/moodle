{"version":3,"file":"embedhandler.min.js","sources":["../../src/embed/embedhandler.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny media plugin embed handler class.\n *\n * This handles anything that embed requires like:\n * - Calling the media preview in embedPreview.\n * - Loading the embed insert.\n * - Getting selected media data.\n * - Handles url and repository uploads.\n * - Reset embed insert when embed preview is deleted.\n * - Handles media embedding into tiny and etc.\n *\n * @module      tiny_media/embed/embedhandler\n * @copyright   2024 Stevani Andolo <stevani@hotmail.com.au>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Selectors from \"../selectors\";\nimport {EmbedInsert} from './embedinsert';\nimport {\n    body,\n    footer,\n    setPropertiesFromData,\n    isValidUrl,\n    stopMediaLoading,\n    startMediaLoading,\n} from '../helpers';\nimport * as ModalEvents from 'core/modal_events';\nimport {displayFilepicker} from 'editor_tiny/utils';\nimport {\n    insertMediaTemplateContext,\n    getHelpStrings,\n    prepareMoodleLang,\n    getMoodleLangObj,\n    audioVideoBoolAttr,\n    insertMediaThumbnailTemplateContext,\n} from \"./embedhelpers\";\nimport Templates from 'core/templates';\nimport {EmbedThumbnailInsert} from './embedthumbnailinsert';\n\nexport class EmbedHandler {\n\n    constructor(data) {\n        setPropertiesFromData(this, data); // Creates dynamic properties based on \"data\" param.\n    }\n\n    /**\n     * Load the media insert dialogue.\n     *\n     * @param {object} templateContext Object template context\n     */\n    loadTemplatePromise = (templateContext) => {\n        templateContext.elementid = this.editor.id;\n        templateContext.bodyTemplate = Selectors.EMBED.template.body.insertMediaBody;\n        templateContext.footerTemplate = Selectors.EMBED.template.footer.insertMediaFooter;\n        templateContext.selector = Selectors.EMBED.type;\n\n        Promise.all([body(templateContext, this.root), footer(templateContext, this.root)])\n            .then(() => {\n                (new EmbedInsert(this)).init();\n                return;\n            })\n            .catch(error => {\n                window.console.log(error);\n            });\n    };\n\n    /**\n     * Load the media thumbnail insert dialogue.\n     *\n     * @param {object} templateContext Object template context\n     * @param {HTMLElement} root\n     * @param {object} mediaData\n     */\n    loadInsertThumbnailTemplatePromise = async(templateContext, root, mediaData) => {\n        Promise.all([body(templateContext, root.root), footer(templateContext, root.root)])\n            .then(() => {\n                if (!this.currentModal.insertMediaModal) {\n                    this.currentModal.insertMediaModal = this.currentModal;\n                }\n\n                if (root.uploadThumbnailModal) {\n                    this.currentModal.uploadThumbnailModal = root.uploadThumbnailModal;\n                }\n\n                this.thumbnailModalRoot = root.root;\n                (new EmbedThumbnailInsert(this)).init(mediaData);\n                return;\n            })\n            .catch(error => {\n                window.console.log(error);\n            });\n    };\n\n    /**\n     * Loads the media preview dialogue.\n     *\n     * @param {object} embedPreview Object of embedPreview\n     * @param {object} templateContext Object of template context\n     */\n    loadMediaDetails = async(embedPreview, templateContext) => {\n        Promise.all([body(templateContext, this.root), footer(templateContext, this.root)])\n            .then(() => {\n                embedPreview.init();\n                return;\n            })\n            .catch(error => {\n                stopMediaLoading(this.root, Selectors.EMBED.type);\n                window.console.log(error);\n            });\n    };\n\n    /**\n     * Reset the media/thumbnail insert modal form.\n     *\n     * @param {boolean} isMediaInsert Is current state media insert or thumbnail insert?\n     */\n    resetUploadForm = (isMediaInsert = true) => {\n        if (isMediaInsert) {\n            this.resetCurrentMediaData();\n            this.loadTemplatePromise(insertMediaTemplateContext(this));\n        } else {\n            this.loadInsertThumbnailTemplatePromise(\n                insertMediaThumbnailTemplateContext(this), // Get template context for creating media thumbnail.\n                {root: this.thumbnailModalRoot}, // Required root elements.\n                this.mediaData // Get current media data.\n            );\n        }\n    };\n\n    /**\n     * Get selected media data.\n     *\n     * @returns {null|object}\n     */\n    getMediumProperties = () => {\n        const medium = this.selectedMedia;\n        if (!medium) {\n            return null;\n        }\n\n        const tracks = {\n            subtitles: [],\n            captions: [],\n            descriptions: [],\n            chapters: [],\n            metadata: []\n        };\n        const sources = [];\n\n        medium.querySelectorAll('track').forEach((track) => {\n            tracks[track.getAttribute('kind')].push({\n                src: track.getAttribute('src'),\n                srclang: track.getAttribute('srclang'),\n                label: track.getAttribute('label'),\n                defaultTrack: audioVideoBoolAttr(track, 'default')\n            });\n        });\n\n        medium.querySelectorAll('source').forEach((source) => {\n            sources.push(source.src);\n        });\n        const title = medium.getAttribute('title') ?? medium.textContent;\n\n        return {\n            type: this.mediaType,\n            sources,\n            poster: medium.getAttribute('poster'),\n            title: title ? title.trim() : false,\n            width: medium.getAttribute('width'),\n            height: medium.getAttribute('height'),\n            autoplay: audioVideoBoolAttr(medium, 'autoplay'),\n            loop: audioVideoBoolAttr(medium, 'loop'),\n            muted: audioVideoBoolAttr(medium, 'muted'),\n            controls: audioVideoBoolAttr(medium, 'controls'),\n            tracks,\n        };\n    };\n\n    /**\n     * Get selected media data.\n     *\n     * @returns {object}\n     */\n    getCurrentEmbedData = () => {\n        const properties = this.getMediumProperties();\n        if (!properties || this.newMediaLink) {\n            return {media: {}};\n        }\n\n        const processedProperties = {};\n        processedProperties.media = properties;\n        processedProperties.link = false;\n\n        return processedProperties;\n    };\n\n    /**\n     * Get help strings for media subtitles and captions.\n     *\n     * @returns {null|object}\n     */\n    getHelpStrings = async() => {\n        if (!this.helpStrings) {\n            this.helpStrings = await getHelpStrings();\n        }\n\n        return this.helpStrings;\n    };\n\n    /**\n     * Set template context for insert media dialogue.\n     *\n     * @param {object} data Object of media data\n     * @returns {object}\n     */\n    getTemplateContext = async(data) => {\n        const languages = prepareMoodleLang(this.editor);\n        const helpIcons = Array.from(Object.entries(await this.getHelpStrings())).forEach(([key, text]) => {\n            data[`${key.toLowerCase()}helpicon`] = {text};\n        });\n\n        return Object.assign({}, {\n            elementid: this.editor.getElement().id,\n            showFilePickerTrack: this.canShowFilePickerTrack,\n            langsInstalled: languages.installed,\n            langsAvailable: languages.available,\n            media: true,\n            isUpdating: this.isUpdating,\n        }, data, helpIcons);\n    };\n\n    /**\n     * Set and get media template context.\n     *\n     * @param {null|object} data Null or object of media data\n     * @returns {Promise<object>} A promise that resolves template context.\n     */\n    getMediaTemplateContext = async(data = null) => {\n        if (!data) {\n            data = Object.assign({}, this.getCurrentEmbedData());\n        } else {\n            if (data.hasOwnProperty('isUpdating')) {\n                this.isUpdating = data.isUpdating;\n            } else {\n                this.isUpdating = Object.keys(data).length > 1;\n            }\n        }\n        return await this.getTemplateContext(data);\n    };\n\n    /**\n     * Handles changes in the media URL input field and loads a preview of the media if the URL has changed.\n     */\n    urlChanged() {\n        const url = this.root.querySelector(Selectors.EMBED.elements.fromUrl).value;\n        if (url && url !== this.currentUrl) {\n            // Set to null on new url change.\n            this.mediaType = null;\n\n            // Flag as new media link insert.\n            this.newMediaLink = true;\n            this.loadMediaPreview(url);\n        }\n    }\n\n    /**\n     * Load the media preview dialogue.\n     *\n     * @param {string} url String of media url\n     */\n    loadMediaPreview = (url) => {\n        (new EmbedInsert(this)).loadMediaPreview(url);\n    };\n\n    /**\n     * Callback for file picker that previews the media or add the captions and subtitles.\n     *\n     * @param {object} params Object of media url and etc\n     * @param {html} element Selected element.\n     * @param {string} fpType Caption type.\n     */\n    trackFilePickerCallback(params, element, fpType) {\n        if (params.url !== '') {\n            const tabPane = element.closest('.tab-pane');\n            if (tabPane) {\n                element.closest(Selectors.EMBED.elements.source).querySelector(Selectors.EMBED.elements.url).value = params.url;\n\n                if (fpType === 'subtitle') {\n                    // If the file is subtitle file. We need to match the language and label for that file.\n                    const subtitleLang = params.file.split('.vtt')[0].split('-').slice(-1)[0];\n                    const langObj = getMoodleLangObj(subtitleLang, this.editor);\n                    if (langObj) {\n                        const track = element.closest(Selectors.EMBED.elements.track);\n                        track.querySelector(Selectors.EMBED.elements.trackLabel).value = langObj.lang.trim();\n                        track.querySelector(Selectors.EMBED.elements.trackLang).value = langObj.code;\n                    }\n                }\n            } else {\n                // Flag as new file upload.\n                this.newFileUpload = true;\n                this.resetCurrentMediaData();\n                this.loadMediaPreview(params.url);\n            }\n        }\n    }\n\n    /**\n     * Reset current media data.\n     */\n    resetCurrentMediaData = () => {\n        // Reset the value of the following props.\n        this.media = {};\n        this.mediaType = null;\n        this.selectedMedia = null;\n    };\n\n    /**\n     * Add new html track element.\n     *\n     * @param {html} element\n     */\n    addTrackComponent(element) {\n        const trackElement = element.closest(Selectors.EMBED.elements.track);\n        const clone = trackElement.cloneNode(true);\n\n        trackElement.querySelector('.removecomponent-wrapper').classList.remove('hidden');\n        trackElement.querySelector('.addcomponent-wrapper').classList.add('hidden');\n        trackElement.parentNode.insertBefore(clone, trackElement.nextSibling);\n    }\n\n    /**\n     * Remove added html track element.\n     *\n     * @param {html} element\n     */\n    removeTrackComponent(element) {\n        const sourceElement = element.closest(Selectors.EMBED.elements.track);\n        sourceElement.remove();\n    }\n\n    /**\n     * Get picker type based on the selected element.\n     *\n     * @param {html} element Selected element\n     * @returns {string}\n     */\n    getFilePickerTypeFromElement = (element) => {\n        if (element.closest(Selectors.EMBED.elements.posterSource)) {\n            return 'image';\n        }\n        if (element.closest(Selectors.EMBED.elements.trackSource)) {\n            return 'subtitle';\n        }\n\n        return 'media';\n    };\n\n    /**\n     * Get captions/subtitles type.\n     *\n     * @param {html} tabPane\n     * @returns {string}\n     */\n    getTrackTypeFromTabPane = (tabPane) => {\n        return tabPane.getAttribute('data-track-kind');\n    };\n\n    /**\n     * Handle click events.\n     *\n     * @param {html} e Selected element\n     */\n    clickHandler = async(e) => {\n        const element = e.target;\n\n        const mediaBrowser = element.closest(Selectors.EMBED.actions.mediaBrowser);\n        if (mediaBrowser) {\n            e.preventDefault();\n            const fpType = this.getFilePickerTypeFromElement(element);\n            const params = await displayFilepicker(this.editor, fpType);\n            this.trackFilePickerCallback(params, element, fpType);\n        }\n\n        const addUrlEle = e.target.closest(Selectors.EMBED.actions.addUrl);\n        if (addUrlEle) {\n            startMediaLoading(this.root, Selectors.EMBED.type);\n            this.urlChanged();\n        }\n\n        const addComponentTrackAction = element.closest(Selectors.EMBED.elements.track + ' .addcomponent');\n        if (addComponentTrackAction) {\n            e.preventDefault();\n            this.addTrackComponent(element);\n        }\n\n        const removeComponentTrackAction = element.closest(Selectors.EMBED.elements.track + ' .removecomponent');\n        if (removeComponentTrackAction) {\n            e.preventDefault();\n            this.removeTrackComponent(element);\n        }\n\n        // Only allow one track per tab to be selected as \"default\".\n        const trackDefaultAction = element.closest(Selectors.EMBED.elements.trackDefault);\n        if (trackDefaultAction && trackDefaultAction.checked) {\n            const getKind = (el) => this.getTrackTypeFromTabPane(el.parentElement.closest('.tab-pane'));\n\n            element.parentElement\n                .closest('.tab-content')\n                .querySelectorAll(Selectors.EMBED.elements.trackDefault)\n                .forEach((select) => {\n                    if (select !== element && getKind(element) === getKind(select)) {\n                        select.checked = false;\n                    }\n                });\n        }\n    };\n\n    /**\n     * Enables or disables the URL-related buttons in the footer based on the current URL and input value.\n     *\n     * @param {html} input Url input field\n     * @param {object} root\n     */\n    toggleUrlButton(input, root) {\n        const url = input.value;\n        const addUrl = root.querySelector(Selectors.EMBED.actions.addUrl);\n        addUrl.disabled = !(url !== \"\" && isValidUrl(url));\n    }\n\n    /**\n     * Get media html to be inserted or updated into tiny.\n     *\n     * @param {html} form Selected element\n     * @returns {string} String of html\n     */\n    getMediaHTML = (form) => {\n        const mediaLinkEmbedType = this.root.querySelector(Selectors.EMBED.elements.mediaLinkEmbedType);\n        let mediumType = this.root.querySelector(Selectors.EMBED.elements.mediaPreviewTag).nodeName.toLowerCase();\n        if (mediumType === 'iframe') {\n            this.mediaType = 'link';\n            this.mediaTagType = mediaLinkEmbedType.value;\n        } else {\n            this.mediaType = mediumType;\n            this.mediaTagType = mediumType;\n        }\n        const tabContent = form.querySelector('.tab-content');\n        const callback = 'getMediaHTML' + this.mediaTagType[0].toUpperCase() + this.mediaTagType.substr(1);\n        return this[callback](tabContent);\n    };\n\n    /**\n     * Get media as video.\n     *\n     * @param {html} tab Selected element\n     * @returns {string} String of html.\n     */\n    getMediaHTMLVideo = (tab) => {\n        const details = document.querySelector(Selectors.EMBED.elements.mediaDetailsBody);\n        const context = this.getContextForMediaHTML(tab, details);\n        context.width = details.querySelector(Selectors.EMBED.elements.width).value || false;\n        context.height = details.querySelector(Selectors.EMBED.elements.height).value || false;\n\n        const mediaPreviewTag = details.querySelector(Selectors.EMBED.elements.mediaPreviewTag);\n        context.poster = (mediaPreviewTag.poster ?? mediaPreviewTag.dataset.poster) || false;\n        context.isLinkMediaType = (this.mediaType === 'link');\n        return context.sources ? Templates.renderForPromise('tiny_media/embed/embed_media_video', context) : '';\n    };\n\n    /**\n     * Get media as audio.\n     *\n     * @param {html} tab Selected element\n     * @returns {string} String of html.\n     */\n    getMediaHTMLAudio = (tab) => {\n        const details = document.querySelector(Selectors.EMBED.elements.mediaDetailsBody);\n        const context = this.getContextForMediaHTML(tab, details);\n        context.isLinkMediaType = (this.mediaType === 'link');\n        return context.sources.length ? Templates.renderForPromise('tiny_media/embed/embed_media_audio', context) : '';\n    };\n\n    /**\n     * Get previewed media data.\n     *\n     * @param {html} tab Selected element\n     * @param {html} details Selected element\n     * @returns {object}\n     */\n    getContextForMediaHTML = (tab, details) => {\n        const tracks = Array.from(tab.querySelectorAll(Selectors.EMBED.elements.track)).map(track => ({\n            track: track.querySelector(Selectors.EMBED.elements.trackSource + ' ' + Selectors.EMBED.elements.url).value,\n            kind: this.getTrackTypeFromTabPane(track.closest('.tab-pane')),\n            label: track.querySelector(Selectors.EMBED.elements.trackLabel).value ||\n                track.querySelector(Selectors.EMBED.elements.trackLang).value,\n            srclang: track.querySelector(Selectors.EMBED.elements.trackLang).value,\n            defaultTrack: track.querySelector(Selectors.EMBED.elements.trackDefault).checked ? \"true\" : null\n        })).filter((track) => !!track.track);\n\n        const mediaPreviewTag = details.querySelector(Selectors.EMBED.elements.mediaPreviewTag);\n        let sources = mediaPreviewTag.dataset.originalUrl ?? null;\n\n        // Let's check if media has more than one sources.\n        if (this.allSources) {\n            // Always update the first item in this.allSources to the new one.\n            this.allSources[0] = sources;\n            // Override the sources to have all the updated sources.\n            sources = this.allSources;\n        }\n\n        const title = details.querySelector(Selectors.EMBED.elements.title).value;\n        // Remove data-original-url attribute once it's extracted.\n        mediaPreviewTag.removeAttribute('data-original-url');\n\n        const templateContext = {\n            sources,\n            tracks,\n            showControls: details.querySelector(Selectors.EMBED.elements.mediaControl).checked,\n            autoplay: details.querySelector(Selectors.EMBED.elements.mediaAutoplay).checked,\n            muted: details.querySelector(Selectors.EMBED.elements.mediaMute).checked,\n            loop: details.querySelector(Selectors.EMBED.elements.mediaLoop).checked,\n            title: title !== '' ? title.trim() : false,\n        };\n\n        // Add description prop to templateContext if media type is \"link\".\n        if (this.mediaType === 'link') {\n            // The purpose of the following formatting is so that the media player will still read the \"description\" as a link,\n            // but will apply the user settings in video/audio tag.\n            // For example:\n            // <video controls=\"controls\" autoplay=\"autoplay\" muted=\"true\" loop=\"true\">\n            //      <source src=\"https://www.youtube.com/watch?v=youtubeid\">\n            //      https://www.youtube.com/watch?v=youtubeid -> \"description\"\n            // </video>\n            // The above code's link underneath the <source>, will be translated as a link:\n            // <video controls=\"controls\" autoplay=\"autoplay\" muted=\"true\" loop=\"true\">\n            //      <source src=\"https://www.youtube.com/watch?v=youtubeid\">\n            //      <a href=\"https://www.youtube.com/watch?v=youtubeid\"></a>\n            // </video>\n            // As a result, the controls settings will not be applied.\n\n            // Therefor, with the changes in YouTube and Vimeo plugin,\n            // we need to make anything wrapped by video/audio tag as if it's not a valid url like the following:\n            // <video controls=\"controls\" autoplay=\"autoplay\" muted=\"true\" loop=\"true\">\n            //      <source src=\"https://www.youtube.com/watch?v=youtubeid\">\n            //      youtube.com/watch?v=youtubeid -> \"description\"\n            // </video>\n            // That way, media player plugin like YouTube and video will get the controls and apply them as url params.\n\n            // Let's form an alternative title.\n            let altTitle = Array.isArray(sources) ? sources[0] : sources;\n            // Remove the \"https://\" from the original link if exists.\n            altTitle = altTitle.replace('https://', '');\n            // Remove the \"http://\" from the original link if exists.\n            altTitle = altTitle.replace('http://', '');\n            // Remove the \"www.\" from the original link if exists.\n            altTitle = altTitle.replace('www.', '');\n\n            // Add the cleaned string as media description.\n            templateContext.description = altTitle;\n        }\n\n        return templateContext;\n    };\n\n    /**\n     * Handle the insert/update media in tiny editor.\n     *\n     * @param {event} event\n     * @param {object} modal Object of current modal\n     */\n    handleDialogueSubmission = async(event, modal) => {\n        const {html} = await this.getMediaHTML(modal.getRoot()[0]);\n        if (html) {\n            if (this.isUpdating) {\n                this.selectedMedia.outerHTML = html;\n                this.isUpdating = false;\n            } else {\n                this.editor.insertContent(html);\n            }\n        }\n    };\n\n    registerEventListeners = async(modal) => {\n        await modal.getBody();\n        const $root = modal.getRoot();\n        const root = $root[0];\n        if (this.canShowFilePickerTrack) {\n            root.addEventListener('click', this.clickHandler.bind(this));\n        }\n\n        root.addEventListener('input', (e) => {\n            const urlEle = e.target.closest(Selectors.EMBED.elements.fromUrl);\n            if (urlEle) {\n                this.toggleUrlButton(urlEle, this.root);\n            }\n        });\n\n        $root.on(ModalEvents.hidden, () => {\n            this.currentModal.destroy();\n        });\n\n        $root.on(ModalEvents.shown, () => {\n            this.root.querySelectorAll(Selectors.EMBED.elements.trackLang).forEach((dropdown) => {\n                const defaultVal = dropdown.getAttribute('data-value');\n                if (defaultVal) {\n                    dropdown.value = defaultVal;\n                }\n            });\n        });\n\n        $root.on(ModalEvents.save, this.handleDialogueSubmission.bind(this));\n    };\n}\n"],"names":["constructor","data","templateContext","elementid","this","editor","id","bodyTemplate","Selectors","EMBED","template","body","insertMediaBody","footerTemplate","footer","insertMediaFooter","selector","type","Promise","all","root","then","EmbedInsert","init","catch","error","window","console","log","async","mediaData","currentModal","insertMediaModal","uploadThumbnailModal","thumbnailModalRoot","EmbedThumbnailInsert","embedPreview","isMediaInsert","_this","resetCurrentMediaData","loadTemplatePromise","loadInsertThumbnailTemplatePromise","medium","selectedMedia","tracks","subtitles","captions","descriptions","chapters","metadata","sources","querySelectorAll","forEach","track","getAttribute","push","src","srclang","label","defaultTrack","source","title","textContent","mediaType","poster","trim","width","height","autoplay","loop","muted","controls","properties","getMediumProperties","newMediaLink","media","processedProperties","link","helpStrings","languages","helpIcons","Array","from","Object","entries","getHelpStrings","_ref","key","text","toLowerCase","assign","getElement","showFilePickerTrack","canShowFilePickerTrack","langsInstalled","installed","langsAvailable","available","isUpdating","hasOwnProperty","keys","length","getCurrentEmbedData","getTemplateContext","url","loadMediaPreview","element","closest","elements","posterSource","trackSource","tabPane","e","target","actions","mediaBrowser","preventDefault","fpType","getFilePickerTypeFromElement","params","trackFilePickerCallback","addUrl","urlChanged","addTrackComponent","removeTrackComponent","trackDefaultAction","trackDefault","checked","getKind","el","getTrackTypeFromTabPane","parentElement","select","form","mediaLinkEmbedType","querySelector","mediumType","mediaPreviewTag","nodeName","mediaTagType","value","tabContent","toUpperCase","substr","tab","details","document","mediaDetailsBody","context","getContextForMediaHTML","dataset","isLinkMediaType","Templates","renderForPromise","map","kind","trackLabel","trackLang","filter","originalUrl","allSources","removeAttribute","showControls","mediaControl","mediaAutoplay","mediaMute","mediaLoop","altTitle","isArray","replace","description","event","modal","html","getMediaHTML","getRoot","outerHTML","insertContent","getBody","$root","addEventListener","clickHandler","bind","urlEle","fromUrl","toggleUrlButton","on","ModalEvents","hidden","destroy","shown","dropdown","defaultVal","save","handleDialogueSubmission","currentUrl","subtitleLang","file","split","slice","langObj","lang","code","newFileUpload","trackElement","clone","cloneNode","classList","remove","add","parentNode","insertBefore","nextSibling","input","disabled"],"mappings":"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"}