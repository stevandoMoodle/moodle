{"version":3,"file":"embedhandler.min.js","sources":["../../src/embed/embedhandler.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny media plugin embed handler class.\n *\n * This handles anything that embed requires like:\n * - Calling the media preview in embedPreview.\n * - Loading the embed insert.\n * - Getting selected media data.\n * - Handles url and repository uploads.\n * - Reset embed insert when embed preview is deleted.\n * - Handles media embedding into tiny and etc.\n *\n * @module      tiny_media/embed/embedhandler\n * @copyright   2024 Stevani Andolo <stevani@hotmail.com.au>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Selectors from \"../selectors\";\nimport {EmbedInsert} from './embedinsert';\nimport {\n    body,\n    footer,\n    setPropertiesFromData,\n    hideElements,\n    isValidUrl,\n    convertStringUrlToObject,\n    stopMediaLoading,\n    createUrlParams,\n} from '../helpers';\nimport * as ModalEvents from 'core/modal_events';\nimport {displayFilepicker} from 'editor_tiny/utils';\nimport {\n    insertMediaTemplateContext,\n    getHelpStrings,\n    prepareMoodleLang,\n    getMoodleLangObj,\n    getLinkBasedUrl,\n} from \"./embedhelpers\";\nimport Templates from 'core/templates';\n\nexport class EmbedHandler {\n\n    constructor(data) {\n        setPropertiesFromData(this, data); // Creates dynamic properties based on \"data\" param.\n    }\n\n    /**\n     * Load the media insert dialogue.\n     *\n     * @param {object} templateContext Object template context\n     */\n    loadTemplatePromise = (templateContext) => {\n        templateContext.elementid = this.editor.id;\n        templateContext.bodyTemplate = Selectors.EMBED.template.body.insertMediaBody;\n        templateContext.footerTemplate = Selectors.EMBED.template.footer.insertMediaFooter;\n        templateContext.selector = 'EMBED';\n\n        Promise.all([body(templateContext, this.root), footer(templateContext, this.root)])\n            .then(() => {\n                (new EmbedInsert(this)).init();\n                return;\n            })\n            .catch(error => {\n                window.console.log(error);\n            });\n    };\n\n    /**\n     * Loads the media preview dialogue.\n     *\n     * @param {object} embedPreview Object of embedPreview\n     * @param {object} templateContext Object of template context\n     */\n    loadMediaDetails = async(embedPreview, templateContext) => {\n        Promise.all([body(templateContext, this.root), footer(templateContext, this.root)])\n            .then(() => {\n                // Hide the body template when preparing the media preview.\n                hideElements(Selectors.EMBED.elements.bodyTemplate, this.root);\n\n                if (this.mediaData) { // It came from mediaThumbnail and we should kill uploadThumbnailModal modal.\n                    this.currentModal.uploadThumbnailModal.destroy();\n                    const currentModal = this.currentModal.insertMediaModal;\n                    this.currentModal = currentModal.insertMediaModal;\n                }\n                embedPreview.init();\n                return;\n            })\n            .catch(error => {\n                if (!this.mediaData) { // It came from mediaThumbnail and we did not init startMediaLoading from there.\n                    stopMediaLoading(this.root, 'EMBED');\n                }\n                window.console.log(error);\n            });\n    };\n\n    /**\n     * Reset the media insert modal form.\n     */\n    resetUploadForm = () => {\n        this.mediaType = null; // Set to null to be set again.\n        this.loadTemplatePromise(insertMediaTemplateContext(this));\n    };\n\n    /**\n     * Get selected media data.\n     *\n     * @returns {null|object}\n     */\n    getMediumProperties = () => {\n        const boolAttr = (elem, attr) => {\n            // As explained in MDL-64175, some OS (like Ubuntu), are removing the value for these attributes.\n            // So in order to check if attr=\"true\", we need to check if the attribute exists and if the value is empty or true.\n            return (elem.hasAttribute(attr) && (elem.getAttribute(attr) || elem.getAttribute(attr) === ''));\n        };\n\n        const medium = this.selectedMedia;\n        if (!medium) {\n            return null;\n        }\n\n        const isLink = (this.mediaType === 'link');\n        if (isLink) {\n            const urlParams = convertStringUrlToObject(medium.href);\n            const mediaData = {\n                type: this.mediaType,\n                title: medium.textContent.trim(),\n            };\n\n            for (const param in urlParams) {\n                let prop = param;\n                if (param === 'mute') {\n                    prop = 'muted';\n                }\n                const isTrue = (urlParams[param] === 'true') || (urlParams[param] === '1');\n                mediaData[prop] = isTrue;\n            }\n            return mediaData;\n        } else {\n            const tracks = {\n                subtitles: [],\n                captions: [],\n                descriptions: [],\n                chapters: [],\n                metadata: []\n            };\n            const sources = [];\n\n            medium.querySelectorAll('track').forEach((track) => {\n                tracks[track.getAttribute('kind')].push({\n                    src: track.getAttribute('src'),\n                    srclang: track.getAttribute('srclang'),\n                    label: track.getAttribute('label'),\n                    defaultTrack: boolAttr(track, 'default')\n                });\n            });\n\n            medium.querySelectorAll('source').forEach((source) => {\n                sources.push(source.src);\n            });\n            const title = medium.getAttribute('title');\n\n            return {\n                type: this.mediaType,\n                sources,\n                poster: medium.getAttribute('poster'),\n                title: title ? title.trim() : false,\n                width: medium.getAttribute('width'),\n                height: medium.getAttribute('height'),\n                autoplay: boolAttr(medium, 'autoplay'),\n                loop: boolAttr(medium, 'loop'),\n                muted: boolAttr(medium, 'muted'),\n                controls: boolAttr(medium, 'controls'),\n                tracks,\n            };\n        }\n    };\n\n    /**\n     * Get selected media data.\n     *\n     * @returns {object}\n     */\n    getCurrentEmbedData = () => {\n        const properties = this.getMediumProperties();\n        if (!properties) {\n            return {};\n        }\n\n        const processedProperties = {};\n        processedProperties.media = properties;\n        processedProperties.link = false;\n\n        return processedProperties;\n    };\n\n    /**\n     * Get help strings for media subtitles and captions.\n     *\n     * @returns {null|object}\n     */\n    getHelpStrings = async() => {\n        if (!this.helpStrings) {\n            this.helpStrings = await getHelpStrings();\n        }\n\n        return this.helpStrings;\n    };\n\n    /**\n     * Set template context for insert media dialogue.\n     *\n     * @param {object} data Object of media data\n     * @returns {object}\n     */\n    getTemplateContext = async(data) => {\n        const languages = prepareMoodleLang(this.editor);\n        const helpIcons = Array.from(Object.entries(await this.getHelpStrings())).forEach(([key, text]) => {\n            data[`${key.toLowerCase()}helpicon`] = {text};\n        });\n\n        return Object.assign({}, {\n            elementid: this.editor.getElement().id,\n            showFilePickerTrack: this.canShowFilePickerTrack,\n            langsInstalled: languages.installed,\n            langsAvailable: languages.available,\n            media: true,\n            isUpdating: this.isUpdating,\n        }, data, helpIcons);\n    };\n\n    /**\n     * Set and get media template context.\n     *\n     * @param {null|object} data Null or object of media data\n     * @returns {Promise<object>} A promise that resolves template context.\n     */\n    getMediaTemplateContext = async(data = null) => {\n        if (!data) {\n            data = Object.assign({}, this.getCurrentEmbedData());\n        }\n        this.isUpdating = Object.keys(data).length !== 0;\n        return await this.getTemplateContext(data);\n    };\n\n    /**\n     * Handles changes in the media URL input field and loads a preview of the media if the URL has changed.\n     */\n    urlChanged() {\n        hideElements(Selectors.EMBED.elements.urlWarning, this.root);\n        const url = this.root.querySelector(Selectors.EMBED.elements.fromUrl).value;\n        if (url && url !== this.currentUrl) {\n            this.loadMediaPreview(url);\n        }\n    }\n\n    /**\n     * Load the media preview dialogue.\n     *\n     * @param {string} url String of media url\n     */\n    loadMediaPreview = (url) => {\n        (new EmbedInsert(this)).loadMediaPreview(url);\n    };\n\n    /**\n     * Callback for file picker that previews the media or add the captions and subtitles.\n     *\n     * @param {object} params Object of media url and etc\n     * @param {html} element Selected element.\n     * @param {string} fpType Caption type.\n     */\n    trackFilePickerCallback(params, element, fpType) {\n        if (params.url !== '') {\n            const tabPane = element.closest('.tab-pane');\n            if (tabPane) {\n                element.closest(Selectors.EMBED.elements.source).querySelector(Selectors.EMBED.elements.url).value = params.url;\n\n                if (fpType === 'subtitle') {\n                    // If the file is subtitle file. We need to match the language and label for that file.\n                    const subtitleLang = params.file.split('.vtt')[0].split('-').slice(-1)[0];\n                    const langObj = getMoodleLangObj(subtitleLang, this.editor);\n                    if (langObj) {\n                        const track = element.closest(Selectors.EMBED.elements.track);\n                        track.querySelector(Selectors.EMBED.elements.trackLabel).value = langObj.lang.trim();\n                        track.querySelector(Selectors.EMBED.elements.trackLang).value = langObj.code;\n                    }\n                }\n            } else {\n                this.loadMediaPreview(params.url);\n            }\n        }\n    }\n\n    /**\n     * Add new html track element.\n     *\n     * @param {html} element\n     */\n    addTrackComponent(element) {\n        const trackElement = element.closest(Selectors.EMBED.elements.track);\n        const clone = trackElement.cloneNode(true);\n\n        trackElement.querySelector('.removecomponent-wrapper').classList.remove('hidden');\n        trackElement.querySelector('.addcomponent-wrapper').classList.add('hidden');\n        trackElement.parentNode.insertBefore(clone, trackElement.nextSibling);\n    }\n\n    /**\n     * Remove added html track element.\n     *\n     * @param {html} element\n     */\n    removeTrackComponent(element) {\n        const sourceElement = element.closest(Selectors.EMBED.elements.track);\n        sourceElement.remove();\n    }\n\n    /**\n     * Get picker type based on the selected element.\n     *\n     * @param {html} element Selected element\n     * @returns {string}\n     */\n    getFilePickerTypeFromElement = (element) => {\n        if (element.closest(Selectors.EMBED.elements.posterSource)) {\n            return 'image';\n        }\n        if (element.closest(Selectors.EMBED.elements.trackSource)) {\n            return 'subtitle';\n        }\n\n        return 'media';\n    };\n\n    /**\n     * Get captions/subtitles type.\n     *\n     * @param {html} tabPane\n     * @returns {string}\n     */\n    getTrackTypeFromTabPane = (tabPane) => {\n        return tabPane.getAttribute('data-track-kind');\n    };\n\n    /**\n     * Handle click events.\n     *\n     * @param {html} e Selected element\n     */\n    clickHandler = async(e) => {\n        const element = e.target;\n\n        const mediaBrowser = element.closest(Selectors.EMBED.actions.mediaBrowser);\n        if (mediaBrowser) {\n            e.preventDefault();\n            const fpType = this.getFilePickerTypeFromElement(element);\n            const params = await displayFilepicker(this.editor, fpType);\n            this.trackFilePickerCallback(params, element, fpType);\n        }\n\n        const addUrlEle = e.target.closest(Selectors.EMBED.actions.addUrl);\n        if (addUrlEle) {\n            this.urlChanged();\n        }\n\n        const addComponentTrackAction = element.closest(Selectors.EMBED.elements.track + ' .addcomponent');\n        if (addComponentTrackAction) {\n            e.preventDefault();\n            this.addTrackComponent(element);\n        }\n\n        const removeComponentTrackAction = element.closest(Selectors.EMBED.elements.track + ' .removecomponent');\n        if (removeComponentTrackAction) {\n            e.preventDefault();\n            this.removeTrackComponent(element);\n        }\n\n        // Only allow one track per tab to be selected as \"default\".\n        const trackDefaultAction = element.closest(Selectors.EMBED.elements.trackDefault);\n        if (trackDefaultAction && trackDefaultAction.checked) {\n            const getKind = (el) => this.getTrackTypeFromTabPane(el.parentElement.closest('.tab-pane'));\n\n            element.parentElement\n                .closest('.tab-content')\n                .querySelectorAll(Selectors.EMBED.elements.trackDefault)\n                .forEach((select) => {\n                    if (select !== element && getKind(element) === getKind(select)) {\n                        select.checked = false;\n                    }\n                });\n        }\n    };\n\n    /**\n     * Enables or disables the URL-related buttons in the footer based on the current URL and input value.\n     *\n     * @param {html} input Url input field\n     */\n    toggleUrlButton(input) {\n        const url = input.value;\n        const addUrl = this.root.querySelector(Selectors.EMBED.actions.addUrl);\n        addUrl.disabled = !(url !== \"\" && isValidUrl(url));\n    }\n\n    /**\n     * Get media html to be inserted or updated into tiny.\n     *\n     * @param {html} form Selected element\n     * @returns {string} String of html\n     */\n    getMediaHTML = (form) => {\n        let mediumType = this.root.querySelector(Selectors.EMBED.elements.previewClass).nodeName.toLowerCase();\n        mediumType = (mediumType === 'iframe') ? 'link' : mediumType;\n        const tabContent = form.querySelector('.tab-content');\n        const callback = 'getMediaHTML' + mediumType[0].toUpperCase() + mediumType.substr(1);\n        return this[callback](tabContent);\n    };\n\n    /**\n     * Get media as link.\n     *\n     * @returns {string} String of html\n     */\n    getMediaHTMLLink = () => {\n        const details = document.querySelector(Selectors.EMBED.elements.mediaDetailsBody);\n        const url = details.querySelector(Selectors.EMBED.elements.preview).src ?? null;\n        const urlParamString = createUrlParams({\n            controls: details.querySelector(Selectors.EMBED.elements.mediaControl).checked ? 1 : 0,\n            autoplay: details.querySelector(Selectors.EMBED.elements.mediaAutoplay).checked ? 1 : 0,\n            mute: details.querySelector(Selectors.EMBED.elements.mediaMute).checked ? 1 : 0,\n        });\n        const name = details.querySelector(Selectors.EMBED.elements.title).value || false;\n        const context = {\n            url: getLinkBasedUrl(url) + urlParamString,\n            name: name ? name.trim() : false,\n        };\n\n        return context.url ? Templates.renderForPromise('tiny_media/embed/embed_media_link', context) : '';\n    };\n\n    /**\n     * Get media as video.\n     *\n     * @param {html} tab Selected element\n     * @returns {string} String of html.\n     */\n    getMediaHTMLVideo = (tab) => {\n        const details = document.querySelector(Selectors.EMBED.elements.mediaDetailsBody);\n        const context = this.getContextForMediaHTML(tab, details);\n        context.width = details.querySelector(Selectors.EMBED.elements.width).value || false;\n        context.height = details.querySelector(Selectors.EMBED.elements.height).value || false;\n        context.poster = details.querySelector(Selectors.EMBED.elements.videoTag).poster || false;\n        return context.sources ? Templates.renderForPromise('tiny_media/embed/embed_media_video', context) : '';\n    };\n\n    /**\n     * Get media as audio.\n     *\n     * @param {html} tab Selected element\n     * @returns {string} String of html.\n     */\n    getMediaHTMLAudio = (tab) => {\n        const details = document.querySelector(Selectors.EMBED.elements.mediaDetailsBody);\n        const context = this.getContextForMediaHTML(tab, details);\n        return context.sources.length ? Templates.renderForPromise('tiny_media/embed/embed_media_audio', context) : '';\n    };\n\n    /**\n     * Get previewed media data.\n     *\n     * @param {html} tab Selected element\n     * @param {html} details Selected element\n     * @returns {object}\n     */\n    getContextForMediaHTML = (tab, details) => {\n        const tracks = Array.from(tab.querySelectorAll(Selectors.EMBED.elements.track)).map(track => ({\n            track: track.querySelector(Selectors.EMBED.elements.trackSource + ' ' + Selectors.EMBED.elements.url).value,\n            kind: this.getTrackTypeFromTabPane(track.closest('.tab-pane')),\n            label: track.querySelector(Selectors.EMBED.elements.trackLabel).value ||\n                track.querySelector(Selectors.EMBED.elements.trackLang).value,\n            srclang: track.querySelector(Selectors.EMBED.elements.trackLang).value,\n            defaultTrack: track.querySelector(Selectors.EMBED.elements.trackDefault).checked ? \"true\" : null\n        })).filter((track) => !!track.track);\n\n        const sources = details.querySelector(Selectors.EMBED.elements.preview).src ?? null;\n        const title = details.querySelector(Selectors.EMBED.elements.title).value;\n\n        return {\n            sources,\n            description: tab.querySelector(Selectors.EMBED.elements.url).value || false,\n            tracks,\n            showControls: details.querySelector(Selectors.EMBED.elements.mediaControl).checked,\n            autoplay: details.querySelector(Selectors.EMBED.elements.mediaAutoplay).checked,\n            muted: details.querySelector(Selectors.EMBED.elements.mediaMute).checked,\n            loop: details.querySelector(Selectors.EMBED.elements.mediaLoop).checked,\n            title: title !== '' ? title.trim() : false,\n        };\n    };\n\n    /**\n     * Handle the insert/update media in tiny editor.\n     *\n     * @param {event} event\n     * @param {object} modal Object of current modal\n     */\n    handleDialogueSubmission = async(event, modal) => {\n        const {html} = await this.getMediaHTML(modal.getRoot()[0]);\n        if (html) {\n            if (this.isUpdating) {\n                this.selectedMedia.outerHTML = html;\n                this.isUpdating = false;\n            } else {\n                this.editor.insertContent(html);\n            }\n        }\n    };\n\n    registerEventListeners = async(modal) => {\n        await modal.getBody();\n        const $root = modal.getRoot();\n        const root = $root[0];\n        if (this.canShowFilePickerTrack) {\n            root.addEventListener('click', this.clickHandler.bind(this));\n        }\n\n        root.addEventListener('input', (e) => {\n            const urlEle = e.target.closest(Selectors.EMBED.elements.fromUrl);\n            if (urlEle) {\n                this.toggleUrlButton(urlEle);\n            }\n        });\n\n        $root.on(ModalEvents.hidden, () => {\n            this.currentModal.destroy();\n        });\n\n        $root.on(ModalEvents.shown, () => {\n            this.root.querySelectorAll(Selectors.EMBED.elements.trackLang).forEach((dropdown) => {\n                const defaultVal = dropdown.getAttribute('data-value');\n                if (defaultVal) {\n                    dropdown.value = defaultVal;\n                }\n            });\n        });\n\n        $root.on(ModalEvents.save, this.handleDialogueSubmission.bind(this));\n    };\n}\n"],"names":["constructor","data","templateContext","elementid","this","editor","id","bodyTemplate","Selectors","EMBED","template","body","insertMediaBody","footerTemplate","footer","insertMediaFooter","selector","Promise","all","root","then","EmbedInsert","init","catch","error","window","console","log","async","embedPreview","elements","mediaData","currentModal","uploadThumbnailModal","destroy","insertMediaModal","mediaType","loadTemplatePromise","boolAttr","elem","attr","hasAttribute","getAttribute","medium","selectedMedia","urlParams","href","type","title","textContent","trim","param","prop","isTrue","tracks","subtitles","captions","descriptions","chapters","metadata","sources","querySelectorAll","forEach","track","push","src","srclang","label","defaultTrack","source","poster","width","height","autoplay","loop","muted","controls","properties","getMediumProperties","processedProperties","media","link","helpStrings","languages","helpIcons","Array","from","Object","entries","getHelpStrings","_ref","key","text","toLowerCase","assign","getElement","showFilePickerTrack","canShowFilePickerTrack","langsInstalled","installed","langsAvailable","available","isUpdating","_this","getCurrentEmbedData","keys","length","getTemplateContext","url","loadMediaPreview","element","closest","posterSource","trackSource","tabPane","e","target","actions","mediaBrowser","preventDefault","fpType","getFilePickerTypeFromElement","params","trackFilePickerCallback","addUrl","urlChanged","addTrackComponent","removeTrackComponent","trackDefaultAction","trackDefault","checked","getKind","el","getTrackTypeFromTabPane","parentElement","select","form","mediumType","querySelector","previewClass","nodeName","tabContent","toUpperCase","substr","details","document","mediaDetailsBody","preview","urlParamString","mediaControl","mediaAutoplay","mute","mediaMute","name","value","context","Templates","renderForPromise","tab","getContextForMediaHTML","videoTag","map","kind","trackLabel","trackLang","filter","description","showControls","mediaLoop","event","modal","html","getMediaHTML","getRoot","outerHTML","insertContent","getBody","$root","addEventListener","clickHandler","bind","urlEle","fromUrl","toggleUrlButton","on","ModalEvents","hidden","shown","dropdown","defaultVal","save","handleDialogueSubmission","urlWarning","currentUrl","subtitleLang","file","split","slice","langObj","lang","code","trackElement","clone","cloneNode","classList","remove","add","parentNode","insertBefore","nextSibling","input","disabled"],"mappings":"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"}