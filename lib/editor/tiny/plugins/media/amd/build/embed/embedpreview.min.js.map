{"version":3,"file":"embedpreview.min.js","sources":["../../src/embed/embedpreview.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny media plugin embed preview and details class.\n *\n * This handles the embed file/url preview before embedding them into tiny editor.\n *\n * @module      tiny_media/embed/embedpreview\n * @copyright   2024 Stevani Andolo <stevani@hotmail.com.au>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Selectors from '../selectors';\nimport {component} from '../common';\nimport {getString} from 'core/str';\nimport {\n    sourceTypeChecked,\n    getFileName,\n    setPropertiesFromData,\n    showElements,\n    stopMediaLoading,\n    hideElements,\n} from '../helpers';\nimport {EmbedHandler} from './embedhandler';\nimport {MediaBase} from '../mediabase';\nimport Notification from 'core/notification';\nimport EmbedModal from '../embedmodal';\nimport {\n    getEmbeddedMediaDetails,\n    insertMediaThumbnailTemplateContext,\n} from './embedhelpers';\n\nexport class EmbedPreview extends MediaBase {\n\n    selectorType = Selectors.EMBED.type;\n\n    isEmbedPreviewDeleted = false;\n\n    constructor(data) {\n        super();\n        setPropertiesFromData(this, data); // Creates dynamic properties based on \"data\" param.\n    }\n\n    /**\n     * Init the media details preview.\n     */\n    init = async() => {\n        this.currentModal.setTitle(getString('mediadetails', component));\n        sourceTypeChecked({\n            source: this.mediaSource,\n            root: this.root,\n            urlSelector: Selectors.EMBED.elements.fromUrl,\n            fileNameSelector: Selectors.EMBED.elements.fileNameLabel,\n        });\n        this.setMediaSourceAndPoster();\n        this.registerMediaDetailsEventListeners(this.currentModal);\n    };\n\n    /**\n     * Sets media source and thumbnail for the video.\n     */\n    setMediaSourceAndPoster = () => {\n        const box = this.root.querySelector(Selectors.EMBED.elements.previewBox);\n        const preview = this.root.querySelector(Selectors.EMBED.elements.preview);\n        preview.src = this.mediaSource;\n\n        // Let's keep track of the original link.\n        const mediaPreviewTag = this.root.querySelector(Selectors.EMBED.elements.mediaPreviewTag);\n        mediaPreviewTag.setAttribute('data-original-url', this.originalUrl);\n\n        // Getting and setting up media title/name.\n        if (['video', 'audio'].includes(this.mediaType)) {\n            let fileName = getFileName(this.root); // Get original filename.\n            if (this.isUpdating) {\n                if (!this.isEmbedPreviewDeleted) {\n                    fileName = this.mediaTitle; // Title from the selected media.\n                }\n            }\n\n            // Set the media name/title.\n            this.root.querySelector(Selectors.EMBED.elements.title).value = fileName;\n        }\n\n        // Handle error when loading the media.\n        preview.addEventListener('error', async() => {\n            // Show warning notification.\n            const urlWarningLabelEle = this.root.querySelector(Selectors.EMBED.elements.urlWarning);\n            urlWarningLabelEle.innerHTML = await getString('medianotavailabledesc', component, this.mediaSource);\n            showElements(Selectors.EMBED.elements.urlWarning, this.root);\n\n            // Stop the spinner.\n            stopMediaLoading(this.root, Selectors.EMBED.type);\n\n            // Reset the upload form.\n            (new EmbedHandler(this)).resetUploadForm();\n            return;\n        });\n\n        if (this.mediaType === 'video') {\n            if (mediaPreviewTag) { // Check if video html exists.\n                if (this.media.poster) {\n                    mediaPreviewTag.poster = this.media.poster;\n                }\n\n                // Handle media metadata loading event.\n                mediaPreviewTag.addEventListener('loadedmetadata', () => {\n                    // Stop the loader and display back the body template when the media is loaded.\n                    this.showBodyTemplate();\n\n                    const videoHeight = mediaPreviewTag.videoHeight;\n                    const videoWidth = mediaPreviewTag.videoWidth;\n                    const widthProportion = (videoWidth - videoHeight);\n                    const isLandscape = widthProportion > 0;\n\n                    // Store dimensions of the raw video.\n                    this.mediaDimensions = {\n                        width: videoWidth,\n                        height: videoHeight,\n                    };\n\n                    // Set the media preview based on the media dimensions.\n                    if (isLandscape) {\n                        mediaPreviewTag.width = box.offsetWidth;\n                    } else {\n                        mediaPreviewTag.height = box.offsetHeight;\n                    }\n\n                    const height = this.root.querySelector(Selectors.EMBED.elements.height);\n                    const width = this.root.querySelector(Selectors.EMBED.elements.width);\n\n                    if (height.value === '' && width.value === '') {\n                        height.value = videoHeight;\n                        width.value = videoWidth;\n                    }\n\n                    // Size checking and adjustment.\n                    if (videoHeight === parseInt(height.value) && videoWidth === parseInt(width.value)) {\n                        this.currentWidth = this.mediaDimensions.width;\n                        this.currentHeight = this.mediaDimensions.height;\n                        this.sizeChecked('original');\n                    } else {\n                        this.currentWidth = parseInt(width.value);\n                        this.currentHeight = parseInt(height.value);\n                        this.sizeChecked('custom');\n                    }\n                });\n\n                // Load the video html tag to load the media.\n                mediaPreviewTag.load();\n            }\n        } else if (this.mediaType === 'audio') {\n            if (mediaPreviewTag) { // Check if audio html exists.\n\n                // Handle media metadata loading event.\n                mediaPreviewTag.addEventListener('loadedmetadata', () => {\n                    // Stop the loader and display back the body template when the media is loaded.\n                    this.showBodyTemplate();\n                });\n\n                mediaPreviewTag.load();\n            }\n        } else {\n            // Stop the loader and display back the body template when the media is loaded.\n            this.showBodyTemplate();\n\n            if (this.media.poster) {\n                mediaPreviewTag.setAttribute('data-poster', this.media.poster);\n            }\n\n            // Store dimensions of the raw video.\n            this.mediaDimensions = {\n                width: null,\n                height: null,\n            };\n\n            const height = this.root.querySelector(Selectors.EMBED.elements.height);\n            const width = this.root.querySelector(Selectors.EMBED.elements.width);\n            if (height && width) {\n                if (height.value === '' && width.value === '') {\n                    this.currentWidth = this.mediaDimensions.width;\n                    this.currentHeight = this.mediaDimensions.height;\n                    this.sizeChecked('original');\n                } else {\n                    this.currentWidth = parseInt(width.value);\n                    this.currentHeight = parseInt(height.value);\n                    this.sizeChecked('custom');\n                }\n            }\n\n            // Set iframe width/height = box width/height.\n            preview.width = box.offsetWidth;\n            preview.height = box.offsetHeight;\n        }\n    };\n\n    /**\n     * Stop the loader and display back the body template.\n     */\n    showBodyTemplate = () => {\n        stopMediaLoading(this.root, Selectors.EMBED.type);\n        showElements(Selectors.EMBED.elements.mediaDetailsBody, this.root);\n    };\n\n    /**\n     * Deletes the media after confirming with the user and loads the insert media page.\n     */\n    deleteMedia = () => {\n        Notification.deleteCancelPromise(\n            getString('deletemedia', component),\n            getString('deletemediawarning', component),\n        ).then(() => {\n            // Marked the preview was deleted.\n            this.isEmbedPreviewDeleted = true;\n\n            // Reset media upload form.\n            (new EmbedHandler(this)).resetUploadForm();\n\n            // Delete any selected media mediaData.\n            delete this.mediaData;\n            return;\n        }).catch(error => {\n            window.console.log(error);\n        });\n    };\n\n    /**\n     * Delete embedded media thumbnail.\n     */\n    deleteEmbeddedThumbnail = () => {\n        Notification.deleteCancelPromise(\n            getString('deleteembeddedthumbnail', component),\n            getString('deleteembeddedthumbnailwarning', component),\n        ).then(async() => {\n            const mediaPreviewTag = this.root.querySelector(Selectors.EMBED.elements.mediaPreviewTag);\n            if (this.mediaType === 'link') {\n                mediaPreviewTag.removeAttribute('data-poster');\n            } else {\n                mediaPreviewTag.removeAttribute('poster');\n            }\n\n            const deleteCustomThumbnail = this.root.querySelector(Selectors.EMBED.actions.deleteCustomThumbnail);\n            deleteCustomThumbnail.remove();\n\n            const uploadCustomThumbnail = this.root.querySelector(Selectors.EMBED.actions.uploadCustomThumbnail);\n            uploadCustomThumbnail.textContent = await getString('uploadthumbnail', component);\n            return;\n        }).catch(error => {\n            window.console.log(error);\n        });\n    };\n\n    /**\n     * Shows the insert thumbnail dialogue.\n     */\n    showUploadThumbnail = async() => {\n        const uploadThumbnailModal = await EmbedModal.create({\n            large: true,\n            templateContext: {elementid: this.editor.getElement().id},\n        });\n        const root = uploadThumbnailModal.getRoot()[0];\n\n        // Get selected media metadata.\n        const mediaData = getEmbeddedMediaDetails(this);\n        mediaData.isUpdating = this.isUpdating;\n\n        const embedHandler = new EmbedHandler(this);\n        embedHandler.loadInsertThumbnailTemplatePromise(\n            insertMediaThumbnailTemplateContext(this), // Get template context for creating media thumbnail.\n            {root, uploadThumbnailModal}, // Required root elements.\n            await embedHandler.getMediaTemplateContext(mediaData) // Get current media data.\n        );\n    };\n\n    /**\n     * Only registers event listeners for new loaded elements in embed preview modal.\n     */\n    registerMediaDetailsEventListeners = async() => {\n        // Handle media autoplay and mute.\n        const autoPlay = this.root.querySelector(Selectors.EMBED.elements.mediaAutoplay);\n        const mute = this.root.querySelector(Selectors.EMBED.elements.mediaMute);\n        if (autoPlay && mute && this.mediaType === 'link') {\n            autoPlay.addEventListener('change', () => {\n                if (autoPlay.checked) {\n                    mute.checked = true;\n                }\n            });\n\n            mute.addEventListener('change', () => {\n                if (autoPlay.checked && !mute.checked) {\n                    autoPlay.checked = false;\n                }\n            });\n        }\n\n        // Handle the original size when selected.\n        const sizeOriginalEle = this.root.querySelector(Selectors.EMBED.elements.sizeOriginal);\n        if (sizeOriginalEle) {\n            sizeOriginalEle.addEventListener('change', () => {\n                this.sizeChecked('original');\n            });\n        }\n\n        // Handle the custom size when selected.\n        const sizeCustomEle = this.root.querySelector(Selectors.EMBED.elements.sizeCustom);\n        if (sizeCustomEle) {\n            sizeCustomEle.addEventListener('change', () => {\n                this.sizeChecked('custom');\n            });\n        }\n\n        // Handle the custom with size when inputted.\n        const widthEle = this.root.querySelector(Selectors.EMBED.elements.width);\n        if (widthEle) {\n            widthEle.addEventListener('input', () => {\n                // Avoid empty value.\n                widthEle.value = widthEle.value === \"\" ? 0 : Number(widthEle.value);\n                this.autoAdjustSize();\n            });\n        }\n\n        // Handle the custom height size when inputted.\n        const heightEle = this.root.querySelector(Selectors.EMBED.elements.height);\n        if (heightEle) {\n            heightEle.addEventListener('input', () => {\n                // Avoid empty value.\n                heightEle.value = heightEle.value === \"\" ? 0 : Number(heightEle.value);\n                this.autoAdjustSize(true);\n            });\n        }\n\n        // Handle media preview delete.\n        const deleteMedia = this.root.querySelector(Selectors.EMBED.actions.deleteMedia);\n        if (deleteMedia) {\n            deleteMedia.addEventListener('click', (e) => {\n                e.preventDefault();\n                this.deleteMedia();\n            });\n        }\n\n        // Show subtitles and captions settings.\n        const showSubtitleCaption = this.root.querySelector(Selectors.EMBED.actions.showSubtitleCaption);\n        if (showSubtitleCaption) {\n            showSubtitleCaption.addEventListener('click', (e) => {\n                e.preventDefault();\n                hideElements([\n                    Selectors.EMBED.actions.showSubtitleCaption,\n                    Selectors.EMBED.actions.cancelMediaDetails,\n                    Selectors.EMBED.elements.mediaDetailsBody,\n                ], this.root);\n                showElements([\n                    Selectors.EMBED.actions.backToMediaDetails,\n                    Selectors.EMBED.elements.mediaSubtitleCaptionBody,\n                ], this.root);\n            });\n        }\n\n        // Back to media preview.\n        const backToMediaDetails = this.root.querySelector(Selectors.EMBED.actions.backToMediaDetails);\n        if (backToMediaDetails) {\n            backToMediaDetails.addEventListener('click', () => {\n                hideElements([\n                    Selectors.EMBED.actions.backToMediaDetails,\n                    Selectors.EMBED.elements.mediaSubtitleCaptionBody,\n                ], this.root);\n                showElements([\n                    Selectors.EMBED.actions.showSubtitleCaption,\n                    Selectors.EMBED.actions.cancelMediaDetails,\n                    Selectors.EMBED.elements.mediaDetailsBody,\n                ], this.root);\n            });\n        }\n\n        const uploadCustomThumbnail = this.root.querySelector(Selectors.EMBED.actions.uploadCustomThumbnail);\n        if (uploadCustomThumbnail) {\n            uploadCustomThumbnail.addEventListener('click', () => {\n                this.showUploadThumbnail();\n            });\n        }\n\n        const deleteCustomThumbnail = this.root.querySelector(Selectors.EMBED.actions.deleteCustomThumbnail);\n        if (deleteCustomThumbnail) {\n            deleteCustomThumbnail.addEventListener('click', () => {\n                this.deleteEmbeddedThumbnail();\n            });\n        }\n\n        const mediaLinkEmbedType = this.root.querySelector(Selectors.EMBED.elements.mediaLinkEmbedType);\n        if (mediaLinkEmbedType) {\n            mediaLinkEmbedType.addEventListener('change', () => {\n                const mediaType = mediaLinkEmbedType.value;\n                this.mediaTagType = mediaType;\n                if (mediaType === 'audio') {\n                    hideElements([\n                        Selectors.EMBED.elements.mediaSizeProperties,\n                        Selectors.EMBED.elements.videoThumbnail,\n                        Selectors.EMBED.actions.showSubtitleCaption,\n                    ], this.root);\n                } else {\n                    showElements([\n                        Selectors.EMBED.elements.mediaSizeProperties,\n                        Selectors.EMBED.elements.videoThumbnail,\n                        Selectors.EMBED.actions.showSubtitleCaption,\n                    ], this.root);\n                }\n            });\n        }\n    };\n}\n"],"names":["EmbedPreview","MediaBase","constructor","data","Selectors","EMBED","type","async","currentModal","setTitle","component","source","this","mediaSource","root","urlSelector","elements","fromUrl","fileNameSelector","fileNameLabel","setMediaSourceAndPoster","registerMediaDetailsEventListeners","box","querySelector","previewBox","preview","src","mediaPreviewTag","setAttribute","originalUrl","includes","mediaType","fileName","isUpdating","isEmbedPreviewDeleted","mediaTitle","title","value","addEventListener","urlWarning","innerHTML","EmbedHandler","resetUploadForm","media","poster","showBodyTemplate","videoHeight","videoWidth","isLandscape","mediaDimensions","width","height","offsetWidth","offsetHeight","parseInt","currentWidth","currentHeight","sizeChecked","load","mediaDetailsBody","deleteCancelPromise","then","mediaData","catch","error","window","console","log","removeAttribute","actions","deleteCustomThumbnail","remove","uploadCustomThumbnail","textContent","uploadThumbnailModal","EmbedModal","create","large","templateContext","elementid","editor","getElement","id","getRoot","embedHandler","loadInsertThumbnailTemplatePromise","getMediaTemplateContext","autoPlay","mediaAutoplay","mute","mediaMute","checked","sizeOriginalEle","sizeOriginal","sizeCustomEle","sizeCustom","widthEle","Number","autoAdjustSize","heightEle","deleteMedia","e","preventDefault","showSubtitleCaption","cancelMediaDetails","backToMediaDetails","mediaSubtitleCaptionBody","showUploadThumbnail","deleteEmbeddedThumbnail","mediaLinkEmbedType","mediaTagType","mediaSizeProperties","videoThumbnail"],"mappings":"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"}