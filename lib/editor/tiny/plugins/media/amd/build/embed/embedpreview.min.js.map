{"version":3,"file":"embedpreview.min.js","sources":["../../src/embed/embedpreview.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny media plugin embed preview and details class.\n *\n * This handles the embed file/url preview before embedding them into tiny editor.\n *\n * @module      tiny_media/embed/embedpreview\n * @copyright   2024 Stevani Andolo <stevani@hotmail.com.au>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {alert} from 'core/notification';\nimport Selectors from '../selectors';\nimport {component} from '../common';\nimport {getString} from 'core/str';\nimport {\n    sourceTypeChecked,\n    getFileName,\n    setPropertiesFromData,\n    showElements,\n    stopMediaLoading,\n} from '../helpers';\nimport {EmbedHandler} from './embedhandler';\nimport {MediaBase} from '../mediabase';\n\nexport class EmbedPreview extends MediaBase {\n\n    selectorType = 'EMBED';\n\n    isEmbedPreviewDeleted = false;\n\n    constructor(data) {\n        super();\n        setPropertiesFromData(this, data); // Creates dynamic properties based on \"data\" param.\n    }\n\n    /**\n     * Init the media details preview.\n     */\n    init = async() => {\n        this.currentModal.setTitle(getString('mediadetails', component));\n        sourceTypeChecked({\n            source: this.mediaSource,\n            root: this.root,\n            urlSelector: Selectors.EMBED.elements.fromUrl,\n            fileNameSelector: Selectors.EMBED.elements.fileNameLabel,\n        });\n        this.setMediaSourceAndPoster();\n        this.registerMediaDetailsEventListeners(this.currentModal);\n    };\n\n    /**\n     * Sets media source and thumbnail for the video.\n     */\n    setMediaSourceAndPoster = () => {\n        const box = this.root.querySelector(Selectors.EMBED.elements.previewBox);\n        const preview = this.root.querySelector(Selectors.EMBED.elements.preview);\n        preview.src = this.mediaSource;\n        preview.innerHTML = this.mediaSource;\n\n        // Getting and setting up media title/name.\n        if (['video', 'audio'].includes(this.mediaType)) {\n            let fileName = getFileName(this.root); // Get original filename.\n            if (this.isUpdating) {\n                if (!this.isEmbedPreviewDeleted) {\n                    fileName = this.mediaTitle; // Title from the selected media.\n                }\n            }\n\n            // Set the media name/title.\n            this.root.querySelector(Selectors.EMBED.elements.title).value = fileName;\n        }\n\n        // Handle error when loading the media.\n        preview.addEventListener('error', async() => {\n            alert(\n                await getString('medianotavailable', component),\n                await getString('medianotavailabledesc', component, this.mediaSource)\n            );\n\n            // Stop the loader and display back the body template when failed to load the media.\n            this.showBodyTemplate();\n\n            (new EmbedHandler(this)).resetUploadForm();\n            return;\n        });\n\n        if (this.mediaType === 'video') {\n            let videoHeight = null;\n            let videoWidth = null;\n            const videoTag = document.querySelector(Selectors.EMBED.elements.videoTag);\n\n            if (this.thumbnail) {\n                videoTag.poster = this.thumbnail;\n            }\n\n            // Load the video html tag to load the media.\n            videoTag.load();\n\n            // Handle media metadata loading event.\n            videoTag.addEventListener('loadedmetadata', () => {\n                // Stop the loader and display back the body template when the media is loaded.\n                this.showBodyTemplate();\n\n                videoHeight = videoTag.videoHeight;\n                videoWidth = videoTag.videoWidth;\n                const widthProportion = (videoWidth - videoHeight);\n                const isLandscape = widthProportion > 0;\n\n                // Store dimensions of the raw video.\n                this.mediaDimensions = {\n                    width: videoWidth,\n                    height: videoHeight,\n                };\n\n                // Set the media preview based on the media dimensions.\n                if (isLandscape) {\n                    videoTag.width = box.offsetWidth;\n                } else {\n                    videoTag.height = box.offsetHeight;\n                }\n            });\n\n            // Handle media canplay event.\n            videoTag.addEventListener('canplay', () => {\n                const height = this.root.querySelector(Selectors.EMBED.elements.height);\n                const width = this.root.querySelector(Selectors.EMBED.elements.width);\n\n                if (height.value === '' && width.value === '') {\n                    height.value = videoHeight;\n                    width.value = videoWidth;\n                }\n\n                // Size checking and adjustment.\n                if (videoHeight === parseInt(height.value) && videoWidth === parseInt(width.value)) {\n                    this.currentWidth = this.mediaDimensions.width;\n                    this.currentHeight = this.mediaDimensions.height;\n                    this.sizeChecked('original');\n                } else {\n                    this.currentWidth = parseInt(width.value);\n                    this.currentHeight = parseInt(height.value);\n                    this.sizeChecked('custom');\n                }\n            });\n        } else if (this.mediaType === 'audio') {\n            const audioTag = this.root.querySelector(Selectors.EMBED.elements.audioTag);\n            audioTag.load();\n\n            // Handle media metadata loading event.\n            audioTag.addEventListener('loadedmetadata', () => {\n                // Stop the loader and display back the body template when the media is loaded.\n                this.showBodyTemplate();\n            });\n        } else {\n            // Stop the loader and display back the body template when the media is loaded.\n            this.showBodyTemplate();\n\n            // Set iframe width/height = box width/height.\n            preview.width = box.offsetWidth;\n            preview.height = box.offsetHeight;\n        }\n    };\n\n    /**\n     * Stop the loader and display back the body template.\n     */\n    showBodyTemplate = () => {\n        stopMediaLoading(this.root, 'EMBED');\n        showElements(Selectors.EMBED.elements.bodyTemplate, this.root);\n    };\n\n    /**\n     * Only registers event listeners for new loaded elements in embed preview modal.\n     */\n    registerMediaDetailsEventListeners = async() => {\n        // Handle media autoplay and mute.\n        const autoPlay = this.root.querySelector(Selectors.EMBED.elements.mediaAutoplay);\n        const mute = this.root.querySelector(Selectors.EMBED.elements.mediaMute);\n        if (autoPlay && mute && this.mediaType === 'link') {\n            autoPlay.addEventListener('change', () => {\n                if (autoPlay.checked) {\n                    mute.checked = true;\n                }\n            });\n\n            mute.addEventListener('change', () => {\n                if (autoPlay.checked && !mute.checked) {\n                    autoPlay.checked = false;\n                }\n            });\n        }\n\n        // Handle the original size when selected.\n        const sizeOriginalEle = this.root.querySelector(Selectors.EMBED.elements.sizeOriginal);\n        if (sizeOriginalEle) {\n            sizeOriginalEle.addEventListener('change', () => {\n                this.sizeChecked('original');\n            });\n        }\n\n        // Handle the custom size when selected.\n        const sizeCustomEle = this.root.querySelector(Selectors.EMBED.elements.sizeCustom);\n        if (sizeCustomEle) {\n            sizeCustomEle.addEventListener('change', () => {\n                this.sizeChecked('custom');\n            });\n        }\n\n        // Handle the custom with size when inputted.\n        const widthEle = this.root.querySelector(Selectors.EMBED.elements.width);\n        if (widthEle) {\n            widthEle.addEventListener('input', () => {\n                // Avoid empty value.\n                widthEle.value = widthEle.value === \"\" ? 0 : Number(widthEle.value);\n                this.autoAdjustSize();\n            });\n        }\n\n        // Handle the custom height size when inputted.\n        const heightEle = this.root.querySelector(Selectors.EMBED.elements.height);\n        if (heightEle) {\n            heightEle.addEventListener('input', () => {\n                // Avoid empty value.\n                heightEle.value = heightEle.value === \"\" ? 0 : Number(heightEle.value);\n                this.autoAdjustSize(true);\n            });\n        }\n    };\n}\n"],"names":["EmbedPreview","MediaBase","constructor","data","async","currentModal","setTitle","component","source","this","mediaSource","root","urlSelector","Selectors","EMBED","elements","fromUrl","fileNameSelector","fileNameLabel","setMediaSourceAndPoster","registerMediaDetailsEventListeners","box","querySelector","previewBox","preview","src","innerHTML","includes","mediaType","fileName","isUpdating","isEmbedPreviewDeleted","mediaTitle","title","value","addEventListener","showBodyTemplate","EmbedHandler","resetUploadForm","videoHeight","videoWidth","videoTag","document","thumbnail","poster","load","isLandscape","mediaDimensions","width","height","offsetWidth","offsetHeight","parseInt","currentWidth","currentHeight","sizeChecked","audioTag","bodyTemplate","autoPlay","mediaAutoplay","mute","mediaMute","checked","sizeOriginalEle","sizeOriginal","sizeCustomEle","sizeCustom","widthEle","Number","autoAdjustSize","heightEle"],"mappings":"2jBAuCaA,qBAAqBC,qBAM9BC,YAAYC,kDAJG,uDAES,gCAUjBC,eACEC,aAAaC,UAAS,kBAAU,eAAgBC,mDACnC,CACdC,OAAQC,KAAKC,YACbC,KAAMF,KAAKE,KACXC,YAAaC,mBAAUC,MAAMC,SAASC,QACtCC,iBAAkBJ,mBAAUC,MAAMC,SAASG,qBAE1CC,+BACAC,mCAAmCX,KAAKJ,iEAMvB,WAChBgB,IAAMZ,KAAKE,KAAKW,cAAcT,mBAAUC,MAAMC,SAASQ,YACvDC,QAAUf,KAAKE,KAAKW,cAAcT,mBAAUC,MAAMC,SAASS,YACjEA,QAAQC,IAAMhB,KAAKC,YACnBc,QAAQE,UAAYjB,KAAKC,YAGrB,CAAC,QAAS,SAASiB,SAASlB,KAAKmB,WAAY,KACzCC,UAAW,wBAAYpB,KAAKE,MAC5BF,KAAKqB,aACArB,KAAKsB,wBACNF,SAAWpB,KAAKuB,kBAKnBrB,KAAKW,cAAcT,mBAAUC,MAAMC,SAASkB,OAAOC,MAAQL,YAIpEL,QAAQW,iBAAiB,SAAS/B,wCAEpB,kBAAU,oBAAqBG,yBAC/B,kBAAU,wBAAyBA,kBAAWE,KAAKC,mBAIxD0B,uBAEAC,2BAAa5B,MAAO6B,qBAIN,UAAnB7B,KAAKmB,UAAuB,KACxBW,YAAc,KACdC,WAAa,WACXC,SAAWC,SAASpB,cAAcT,mBAAUC,MAAMC,SAAS0B,UAE7DhC,KAAKkC,YACLF,SAASG,OAASnC,KAAKkC,WAI3BF,SAASI,OAGTJ,SAASN,iBAAiB,kBAAkB,UAEnCC,mBAELG,YAAcE,SAASF,YACvBC,WAAaC,SAASD,iBAEhBM,YADmBN,WAAaD,YACA,OAGjCQ,gBAAkB,CACnBC,MAAOR,WACPS,OAAQV,aAIRO,YACAL,SAASO,MAAQ3B,IAAI6B,YAErBT,SAASQ,OAAS5B,IAAI8B,gBAK9BV,SAASN,iBAAiB,WAAW,WAC3Bc,OAASxC,KAAKE,KAAKW,cAAcT,mBAAUC,MAAMC,SAASkC,QAC1DD,MAAQvC,KAAKE,KAAKW,cAAcT,mBAAUC,MAAMC,SAASiC,OAE1C,KAAjBC,OAAOf,OAAgC,KAAhBc,MAAMd,QAC7Be,OAAOf,MAAQK,YACfS,MAAMd,MAAQM,YAIdD,cAAgBa,SAASH,OAAOf,QAAUM,aAAeY,SAASJ,MAAMd,aACnEmB,aAAe5C,KAAKsC,gBAAgBC,WACpCM,cAAgB7C,KAAKsC,gBAAgBE,YACrCM,YAAY,mBAEZF,aAAeD,SAASJ,MAAMd,YAC9BoB,cAAgBF,SAASH,OAAOf,YAChCqB,YAAY,mBAGtB,GAAuB,UAAnB9C,KAAKmB,UAAuB,OAC7B4B,SAAW/C,KAAKE,KAAKW,cAAcT,mBAAUC,MAAMC,SAASyC,UAClEA,SAASX,OAGTW,SAASrB,iBAAiB,kBAAkB,UAEnCC,gCAIJA,mBAGLZ,QAAQwB,MAAQ3B,IAAI6B,YACpB1B,QAAQyB,OAAS5B,IAAI8B,yDAOV,mCACE1C,KAAKE,KAAM,mCACfE,mBAAUC,MAAMC,SAAS0C,aAAchD,KAAKE,oEAMxBP,gBAE3BsD,SAAWjD,KAAKE,KAAKW,cAAcT,mBAAUC,MAAMC,SAAS4C,eAC5DC,KAAOnD,KAAKE,KAAKW,cAAcT,mBAAUC,MAAMC,SAAS8C,WAC1DH,UAAYE,MAA2B,SAAnBnD,KAAKmB,YACzB8B,SAASvB,iBAAiB,UAAU,KAC5BuB,SAASI,UACTF,KAAKE,SAAU,MAIvBF,KAAKzB,iBAAiB,UAAU,KACxBuB,SAASI,UAAYF,KAAKE,UAC1BJ,SAASI,SAAU,aAMzBC,gBAAkBtD,KAAKE,KAAKW,cAAcT,mBAAUC,MAAMC,SAASiD,cACrED,iBACAA,gBAAgB5B,iBAAiB,UAAU,UAClCoB,YAAY,qBAKnBU,cAAgBxD,KAAKE,KAAKW,cAAcT,mBAAUC,MAAMC,SAASmD,YACnED,eACAA,cAAc9B,iBAAiB,UAAU,UAChCoB,YAAY,mBAKnBY,SAAW1D,KAAKE,KAAKW,cAAcT,mBAAUC,MAAMC,SAASiC,OAC9DmB,UACAA,SAAShC,iBAAiB,SAAS,KAE/BgC,SAASjC,MAA2B,KAAnBiC,SAASjC,MAAe,EAAIkC,OAAOD,SAASjC,YACxDmC,0BAKPC,UAAY7D,KAAKE,KAAKW,cAAcT,mBAAUC,MAAMC,SAASkC,QAC/DqB,WACAA,UAAUnC,iBAAiB,SAAS,KAEhCmC,UAAUpC,MAA4B,KAApBoC,UAAUpC,MAAe,EAAIkC,OAAOE,UAAUpC,YAC3DmC,gBAAe,4CA/LN5D,KAAMN"}