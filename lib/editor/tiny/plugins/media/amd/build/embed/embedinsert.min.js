define("tiny_media/embed/embedinsert",["exports","core/prefetch","core/str","../common","../helpers","../selectors","core/dropzone"],(function(_exports,_prefetch,_str,_common,_helpers,_selectors,_dropzone){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.EmbedInsert=void 0,_selectors=_interopRequireDefault(_selectors),_dropzone=_interopRequireDefault(_dropzone),(0,_prefetch.prefetchStrings)("tiny_media",["insertmedia","addmediafilesdrop"]);_exports.EmbedInsert=class{constructor(data){_defineProperty(this,"init",(async()=>{const langStringKeys=["insertmedia","addmediafilesdrop"],langStringValues=await(0,_str.getStrings)([...langStringKeys].map((key=>({key:key,component:_common.component}))));if(this.langStrings=Object.fromEntries(langStringKeys.map(((key,index)=>[key,langStringValues[index]]))),this.currentModal.setTitle(this.langStrings.insertmedia),this.canShowDropZone&&!this.mediaType){const dropZoneEle=document.querySelector(_selectors.default.EMBED.elements.dropzoneContainer),dropZone=new _dropzone.default(dropZoneEle,"audio/*,video/*",(files=>{this.handleUploadedFile(files)}));dropZone.setLabel(this.langStrings.addmediafilesdrop),dropZone.init()}})),_defineProperty(this,"handleUploadedFile",(files=>{window.console.log(files)})),(0,_helpers.setPropertiesFromData)(this,data)}}}));

//# sourceMappingURL=embedinsert.min.js.map