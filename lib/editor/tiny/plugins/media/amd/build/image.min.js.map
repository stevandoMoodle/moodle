{"version":3,"file":"image.min.js","sources":["../src/image.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Media plugin Image class for Moodle.\n *\n * @module      tiny_media/image\n * @copyright   2022 Huong Nguyen <huongnv13@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\nimport * as Modal from 'core/modal_factory';\nimport * as ModalEvents from 'core/modal_events';\nimport {displayFilepicker} from 'editor_tiny/utils';\n\nexport const MediaImage = class {\n\n    CSS = {\n        FORM: 'form.tiny_image_form',\n        RESPONSIVE: 'img-fluid',\n        INPUTALIGNMENT: 'tiny_image_alignment',\n        INPUTALT: 'tiny_image_altentry',\n        INPUTHEIGHT: 'tiny_image_heightentry',\n        INPUTSUBMIT: 'tiny_image_urlentrysubmit',\n        INPUTURL: 'tiny_image_urlentry',\n        INPUTSIZE: 'tiny_image_size',\n        INPUTWIDTH: 'tiny_image_widthentry',\n        IMAGEALTWARNING: 'tiny_image_altwarning',\n        IMAGEURLWARNING: 'tiny_image_urlwarning',\n        IMAGEBROWSER: 'openimagebrowser',\n        IMAGEPRESENTATION: 'tiny_image_presentation',\n        INPUTCONSTRAIN: 'tiny_image_constrain',\n        INPUTCUSTOMSTYLE: 'tiny_image_customstyle',\n        IMAGEPREVIEW: 'tiny_image_preview',\n        IMAGEPREVIEWBOX: 'tiny_image_preview_box',\n        ALIGNSETTINGS: 'tiny_image_button'\n    };\n\n    FORMNAMES = {\n        URL: 'urlentry',\n        ALT: 'altentry'\n    };\n\n    REGEX = {\n        ISPERCENT: /\\d+%/\n    };\n\n    DEFAULTS = {\n        WIDTH: 160,\n        HEIGHT: 160,\n    };\n\n    ALIGNMENTS = [\n        // Vertical alignment.\n        {\n            name: 'verticalAlign',\n            str: 'alignment_top',\n            value: 'text-top',\n            margin: '0 0.5em'\n        },\n        {\n            name: 'verticalAlign',\n            str: 'alignment_middle',\n            value: 'middle',\n            margin: '0 0.5em'\n        },\n        {\n            name: 'verticalAlign',\n            str: 'alignment_bottom',\n            value: 'text-bottom',\n            margin: '0 0.5em',\n            isDefault: true\n        },\n\n        // Floats.\n        {\n            name: 'float',\n            str: 'alignment_left',\n            value: 'left',\n            margin: '0 0.5em 0 0'\n        },\n        {\n            name: 'float',\n            str: 'alignment_right',\n            value: 'right',\n            margin: '0 0 0 0.5em'\n        }\n    ];\n\n    form = null;\n    rawImageDimensions = null;\n    canShowFilePicker = true;\n    editor = null;\n    currentModal = null;\n    selectedImage = null;\n\n    constructor(editor) {\n        this.editor = editor;\n    }\n\n    displayDialogue() {\n        // Reset the image dimensions.\n        this.rawImageDimensions = null;\n\n        Modal.create({\n            type: Modal.types.DEFAULT,\n            title: getString('imageproperties', 'tiny_media'),\n            body: Templates.render('tiny_media/insert_image', {\n                elementid: this.editor.getElement().id,\n                CSS: this.CSS,\n                FORMNAMES: this.FORMNAMES,\n                showfilepicker: this.canShowFilePicker\n            })\n        }).then(modal => {\n            this.currentModal = modal;\n            modal.getRoot().on(ModalEvents.bodyRendered, () => {\n                this.form = document.querySelector(this.CSS.FORM);\n                // Configure the view of the current image.\n                this.applyImageProperties();\n                this.registerEventListeners();\n            });\n            modal.getRoot().on(ModalEvents.hidden, () => {\n                modal.destroy();\n            });\n            modal.show();\n            return modal;\n        });\n    }\n\n    filePickerCallback(params, self) {\n        if (params.url !== '') {\n            const input = self.form.querySelector('.' + self.CSS.INPUTURL);\n            input.value = params.url;\n\n            // Auto set the width and height.\n            self.form.querySelector('.' + self.CSS.INPUTWIDTH).value = '';\n            self.form.querySelector('.' + self.CSS.INPUTHEIGHT).value = '';\n\n            // Load the preview image.\n            self.loadPreviewImage(params.url);\n        }\n    }\n\n    loadPreviewImage(url) {\n        const image = new Image();\n\n        image.onerror = () => {\n            const preview = this.form.querySelector('.' + CSS.IMAGEPREVIEW);\n            preview.style.display = 'none';\n        };\n\n        image.onload = () => {\n            let input, currentWidth, currentHeight, widthRatio, heightRatio;\n\n            // Store dimensions of the raw image, falling back to defaults for images without dimensions (e.g. SVG).\n            this.rawImageDimensions = {\n                width: image.width || this.DEFAULTS.WIDTH,\n                height: image.height || this.DEFAULTS.HEIGHT,\n            };\n\n            input = this.form.querySelector('.' + this.CSS.INPUTWIDTH);\n            currentWidth = input.value;\n            if (currentWidth === '') {\n                input.value = this.rawImageDimensions.width;\n                currentWidth = \"\" + this.rawImageDimensions.width;\n            }\n\n            input = this.form.querySelector('.' + this.CSS.INPUTHEIGHT);\n            currentHeight = input.value;\n            if (currentHeight === '') {\n                input.value = this.rawImageDimensions.height;\n                currentHeight = \"\" + this.rawImageDimensions.height;\n            }\n\n            input = this.form.querySelector('.' + this.CSS.IMAGEPREVIEW);\n            input.setAttribute('src', image.src);\n            input.style.display = 'inline';\n\n            input = this.form.querySelector('.' + this.CSS.INPUTCONSTRAIN);\n            if (currentWidth.match(this.REGEX.ISPERCENT) && currentHeight.match(this.REGEX.ISPERCENT)) {\n                input.checked = currentWidth === currentHeight;\n            } else if (image.width === 0 || image.height === 0) {\n                // If we don't have both dimensions of the image, we can't auto-size it, so disable control.\n                input.disabled = 'disabled';\n            } else {\n                // This is the same as comparing to 3 decimal places.\n                widthRatio = Math.round(1000 * parseInt(currentWidth, 10) / image.width);\n                heightRatio = Math.round(1000 * parseInt(currentHeight, 10) / image.height);\n                input.checked = widthRatio === heightRatio;\n            }\n        };\n\n        image.src = url;\n    }\n\n    urlChanged() {\n        const input = this.form.querySelector('.' + this.CSS.INPUTURL);\n\n        if (input.value !== '') {\n            // Load the preview image.\n            this.loadPreviewImage(input.value);\n        }\n    }\n\n    hasErrorUrlField() {\n        const url = this.form.querySelector('.' + this.CSS.INPUTURL).value;\n        const urlError = url === '';\n        this.toggleVisibility('.' + this.CSS.IMAGEURLWARNING, urlError);\n        this.toggleAriaInvalid(['.' + this.CSS.INPUTURL], urlError);\n\n        return urlError;\n    }\n\n    hasErrorAltField() {\n        const alt = this.form.querySelector('.' + this.CSS.INPUTALT).value;\n        const presentation = this.form.querySelector('.' + this.CSS.IMAGEPRESENTATION).checked;\n        const imageAltError = alt === '' && !presentation;\n        this.toggleVisibility('.' + this.CSS.IMAGEALTWARNING, imageAltError);\n        this.toggleAriaInvalid(['.' + this.CSS.INPUTALT, '.' + this.CSS.IMAGEPRESENTATION], imageAltError);\n\n        return imageAltError;\n    }\n\n    toggleVisibility(selector, predicate) {\n        const elements = this.form.querySelectorAll(selector);\n        elements.forEach((element) => {\n            element.style.display = predicate ? 'block' : 'none';\n        });\n    }\n\n    toggleAriaInvalid(selectors, predicate) {\n        selectors.forEach((selector) => {\n            const elements = this.form.querySelectorAll(selector);\n            elements.forEach((element) => {\n                element.setAttribute('aria-invalid', predicate);\n            });\n        });\n    }\n\n    getAlignmentClass(alignment) {\n        return this.CSS.ALIGNSETTINGS + '_' + alignment;\n    }\n\n    updateWarning() {\n        const urlError = this.hasErrorUrlField();\n        const imageAltError = this.hasErrorAltField();\n\n        return urlError || imageAltError;\n    }\n\n    setImage(e) {\n        const url = this.form.querySelector('.' + this.CSS.INPUTURL).value,\n            alt = this.form.querySelector('.' + this.CSS.INPUTALT).value,\n            width = this.form.querySelector('.' + this.CSS.INPUTWIDTH).value,\n            height = this.form.querySelector('.' + this.CSS.INPUTHEIGHT).value,\n            alignment = this.getAlignmentClass(this.form.querySelector('.' + this.CSS.INPUTALIGNMENT).value),\n            presentation = this.form.querySelector('.' + this.CSS.IMAGEPRESENTATION).checked,\n            constrain = this.form.querySelector('.' + this.CSS.INPUTCONSTRAIN).value,\n            customStyle = this.form.querySelector('.' + this.CSS.INPUTCUSTOMSTYLE).value;\n        let imageHtml,\n            classList = [];\n\n        e.preventDefault();\n\n        // Check if there are any accessibility issues.\n        if (this.updateWarning()) {\n            return;\n        }\n\n        if (url !== '') {\n            if (constrain) {\n                classList.push(this.CSS.RESPONSIVE);\n            }\n\n            // Add the alignment class for the image.\n            classList.push(alignment);\n\n            if (!width.match(this.REGEX.ISPERCENT) && isNaN(parseInt(width, 10))) {\n                this.form.querySelector('.' + this.CSS.INPUTWIDTH).focus();\n                return;\n            }\n            if (!height.match(this.REGEX.ISPERCENT) && isNaN(parseInt(height, 10))) {\n                this.form.querySelector('.' + this.CSS.INPUTHEIGHT).focus();\n                return;\n            }\n\n            Templates.render('tiny_media/image', {\n                url: url,\n                alt: alt,\n                width: width,\n                height: height,\n                presentation: presentation,\n                customstyle: customStyle,\n                classlist: classList.join(' ')\n            }).then(html => {\n                imageHtml = html;\n                this.editor.insertContent(imageHtml);\n                this.currentModal.destroy();\n            });\n        }\n    }\n\n    handleKeyupCharacterCount() {\n        const alt = this.form.querySelector('.' + this.CSS.INPUTALT).value,\n            current = this.form.querySelector('#currentcount');\n        current.innerHTML = alt.length;\n    }\n\n    autoAdjustSize(e, forceHeight) {\n        forceHeight = forceHeight || false;\n\n        let keyField = this.form.querySelector('.' + this.CSS.INPUTWIDTH),\n            keyFieldType = 'width',\n            subField = this.form.querySelector('.' + this.CSS.INPUTHEIGHT),\n            subFieldType = 'height',\n            constrainField = this.form.querySelector('.' + this.CSS.INPUTCONSTRAIN),\n            keyFieldValue = keyField.value,\n            subFieldValue = subField.value,\n            imagePreview = this.form.querySelector('.' + this.CSS.IMAGEPREVIEW),\n            rawPercentage,\n            rawSize;\n\n        // If we do not know the image size, do not do anything.\n        if (!this.rawImageDimensions) {\n            return;\n        }\n\n        // Set the width back to default if it is empty.\n        if (keyFieldValue === '') {\n            keyFieldValue = this.rawImageDimensions[keyFieldType];\n            keyField.value = keyFieldValue;\n            keyFieldValue = keyField.value;\n        }\n\n        // Clear the existing preview sizes.\n        imagePreview.style.width = null;\n        imagePreview.style.height = null;\n\n        // Now update with the new values.\n        if (!constrainField.checked) {\n            // We are not keeping the image proportion - update the preview accordingly.\n\n            // Width.\n            if (keyFieldValue.match(this.REGEX.ISPERCENT)) {\n                rawPercentage = parseInt(keyFieldValue, 10);\n                rawSize = this.rawImageDimensions.width / 100 * rawPercentage;\n                imagePreview.style.width = rawSize + 'px';\n            } else {\n                imagePreview.style.width = keyFieldValue + 'px';\n            }\n\n            // Height.\n            if (subFieldValue.match(this.REGEX.ISPERCENT)) {\n                rawPercentage = parseInt(subFieldValue, 10);\n                rawSize = this.rawImageDimensions.height / 100 * rawPercentage;\n                imagePreview.style.height = rawSize + 'px';\n            } else {\n                imagePreview.style.height = subFieldValue + 'px';\n            }\n        } else {\n            // We are keeping the image in proportion.\n            if (forceHeight) {\n                // By default we update based on width. Swap the key and sub fields around to achieve a height-based scale.\n                let temporaryValue;\n                temporaryValue = keyField;\n                keyField = subField;\n                subField = temporaryValue;\n\n                temporaryValue = keyFieldType;\n                keyFieldType = subFieldType;\n                subFieldType = temporaryValue;\n\n                temporaryValue = keyFieldValue;\n                keyFieldValue = subFieldValue;\n                subFieldValue = temporaryValue;\n            }\n\n            if (keyFieldValue.match(this.REGEX.ISPERCENT)) {\n                // This is a percentage based change. Copy it verbatim.\n                subFieldValue = keyFieldValue;\n\n                // Set the width to the calculated pixel width.\n                rawPercentage = parseInt(keyFieldValue, 10);\n                rawSize = this.rawImageDimensions.width / 100 * rawPercentage;\n\n                // And apply the width/height to the container.\n                imagePreview.style.width = rawSize;\n                rawSize = this.rawImageDimensions.height / 100 * rawPercentage;\n                imagePreview.style.height = rawSize;\n            } else {\n                // Calculate the scaled subFieldValue from the keyFieldValue.\n                subFieldValue = Math.round((keyFieldValue / this.rawImageDimensions[keyFieldType]) *\n                    this.rawImageDimensions[subFieldType]);\n\n                if (forceHeight) {\n                    imagePreview.style.width = subFieldValue;\n                    imagePreview.style.height = keyFieldValue;\n                } else {\n                    imagePreview.style.width = keyFieldValue;\n                    imagePreview.style.height = subFieldValue;\n                }\n            }\n\n            // Update the subField's value within the form to reflect the changes.\n            subField.value = subFieldValue;\n        }\n    }\n\n    applyImageProperties() {\n        const properties = this.getSelectedImageProperties(),\n            img = this.form.querySelector('.' + this.CSS.IMAGEPREVIEW);\n\n        if (properties === false) {\n            img.style.display = 'none';\n            // Set the default alignment.\n            this.ALIGNMENTS.some(alignment => {\n                if (alignment.isDefault) {\n                    this.form.querySelector('.' + this.CSS.INPUTALIGNMENT).value = alignment.value;\n                    return true;\n                }\n\n                return false;\n            });\n\n            return;\n        }\n\n        if (properties.align) {\n            this.form.querySelector('.' + this.CSS.INPUTALIGNMENT).value = properties.align;\n        }\n        if (properties.customstyle) {\n            this.form.querySelector('.' + this.CSS.INPUTCUSTOMSTYLE).value = properties.customstyle;\n        }\n        if (properties.width) {\n            this.form.querySelector('.' + this.CSS.INPUTWIDTH).value = properties.width;\n        }\n        if (properties.height) {\n            this.form.querySelector('.' + this.CSS.INPUTHEIGHT).value = properties.height;\n        }\n        if (properties.alt) {\n            this.form.querySelector('.' + this.CSS.INPUTALT).value = properties.alt;\n        }\n        if (properties.src) {\n            this.form.querySelector('.' + this.CSS.INPUTURL).value = properties.src;\n            this.loadPreviewImage(properties.src);\n        }\n        if (properties.presentation) {\n            this.form.querySelector('.' + this.CSS.IMAGEPRESENTATION).checked = 'checked';\n        }\n\n        // Update the image preview based on the form properties.\n        this.autoAdjustSize();\n    }\n\n    getSelectedImageProperties() {\n        let properties = {\n                src: null,\n                alt: null,\n                width: null,\n                height: null,\n                align: '',\n                presentation: false\n            },\n\n            // Get the current selection.\n            image = this.getSelectedImage(),\n            width,\n            height,\n            style;\n\n        if (image) {\n            image = this.removeLegacyAlignment(image);\n            this.selectedImage = image;\n\n            style = image.style;\n            properties.customstyle = style;\n\n            width = image.width;\n            if (!String(width).match(this.REGEX.ISPERCENT)) {\n                width = parseInt(width, 10);\n            }\n            height = image.height;\n            if (!String(height).match(this.REGEX.ISPERCENT)) {\n                height = parseInt(height, 10);\n            }\n\n            if (width !== 0) {\n                properties.width = width;\n            }\n            if (height !== 0) {\n                properties.height = height;\n            }\n            this.getAlignmentProperties(image, properties);\n            properties.src = image.getAttribute('src');\n            properties.alt = image.getAttribute('alt') || '';\n            properties.presentation = (image.getAttribute('role') === 'presentation');\n            return properties;\n        }\n\n        // No image selected - clean up.\n        this.selectedImage = null;\n        return false;\n    }\n\n    removeLegacyAlignment(imageNode) {\n        if (!imageNode.style.margin) {\n            // There is no margin therefore this cannot match any known alignments.\n            return imageNode;\n        }\n\n        this.ALIGNMENTS.some(alignment => {\n            if (imageNode.style[alignment.name] !== alignment.value) {\n                // The name/value do not match. Skip.\n                return false;\n            }\n            const normalisedNode = document.createElement('div');\n            normalisedNode.style.margin = alignment.margin;\n            if (imageNode.style.margin !== normalisedNode.style.margin) {\n                // The margin does not match.\n                return false;\n            }\n\n            imageNode.classList.add(this.getAlignmentClass(alignment.value));\n            imageNode.style[alignment.name] = null;\n            imageNode.style.margin = null;\n\n            return true;\n        });\n\n        return imageNode;\n    }\n\n    getAlignmentProperties(image, properties) {\n        let complete = false,\n            defaultAlignment;\n\n        // Check for an alignment value.\n        complete = this.ALIGNMENTS.some(alignment => {\n            const classname = this.getAlignmentClass(alignment.value);\n            if (image.classList.contains(classname)) {\n                properties.align = alignment.value;\n                return true;\n            }\n\n            if (alignment.isDefault) {\n                defaultAlignment = alignment.value;\n            }\n\n            return false;\n        });\n\n        if (!complete && defaultAlignment) {\n            properties.align = defaultAlignment;\n        }\n    }\n\n    getSelectedImage() {\n        const imgElm = this.editor.selection.getNode();\n        const figureElm = this.editor.dom.getParent(imgElm, 'figure.image');\n        if (figureElm) {\n            return this.editor.dom.select('img', figureElm)[0];\n        }\n        if (imgElm && (imgElm.nodeName !== 'IMG' || this.isPlaceholderImage(imgElm))) {\n            return null;\n        }\n        return imgElm;\n    }\n\n    isPlaceholderImage(imgElm) {\n        return imgElm.nodeName === 'IMG' && (imgElm.hasAttribute('data-mce-object') || imgElm.hasAttribute('data-mce-placeholder'));\n    }\n\n    registerEventListeners() {\n        const self = this;\n        this.form.querySelector('.' + this.CSS.INPUTURL).addEventListener('blur', () => {\n            this.urlChanged();\n        });\n        this.form.querySelector('.' + this.CSS.INPUTURL).addEventListener('change', () => {\n            this.hasErrorUrlField();\n        });\n        this.form.querySelector('.' + this.CSS.IMAGEPRESENTATION).addEventListener('change', () => {\n            this.hasErrorAltField();\n        });\n        this.form.querySelector('.' + this.CSS.INPUTALT).addEventListener('blur', () => {\n            this.hasErrorAltField();\n        });\n        this.form.querySelector('.' + this.CSS.INPUTWIDTH).addEventListener('blur', (e) => {\n            this.autoAdjustSize(e);\n        });\n        this.form.querySelector('.' + this.CSS.INPUTHEIGHT).addEventListener('blur', (e) => {\n            this.autoAdjustSize(e, true);\n        });\n\n        this.form.querySelector('.' + this.CSS.INPUTSUBMIT).addEventListener('click', (e) => {\n            this.setImage(e);\n        });\n        if (this.canShowFilePicker) {\n            this.form.querySelector('.' + this.CSS.IMAGEBROWSER).addEventListener('click', (e) => {\n                e.preventDefault();\n                displayFilepicker(this.editor, 'image').then((params) => {\n                    this.filePickerCallback(params, self);\n                }).catch();\n            });\n        }\n        // Character count.\n        this.form.querySelector('.' + this.CSS.INPUTALT).addEventListener('keyup', () => {\n            this.handleKeyupCharacterCount();\n        });\n    }\n};\n\n"],"names":["MediaImage","editor","FORM","RESPONSIVE","INPUTALIGNMENT","INPUTALT","INPUTHEIGHT","INPUTSUBMIT","INPUTURL","INPUTSIZE","INPUTWIDTH","IMAGEALTWARNING","IMAGEURLWARNING","IMAGEBROWSER","IMAGEPRESENTATION","INPUTCONSTRAIN","INPUTCUSTOMSTYLE","IMAGEPREVIEW","IMAGEPREVIEWBOX","ALIGNSETTINGS","URL","ALT","ISPERCENT","WIDTH","HEIGHT","name","str","value","margin","isDefault","rawImageDimensions","Modal","create","type","types","DEFAULT","title","body","Templates","render","elementid","this","getElement","id","CSS","FORMNAMES","showfilepicker","canShowFilePicker","then","modal","_this","currentModal","getRoot","on","ModalEvents","bodyRendered","form","document","querySelector","applyImageProperties","registerEventListeners","hidden","destroy","show","params","self","url","loadPreviewImage","image","Image","onerror","_this2","style","display","onload","input","currentWidth","currentHeight","widthRatio","heightRatio","width","DEFAULTS","height","setAttribute","src","match","REGEX","checked","disabled","Math","round","parseInt","urlError","toggleVisibility","toggleAriaInvalid","alt","presentation","imageAltError","selector","predicate","querySelectorAll","forEach","element","selectors","_this3","alignment","hasErrorUrlField","hasErrorAltField","e","imageHtml","getAlignmentClass","constrain","customStyle","classList","preventDefault","updateWarning","push","isNaN","focus","customstyle","classlist","join","html","_this4","insertContent","innerHTML","length","forceHeight","rawPercentage","rawSize","keyField","keyFieldType","subField","subFieldType","constrainField","keyFieldValue","subFieldValue","imagePreview","temporaryValue","properties","getSelectedImageProperties","img","ALIGNMENTS","some","_this5","align","autoAdjustSize","getSelectedImage","removeLegacyAlignment","selectedImage","String","getAlignmentProperties","getAttribute","imageNode","normalisedNode","createElement","add","_this6","defaultAlignment","classname","_this7","contains","imgElm","selection","getNode","figureElm","dom","getParent","select","nodeName","isPlaceholderImage","hasAttribute","addEventListener","_this8","urlChanged","setImage","filePickerCallback","catch","handleKeyupCharacterCount"],"mappings":"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"}