{"version":3,"file":"storage.min.js","sources":["../src/storage.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Storage helper for the Moodle Tiny Autosave plugin.\n *\n * @module      tiny_autosave/plugin\n * @copyright   2022 Andrew Lyons <andrew@nicols.co.uk>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as Repository from \"./repository\";\nimport Pending from 'core/pending';\nimport {markInitialised} from \"./options\";\nimport Log from 'core/log';\nimport {getLogSource} from './common';\n\n/** @property {Map} A map of debounced draft saves */\nconst saveDebounceMap = new Map();\n\n/**\n * Attempt to restore a draft into the editor\n *\n * @param {TinyMCE} editor The Editor to restore a draft for\n */\nexport const restoreDraft = async(editor) => {\n    const pendingPromise = new Pending('tiny_autosave/restoreDraft');\n    try {\n        const session = await Repository.resumeAutosaveSession(editor);\n        if (session && session.drafttext) {\n            editor.undoManager.ignore(() => {\n                editor.setContent(session.drafttext);\n            });\n        }\n    } catch (error) {\n        // Ignore any errors as drafts are optional.\n        Log.warn(`Failed to restore draft: ${error}`, getLogSource(editor));\n    }\n    markInitialised(editor);\n    pendingPromise.resolve();\n};\n\n/**\n * Save the current content of the editor as a draft.\n *\n * @param {TinyMCE} editor\n */\nexport const saveDraft = (editor) => {\n    const timerId = saveDebounceMap.get(editor);\n    if (timerId) {\n        clearTimeout(timerId);\n    }\n    saveDebounceMap.set(editor, setTimeout(() => {\n        Log.debug(`Saving draft`, getLogSource(editor));\n        Repository.updateAutosaveSession(editor);\n    }, 500));\n};\n\n/**\n * Delete the draft for the current editor.\n *\n * @param {TinyMCE} editor\n */\nexport const removeAutosaveSession = (editor) => {\n    Log.debug(`Removing Autosave session`, getLogSource(editor));\n    Repository.removeAutosaveSession(editor);\n};\n"],"names":["saveDebounceMap","Map","restoreDraft","editor","pendingPromise","Pending","Repository","resumeAutosaveSession","session","drafttext","undoManager","ignore","setContent","warn","resolve","timerId","get","clearTimeout","set","setTimeout","debug","updateAutosaveSession","removeAutosaveSession"],"mappings":"y3DA8BMA,gBAAkB,IAAIC,IAOfC,0CAAe,iBAAMC,+IACxBC,eAAiB,IAAIC,iBAAQ,8DAETC,WAAWC,sBAAsBJ,gBAAjDK,wBACSA,QAAQC,WACnBN,OAAOO,YAAYC,QAAO,WACtBR,OAAOS,WAAWJ,QAAQC,uGAK9BI,sDAA0C,wBAAaV,8CAE/CA,QAChBC,eAAeU,0eAQM,SAACX,YAChBY,QAAUf,gBAAgBgB,IAAIb,QAChCY,SACAE,aAAaF,SAEjBf,gBAAgBkB,IAAIf,OAAQgB,YAAW,wBAC/BC,sBAAsB,wBAAajB,SACvCG,WAAWe,sBAAsBlB,UAClC,sCAQ8B,SAACA,qBAC9BiB,mCAAmC,wBAAajB,SACpDG,WAAWgB,sBAAsBnB"}