{"version":3,"file":"generator.min.js","sources":["../src/generator.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    tiny_bibliography\n * @copyright  2023 Stevani Andolo  <stevani@hotmail.com.au>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\nimport {component} from './common';\nimport FormSetter from './formsetter';\nimport * as Modal from 'core/modal_factory';\nimport * as ModalEvents from 'core/modal_events';\nimport * as Getter from './getter';\nimport * as Bibliography from './bibliography';\n\nexport default class Generator extends FormSetter {\n\n    constructor(editor) {\n        super();\n        this.editor = editor;\n        this.modal = null;\n\n        // Required properties for bibliography form.\n        this.style = 'IEEE';\n        this.source = 'Book';\n        this.allsources = {\n            \"Article in journal\": \"Journal name\",\n            \"Book\": \"Publisher\"\n        };\n        this.pureauthor = null;\n        this.author = '';\n        this.title = null;\n        this.city = null;\n        this.purecity = null;\n        this.publisher = null;\n        this.year = null;\n        this.volume = null;\n        this.issue = null;\n        this.pages = null;\n\n        // Other required properties.\n        this.create = true;\n        this.updateid = null;\n        this.updateindex = null;\n        this.reorderfrom = null;\n    }\n\n    destroy() {\n        delete this.editor;\n\n        this.modal.destroy();\n        delete this.modal;\n    }\n\n    async displayDialogue() {\n        this.modal = await Modal.create({\n            type: Modal.types.DEFAULT,\n            large: true,\n            title: getString('pluginname', component),\n            body: this.getDialogueContent()\n        });\n\n        // Destroy the class when hiding the modal.\n        this.modal.getRoot().on(ModalEvents.hidden, () => this.destroy());\n\n        this.modal.getRoot().on(ModalEvents.bodyRendered, () => {\n            // Generates bibliography list and display in modal.\n            Bibliography.generateBioAndDisplayInModal(this);\n\n            // Manually get the bio example.\n            Getter.getExampleManually();\n        });\n\n        this.modal.getRoot()[0].addEventListener('click', async(event) => {\n            // Displays bibliography info example when clicked in any form inputs based on dataset.action.\n            Getter.getExample(event);\n\n            // Sets and generates custom authors' names.\n            this.setCustomAuthorNames(event);\n\n            // Generates a new bibliography list and inserts it.\n            const generateList = event.target.closest('[data-action=\"generate-list\"]');\n            if (generateList) {\n                Bibliography.generateBibliography(this);\n            }\n\n            // Generates and inserts a new citation.\n            Bibliography.citeThis(this, event);\n\n            // Delete citation.\n            Bibliography.deleteBibliography(this, event);\n\n            // Edit bibliography.\n            Bibliography.editBibliography(this, event);\n        });\n\n        // Sets bibliography style and source.\n        this.modal.getRoot()[0].addEventListener('change', (event) => {\n            const exampleNodes = event.target.closest('[data-type=\"style-source\"]');\n            if (exampleNodes) {\n                const variable = exampleNodes.dataset.name.replaceAll('_', '');\n                const callback = `set${variable.charAt(0).toUpperCase() + variable.slice(1)}`;\n                this[callback](exampleNodes.value);\n            }\n        });\n\n        // Sets bibliography info.\n        this.modal.getRoot()[0].addEventListener('keyup', (event) => {\n            const exampleNodes = event.target.closest('[data-type=\"bibliography-info-example\"]');\n            if (exampleNodes) {\n                const variable = exampleNodes.dataset.name.replaceAll('_', '');\n                const callback = `set${variable.charAt(0).toUpperCase() + variable.slice(1)}`;\n                this[callback](exampleNodes.value);\n            }\n        });\n\n        this.modal.show();\n    }\n\n    /**\n     * Splits author's name.\n     */\n    splitAuthorName() {\n        const data = this.pureauthor;\n        if (!data) {\n            return;\n        }\n\n        if (data.includes(';') === true) {\n            const authors = data.split(';');\n            authors.forEach(author => {\n                author = author.trim();\n                if (author !== '') {\n                    this.setGeneratedAuthorNames(this.generateDetailedAuthorName(author));\n                }\n            });\n        } else {\n            this.setGeneratedAuthorNames(this.generateDetailedAuthorName(data));\n        }\n    }\n\n    /**\n     * Returns generated author's name.\n     *\n     * @param {string} author\n     * @returns {string}\n     */\n    generateDetailedAuthorName(author = null) {\n        let surename = '',\n        firstname = '',\n        middlename = '';\n\n        if (author.includes(',')) {\n            const names = author.split(',');\n            surename = names[0];\n            let fmname = names[1];\n\n            if (fmname.includes(' ')) {\n                fmname = fmname.split(' ');\n                let i = 0;\n                fmname.forEach(fm => {\n                    if (fm !== '') {\n                        if (i === 0) {\n                            firstname = fm;\n                        } else {\n                            middlename += fm + ' ';\n                        }\n                        i++;\n                    }\n                });\n            } else {\n                firstname = fmname;\n            }\n        } else {\n            firstname = author;\n        }\n\n        return this.generateAuthorName(firstname.trim(), middlename.trim(), surename.trim()).generated;\n    }\n\n    /**\n     * Generates author's name based on the style.\n     *\n     * @param {string} firstname\n     * @param {string} middlename\n     * @param {string} surename\n     * @returns {object|null}\n     */\n    generateAuthorName(firstname = null, middlename = null, surename = null) {\n        if (firstname !== null) {\n            const gensurename = surename ? (surename.charAt(0).toUpperCase() + surename.slice(1)) : '';\n            surename = surename ? surename + ', ' : null;\n\n            let genmiddlename = '',\n            genfirstname = '';\n            if (surename) {\n                genmiddlename = middlename ? middlename.charAt(0).toUpperCase() + '. ' : '';\n                middlename = middlename ? middlename + '' : null;\n            } else {\n                genmiddlename = middlename ? middlename.charAt(0).toUpperCase() : '';\n                middlename = middlename ? middlename : null;\n            }\n\n            if (surename || middlename) {\n                genfirstname = firstname ? firstname.charAt(0).toUpperCase() + '. ' : '';\n                firstname = firstname ? firstname + ' ' : '';\n            } else {\n                genfirstname = firstname ? firstname.charAt(0).toUpperCase() : '';\n                firstname = firstname ? firstname : '';\n            }\n\n            return {\n                \"generated\": genfirstname + genmiddlename + gensurename,\n                \"originated\": (surename ?? ', ') + firstname + (middlename ?? '')\n            };\n        }\n        return null;\n    }\n\n    /**\n     * Gets last node to set the cursor position.\n     * https://stackoverflow.com/questions/7962474/tinymce-insert-content-at-the-bottom.\n     *\n     * @param {node} node\n     * @param {number} nodeType\n     * @param {node} result\n     * @returns {node}\n     */\n    getTextNodes(node, nodeType, result) {\n        var children = node.childNodes;\n        var nodeType = nodeType ? nodeType : 3;\n\n        var result = !result ? [] : result;\n        if (node.nodeType == nodeType) {\n            result.push(node);\n        }\n\n        for (var i = 0; i < children.length; i++) {\n            result = this.getTextNodes(children[i], nodeType, result);\n        }\n\n        return result;\n    }\n\n    /**\n     * Return the dialogue content.\n     *\n     * @return {Promise<Array>} A template promise containing the rendered dialogue content.\n     */\n     async getDialogueContent() {\n        const warnings = [];\n\n        return Templates.render('tiny_bibliography/bibliography_form', {\n            warnings\n        });\n    }\n\n    /**\n     * Return the bio content.\n     *\n     * @param {object} data\n     * @return {Promise<Array>} A template promise containing the rendered content.\n     */\n     async getBioContent(data) {\n        return Templates.render('tiny_bibliography/bibliography_content', {\n            ...data\n        });\n    }\n\n    /**\n     * Return the bio content with buttons.\n     *\n     * @param {object} data\n     * @return {Promise<Array>} A template promise containing the rendered content.\n     */\n    async getBioListWithButtons(data) {\n        return Templates.render('tiny_bibliography/bibliography_list_with_buttons', {\n            ...data\n        });\n    }\n\n    /**\n     * Check bio's source.\n     *\n     * @param {string} source\n     * @returns {boolean}\n     */\n    checkSource(source = null) {\n        return (this.source === source);\n    }\n}\n"],"names":["Generator","FormSetter","constructor","editor","modal","style","source","allsources","pureauthor","author","title","city","purecity","publisher","year","volume","issue","pages","create","updateid","updateindex","reorderfrom","destroy","this","Modal","type","types","DEFAULT","large","component","body","getDialogueContent","getRoot","on","ModalEvents","hidden","bodyRendered","Bibliography","generateBioAndDisplayInModal","Getter","getExampleManually","addEventListener","async","getExample","event","setCustomAuthorNames","target","closest","generateBibliography","citeThis","deleteBibliography","editBibliography","exampleNodes","variable","dataset","name","replaceAll","charAt","toUpperCase","slice","value","show","splitAuthorName","data","includes","split","forEach","trim","setGeneratedAuthorNames","generateDetailedAuthorName","surename","firstname","middlename","names","fmname","i","fm","generateAuthorName","generated","gensurename","genmiddlename","genfirstname","getTextNodes","node","nodeType","result","children","childNodes","push","length","Templates","render","warnings","checkSource"],"mappings":"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"}