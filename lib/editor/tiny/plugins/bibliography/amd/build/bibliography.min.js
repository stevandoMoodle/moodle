define("tiny_bibliography/bibliography",["exports","core/templates","core/str","./common","./helper"],(function(_exports,_templates,_str,_common,Helper){var obj;
/*
   * @package    tiny_bibliography
   * @copyright  2023 Stevani Andolo  <stevani@hotmail.com.au>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.reorderCitation=_exports.reorderBibliography=_exports.generateBioAndDisplayInModal=_exports.generateBibliography=_exports.editBibliography=_exports.deleteBibliography=_exports.citeThis=_exports.checkAndReformBioInfo=void 0,_templates=(obj=_templates)&&obj.__esModule?obj:{default:obj},Helper=function(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj,cache&&cache.set(obj,newObj);return newObj}(Helper);_exports.generateBioAndDisplayInModal=$this=>{let biolist=$this.editor.dom.select('[class="id-bibliography-holder"]');if(biolist.length>0){let nodes=Helper.elementId("bibliography-info-list-holder"),index=1;nodes.innerHTML="",biolist[0].childNodes.forEach((async node=>{let newnode;if("P"===node.nodeName&&""!==node.textContent.trim()){let textcontent=node.firstChild.innerHTML.replaceAll('""','"');textcontent=textcontent.replaceAll("vol. ",""),textcontent=textcontent.replaceAll("no. ",""),textcontent=textcontent.replaceAll("pp. ",""),textcontent=textcontent.replace(/(<([^>]+)>)/gi,""),newnode=await $this.getBioListWithButtons({id:node.getAttribute("class"),index:index++,dataobject:"{".concat(textcontent,"}"),bio:node.innerHTML.trim(),heading:!1})}else"H3"===node.nodeName&&""!==node.textContent.trim()&&(newnode=await $this.getBioListWithButtons({id:node.getAttribute("class"),bio:node.innerHTML.trim(),heading:!0}));newnode&&(nodes.innerHTML+=newnode)}))}};_exports.citeThis=async($this,event)=>{const citethis=event.target.closest('[data-action="citethis"]');if(citethis){const list=$this.editor.dom.select('[class="'.concat(citethis.dataset.id,'"]')),index=citethis.dataset.index;list&&($this.editor.insertContent(await _templates.default.render("tiny_bibliography/bibliography_citation",{index:index})),$this.modal.hide())}};_exports.deleteBibliography=($this,event)=>{const deletebio=event.target.closest('[data-action="deletebio"]');if(deletebio){const list=$this.editor.dom.select('[class="'.concat(deletebio.dataset.id,'"]')),index=parseInt(deletebio.dataset.index);if(list){$this.editor.dom.select('[class="cited-bibliography"]').forEach((ref=>{const text=Helper.getInTextRefNumber(ref);parseInt(text)===index&&ref.remove()})),reorderCitation($this,index,!1),list[0].remove(),reorderBibliography($this),$this.modal.hide()}}};_exports.editBibliography=async($this,event)=>{const editbio=event.target.closest('[data-action="editbio"]');if(editbio){const data=JSON.parse(editbio.dataset.object);$this.style=data.style,$this.source=data.source,$this.pureauthor=data.pureauthor,$this.title=data.title,$this.checkSource("Book")&&($this.city=data.purecity,$this.purecity=data.purecity),$this.publisher=data.publisher,$this.year=data.year,$this.checkSource("Article in journal")&&($this.volume=data.volume,$this.issue=data.issue,$this.pages=data.pages),$this.create=!1,$this.updateid=editbio.dataset.id,$this.updateindex=editbio.dataset.index,Helper.elementId("id_sourcestyle").value=data.style,Helper.elementId("id_typeofsource").value=data.source,Helper.elementId("id_author").value=data.pureauthor,Helper.elementId("id_title").value=data.title;const VIP=Helper.elementId("book-source").classList,city=Helper.elementId("fitem_id_city_bio").classList;$this.checkSource("Book")&&(VIP.add("hide"),city.remove("hide"),Helper.elementId("id_city_bio").value=data.purecity),Helper.elementId("id_publisher").value=data.publisher,Helper.elementId("id_year").value=data.year,$this.checkSource("Article in journal")&&(VIP.remove("hide"),city.add("hide"),Helper.elementId("id_volume").value=data.volume,Helper.elementId("id_issue").value=data.issue,Helper.elementId("id_pages").value=data.pages),Helper.elementId("id-generate-label").textContent=await(0,_str.get_string)("update",_common.component),Helper.elementId("bio-form").click()}};const reorderBibliography=$this=>{let biolist=$this.editor.dom.select('[class="id-bibliography-holder"]');if(1===biolist[0].childNodes.length&&biolist[0].remove(),biolist.length>0){let index=0;biolist[0].childNodes.forEach((node=>{"P"===node.nodeName&&""!==node.textContent.trim()&&(node.childNodes[2].removeAttribute("class"),node.childNodes[2].classList.add("id-refno-".concat(index)),node.childNodes[2].textContent="[".concat(index,"]"),node.removeAttribute("class"),node.classList.add("id-bibliography-list-".concat(index))),index++}))}};_exports.reorderBibliography=reorderBibliography;const reorderCitation=function($this,refnumber){let increase=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const reflist=$this.editor.dom.select('[class="cited-bibliography"]');reflist.length>0&&reflist.forEach((ref=>{const content=parseInt(Helper.getInTextRefNumber(ref));content>=refnumber&&(ref.textContent="[".concat(content-1,"]"),increase&&(ref.textContent="[".concat(content+1,"]")))}))};_exports.reorderCitation=reorderCitation;_exports.generateBibliography=async $this=>{if($this.author="",$this.splitAuthorName(),null!==$this.style&&null!==$this.source&&""!==$this.author&&null!==$this.title&&null!==$this.publisher&&null!==$this.year){if(checkAndReformBioInfo($this),$this.setTitleBasedOnSource(),$this.setPublisherBasedOnSource(),$this.create){let biolist=$this.editor.dom.select('[class="id-bibliography-holder"]'),index=biolist.length;index>0&&(index=biolist[0].querySelectorAll("p").length),$this.updateindex=index+1;const info=await $this.getBioContent($this);let bibliography,textnodes;index>0?(textnodes=$this.getTextNodes(biolist[0].lastChild),bibliography=info):(textnodes=$this.getTextNodes($this.editor.getBody().lastChild),bibliography=await _templates.default.render("tiny_bibliography/bibliography_header",{info:info}));const currentelement=$this.editor.selection.getNode().getAttribute("class");if(currentelement&&currentelement.includes("id-bibliography-list-")&&(textnodes=$this.getTextNodes($this.editor.selection.getNode())),$this.editor.selection.setCursorLocation(textnodes[textnodes.length-1],textnodes[textnodes.length-1].textContent.length),await $this.editor.insertContent(bibliography),currentelement&&currentelement.includes("id-bibliography-list-")){let refno=currentelement.split("-");refno=parseInt(refno[refno.length-1])+1,reorderCitation($this,refno,!0),reorderBibliography($this)}}else{$this.editor.dom.select('[class="'.concat($this.updateid,'"]'))[0].innerHTML=await $this.getBioContent($this),$this.create=!0}$this.modal.hide()}else alert("You need to provide all information")};const checkAndReformBioInfo=$this=>{$this.checkSource("Book")&&null===$this.city?alert("You need to provide all information"):($this.setCitybioBasedOnSource(),!$this.checkSource("Article in journal")||null!==$this.volume&&null!==$this.issue&&null!==$this.pages?($this.setVolume(null,!0),$this.setIssue(null,!0),$this.setPages(null,!0)):alert("You need to provide all information"))};_exports.checkAndReformBioInfo=checkAndReformBioInfo}));

//# sourceMappingURL=bibliography.min.js.map