{"version":3,"file":"style.min.js","sources":["../../../src/bibliography/ieee/style.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    tiny_bibliography\n * @copyright  2023 Stevani Andolo <stevani@hotmail.com.au>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\nimport {alert} from 'core/notification';\nimport {byId, getInTextRefNumber, resetBibliographyFormFields, toWords, ucFirst, wordsFormat} from '../helper';\nimport {firstItem, getBioContent} from '../template_loader';\nimport Base from '../base';\nimport {component} from '../../common';\n\n// All sources.\nimport Book from './sources/book';\nimport Website from './sources/website';\nimport BookWithChapterTitle from './sources/book_with_chapter_title';\n\nexport default class extends Base {\n    constructor() {\n        super();\n        this.DEFAULT = {\n            SOURCE: 'book'\n        };\n\n        this.style = 'ieee';\n\n        this.ALL_SOURCES = [\n            'source:book',\n            'source:website',\n            'source:book_with_chapter_title'\n        ];\n    }\n\n    /**\n     * Sets selected source.\n     *\n     * @param {String} data\n     */\n    setSelectedSource = async(data = null) => {\n        let selectedSource;\n        if (!data) {\n            data = this.DEFAULT.SOURCE;\n        }\n\n        switch (data) {\n            case 'book':\n                selectedSource = new Book();\n                break;\n            case 'website':\n                selectedSource = new Website();\n                break;\n            case 'book_with_chapter_title':\n                selectedSource = new BookWithChapterTitle();\n                break;\n            default:\n                // Set to default resource\n                selectedSource = new Book();\n\n                // Set the selected option to default source\n                byId('id_bibliography_source').value = this.DEFAULT.SOURCE;\n\n                // Alert the user.\n                alert(\n                    await getString('alert:warning', component),\n                    await getString('sourcenotavailable', component, toWords('_', data))\n                );\n        }\n        return selectedSource;\n    };\n\n    /**\n     * Delete a citation.\n     *\n     * @param {object} bio\n     */\n    deleteBibliography = (bio) => {\n        const list = bio.editor.dom.select(`[class=\"${bio.deleteBio.dataset.targetId}\"]`);\n        const listInModal = byId(bio.deleteBio.dataset.targetId);\n        const index = parseInt(list);\n        if (list && listInModal) {\n            const refNo = bio.editor.dom.select(`[class=\"cited-bibliography\"]`);\n            refNo.forEach(ref => {\n                const text = getInTextRefNumber(ref);\n                if (parseInt(text) === index) {\n                    // Delete citation(s) if data-index is the same as current text of it.\n                    ref.remove();\n                }\n            });\n\n            // Reorder citations.\n            this.reorderCitation(bio.editor, index, false);\n\n            // Delete found bibliography list.\n            list[0].remove();\n            listInModal.remove();\n\n            // Reorder the bibliography list.\n            this.reorderBibliography(bio.editor);\n        }\n    };\n\n    /**\n     * Reorder bibliography list.\n     *\n     * @param {object} editor\n     */\n    reorderBibliography = (editor) => {\n        let bioList = editor.dom.select('[id=\"id-bibliography-holder\"]');\n\n        // Check if child nodes of bioList is equal to 1, delete the whole bibliography div.\n        if (bioList[0].querySelectorAll('p').length === 0) {\n            bioList[0].remove();\n        }\n\n        if (bioList.length > 0) {\n            let index = 1;\n            bioList[0].childNodes.forEach(node => {\n                if (node.nodeName === 'P' && node.textContent.trim() !== '') {\n                    const targetRefNo = node.querySelectorAll('span')[1].querySelectorAll('span')[0];\n                    if (targetRefNo) {\n                        // Reset all info to pure text.\n                        targetRefNo.removeAttribute('class');\n                        targetRefNo.classList.add(`id-refno-${index}`);\n                        targetRefNo.textContent = `[${index}]`;\n\n                        node.removeAttribute('class');\n                        node.classList.add(`id-bibliography-list-${index}`);\n                        index++;\n                    }\n                }\n            });\n        }\n    };\n\n    /**\n     * Reorder all citations.\n     *\n     * @param {object} editor\n     * @param {number} refNumber\n     * @param {boolean} increase\n     */\n    reorderCitation = (editor, refNumber, increase = false) => {\n        const refList = editor.dom.select('[class=\"cited-bibliography\"]');\n        if (refList.length > 0) {\n            refList.forEach(ref => {\n                const content = parseInt(getInTextRefNumber(ref));\n                if (content >= refNumber) {\n                    ref.textContent = `[${content - 1}]`;\n                    if (increase) {\n                        ref.textContent = `[${content + 1}]`;\n                    }\n                }\n            });\n        }\n    };\n\n    /**\n     * Generates author's name based on the style.\n     *\n     * @param {string} firstName\n     * @param {string} middleName\n     * @param {string} sureName\n     * @returns {object|null}\n     */\n    generateAuthorName(firstName = null, middleName = null, sureName = null) {\n        if (firstName !== null) {\n            const genSureName = sureName ? (ucFirst(sureName)) : ''; // Generated sure name.\n            sureName = sureName ? sureName + ', ' : null;\n\n            let genMiddleName = ''; // Generated middle name.\n            let genFirstName = ''; // Generated first name.\n            if (sureName) {\n                genMiddleName = middleName ? ucFirst(middleName, false) + '. ' : '';\n                middleName = middleName ? middleName + '' : null;\n            } else {\n                genMiddleName = middleName ? ucFirst(middleName, false) : '';\n                middleName = middleName ? middleName : null;\n            }\n\n            if (sureName || middleName) {\n                genFirstName = firstName ? ucFirst(firstName, false) + '. ' : '';\n                firstName = firstName ? firstName + ' ' : '';\n            } else {\n                genFirstName = firstName ? ucFirst(firstName, false) : '';\n                firstName = firstName ? firstName : '';\n            }\n\n            return {\n                \"generated\": genFirstName + genMiddleName + genSureName, // Generated names.\n                \"originated\": (sureName ?? ', ') + firstName + (middleName ?? '') // Pure names.\n            };\n        }\n        return null;\n    }\n\n    /**\n     * Generates or updates the bibliography.\n     *\n     * @param {object} bio\n     */\n    generateBibliography = async(bio) => {\n        if (this.checkRequiredFields(bio)) {\n            if (bio.create) {\n                let bioList = bio.editor.dom.select('[id=\"id-bibliography-holder\"]'),\n                index = bioList.length;\n                if (index > 0) {\n                    index = bioList[0].querySelectorAll('p').length;\n                }\n\n                bio.updateIndex = index + 1;\n                bio.allData.author = wordsFormat(bio.allData.author);\n\n                let info = await getBioContent(this.style, bio);\n                if (index === 0) {\n                    info = await firstItem({reference: info, referenceNumber: bio.updateIndex});\n                }\n\n                let bibliography;\n                if (index > 0) {\n                    bibliography = info;\n                } else {\n                    bibliography = await Templates.render('tiny_bibliography/bibliography_header', {\n                        info: info\n                    });\n                }\n                bibliography = bibliography.replaceAll(/\\r?\\n|\\r/g, '');\n\n                if (index === 0) {\n                    bio.editor.dom.add(\n                        bio.editor.getBody(),\n                        'div',\n                        {'id': 'id-bibliography-holder'},\n                        bibliography\n                    );\n                    this.scrollToBottom(bio);\n                } else {\n                    const currentElement = bio.editor.selection.getNode().parentElement.parentElement;\n                    const elementClass = currentElement.getAttribute('class');\n                    if (currentElement && elementClass && elementClass.includes('id-bibliography-list-')) {\n                        const textNodes = this.getTextNodes(currentElement);\n\n                        // Locate to insert a new bio.\n                        bio.editor.selection.setCursorLocation(\n                            textNodes[textNodes.length - 1],\n                            textNodes[textNodes.length - 1].textContent.length\n                        );\n\n                        // Insert new bio list.\n                        const newshit = await firstItem({reference: info, referenceNumber: bio.updateIndex});\n                        await bio.editor.insertContent(newshit);\n\n                        // Reorder citations.\n                        let refNo = elementClass.split('-');\n                        refNo = parseInt(refNo[refNo.length - 1]) + 1;\n\n                        // Reorder all citations.\n                        this.reorderCitation(bio.editor, refNo, true);\n\n                        // Reorder bibliography list.\n                        this.reorderBibliography(bio.editor);\n                    } else {\n                        bio.editor.dom.add(\n                            bioList[0],\n                            'p',\n                            {'class': `id-bibliography-list-${bio.updateIndex}`},\n                            bibliography,\n                        );\n                        this.scrollToBottom(bio);\n                    }\n                }\n            } else {\n                const targetList = bio.editor.dom.select(`[class=\"${bio.updateId}\"]`)[0];\n                targetList.innerHTML = await getBioContent(this.style, bio);\n                bio.create = true;\n            }\n\n            resetBibliographyFormFields(bio);\n            bio.generateBioAndDisplayInModal();\n        } else {\n            alert(\n                await getString('alert:error', component),\n                await getString('fieldsrequired', component)\n            );\n        }\n    };\n}\n"],"names":["Base","constructor","async","selectedSource","data","_this","DEFAULT","SOURCE","Book","Website","BookWithChapterTitle","value","component","bio","list","editor","dom","select","deleteBio","dataset","targetId","listInModal","index","parseInt","forEach","ref","text","remove","reorderCitation","reorderBibliography","bioList","querySelectorAll","length","childNodes","node","nodeName","textContent","trim","targetRefNo","removeAttribute","classList","add","refNumber","increase","refList","content","this","checkRequiredFields","create","updateIndex","allData","author","bibliography","info","style","reference","referenceNumber","Templates","render","replaceAll","getBody","scrollToBottom","currentElement","selection","getNode","parentElement","elementClass","getAttribute","includes","textNodes","getTextNodes","setCursorLocation","newshit","insertContent","refNo","split","updateId","innerHTML","generateBioAndDisplayInModal","ALL_SOURCES","generateAuthorName","firstName","middleName","sureName","genSureName","genMiddleName","genFirstName"],"mappings":"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"}