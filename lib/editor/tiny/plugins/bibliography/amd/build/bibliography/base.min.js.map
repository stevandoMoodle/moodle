{"version":3,"file":"base.min.js","sources":["../../src/bibliography/base.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    tiny_bibliography\n * @copyright  2023 Stevani Andolo <stevani@hotmail.com.au>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport {alert} from 'core/notification';\nimport {get_string as getString} from 'core/str';\nimport {component} from '../common';\nimport {\n    byId,\n    getInTextRefNumber,\n    getTextNodes,\n    // lcFirst\n} from './helper';\nimport {getBioContent, viewItemButtons} from './templateloader';\n\nexport default class Base {\n    /**\n     * Cite in a bibliography.\n     *\n     * @param {object} bio\n     * @param {event} event\n     */\n    citeThis = async(bio, event) => {\n        const cite = event.target.closest('[data-action=\"cite-this\"]');\n        const list = bio.editor.dom.select(`[class=\"${cite.dataset.id}\"]`);\n        const index = cite.dataset.index;\n        if (list) {\n            bio.editor.insertContent(\n                await Templates.render('tiny_bibliography/bibliography_citation', {\n                    index: index\n                })\n            );\n            bio.modal.hide();\n        }\n    };\n\n    /**\n     * Delete a citation.\n     *\n     * @param {object} bio\n     * @param {event} event\n     */\n    deleteBibliography = (bio, event) => {\n        const deleteBio = event.target.closest('[data-action=\"delete-bio\"]');\n        const list = bio.editor.dom.select(`[class=\"${deleteBio.dataset.id}\"]`);\n        const index = parseInt(deleteBio.dataset.index);\n        if (list) {\n            const refNo = bio.editor.dom.select(`[class=\"cited-bibliography\"]`);\n            refNo.forEach(ref => {\n                const text = getInTextRefNumber(ref);\n                if (parseInt(text) === index) {\n                    // Delete citation(s) if data-index is the same as current text of it.\n                    ref.remove();\n                }\n            });\n\n            // Delete found bibliography list.\n            list[0].remove();\n\n            // Close the modal.\n            bio.modal.hide();\n        }\n    };\n\n    /**\n     * Edit bibliography list.\n     *\n     * @param {object} bio\n     * @param {Element} editBio\n     */\n    editBibliography = async(bio, editBio) => {\n        const targetList = bio.editor.dom.select(`[class=\"${editBio.id}\"]`)[0];\n        const dataObject = `{${targetList.querySelector('.hide-ori-data').innerHTML.replaceAll('\" \"', '\"')}}`;\n        const allData = JSON.parse(dataObject);\n\n        // Assign allData to this.allData.\n        bio.allData = allData;\n\n        // Set style.\n        bio.setStyle(bio.allData.style);\n        byId('id_bibliography_style').value = allData.style;\n\n        // Set source.\n        bio.setSource(bio.allData.source);\n        byId('id_bibliography_source').value = allData.source;\n\n        // Set show other fields.\n        const otherFields = byId('id_other_fields');\n        if (allData.showOtherFields === 'true' && !otherFields.checked) {\n            byId('id_other_fields').checked = true;\n        } else {\n            byId('id_other_fields').checked = false;\n        }\n\n        bio.create = false;\n        bio.updateId = editBio.id;\n        bio.updateIndex = editBio.id.split('-')[3];\n\n        const asdf = byId('id-button-container').querySelectorAll('button');\n        if (asdf.length === 1) {\n            byId('id-button-container').innerHTML += await viewItemButtons({id: editBio.id});\n        }\n\n        byId('id-generate-label').textContent = await getString('update', component);\n    };\n\n    getRequiredFields = (bio) => {\n        let fields = [];\n        bio.fields.forEach(field => {\n            if (field.required) {\n                fields.push(field.field);\n            }\n        });\n        return fields;\n    };\n\n    createKeyValuePair = (bio) => {\n        let keyValuePair = '';\n        for (const key in bio.allData) {\n            if (key !== 'keyValuePair') {\n                if (keyValuePair === '') {\n                    keyValuePair += `\"${key}\": \"${bio.allData[key]}\"`;\n                } else {\n                    keyValuePair += `, \"${key}\": \"${bio.allData[key]}\"`;\n                }\n            }\n        }\n        bio.allData.keyValuePair = keyValuePair;\n    };\n\n    checkRequiredFields = (bio) => {\n        // Concat author, style and source to requiredFields.\n        const fields = [\n            'style',\n            'source'\n        ].concat(this.getRequiredFields(bio));\n\n        let i = 0;\n        fields.every(field => {\n            if (!bio.allData[field] || bio.allData[field] === '') {\n                window.console.log(field);\n                return false;\n            }\n            i++;\n            return true;\n        });\n\n        this.createKeyValuePair(bio);\n        return (i === fields.length);\n    };\n\n    /**\n     * Generates or updates the bibliography.\n     *\n     * @param {object} bio\n     */\n    generateBibliography = async(bio) => {\n        if (this.checkRequiredFields(bio)) {\n            if (bio.create) {\n                let bioList = bio.editor.dom.select('[id=\"id-bibliography-holder\"]'),\n                index = bioList.length;\n                if (index > 0) {\n                    index = bioList[0].querySelectorAll('p').length;\n                }\n\n                bio.updateIndex = index + 1;\n                const info = await getBioContent(bio);\n                let bibliography;\n                let textNodes;\n                if (index > 0) {\n                    textNodes = getTextNodes(bioList[0].lastChild);\n                    bibliography = info;\n                } else {\n                    textNodes = getTextNodes(bio.editor.getBody().lastChild);\n                    bibliography = await Templates.render('tiny_bibliography/bibliography_header', {\n                        info: info\n                    });\n                }\n\n                const currentElement = bio.editor.selection.getNode().getAttribute('class');\n                if (currentElement && currentElement.includes('id-bibliography-list-')) {\n                    // Put the cursor to the end of the selected bio element.\n                    textNodes = getTextNodes(bio.editor.selection.getNode());\n                }\n\n                // Locate to insert a new bio.\n                bio.editor.selection.setCursorLocation(\n                    textNodes[textNodes.length - 1],\n                    textNodes[textNodes.length - 1].textContent.length\n                );\n\n                // Insert new bio list.\n                await bio.editor.insertContent(bibliography);\n            } else {\n                const targetList = bio.editor.dom.select(`[class=\"${bio.updateId}\"]`)[0];\n                targetList.innerHTML = await getBioContent(bio);\n                bio.create = true;\n            }\n\n            // Close the modal.\n            bio.modal.hide();\n        } else {\n            alert('Error!', 'You need to provide all information');\n        }\n    };\n\n    getTextNodes = (node, nodeType, result) => {\n        var children = node.childNodes;\n        var nodeType = nodeType ? nodeType : 3;\n\n        var result = !result ? [] : result;\n        if (node.nodeType == nodeType) {\n            result.push(node);\n        }\n\n        for (var i = 0; i < children.length; i++) {\n            result = this.getTextNodes(children[i], nodeType, result);\n        }\n\n        return result;\n    };\n\n    scrollToBottom = (bio) => {\n        bio.editor.dom.select('[id=\"id-bibliography-holder\"]')[0].scrollIntoView({\n            behavior: 'smooth',\n            block: 'nearest'\n        });\n    };\n}\n"],"names":["async","bio","event","cite","target","closest","list","editor","dom","select","dataset","id","index","insertContent","Templates","render","modal","hide","deleteBio","parseInt","forEach","ref","text","remove","editBio","targetList","dataObject","querySelector","innerHTML","replaceAll","allData","JSON","parse","setStyle","style","value","setSource","source","otherFields","showOtherFields","checked","create","updateId","updateIndex","split","querySelectorAll","length","textContent","component","fields","field","required","push","keyValuePair","key","concat","this","getRequiredFields","i","every","window","console","log","createKeyValuePair","checkRequiredFields","bioList","info","bibliography","textNodes","lastChild","getBody","currentElement","selection","getNode","getAttribute","includes","setCursorLocation","node","nodeType","result","children","childNodes","getTextNodes","scrollIntoView","behavior","block"],"mappings":"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"}