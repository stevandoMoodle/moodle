define("tiny_bibliography/bibliography/helper",["exports","core/str","./../common"],(function(_exports,_str,_common){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.wordsFormat=_exports.ucFirst=_exports.toWords=_exports.toCamelCase=_exports.showElement=_exports.resetBibliographyFormFields=_exports.lcFirst=_exports.hideElement=_exports.getUpperCase=_exports.getTextNodes=_exports.getSourceLangString=_exports.getInTextRefNumber=_exports.getBibliographyFormFields=_exports.fromCamelCase=_exports.byId=_exports.addClass=void 0;_exports.getInTextRefNumber=refelement=>refelement.textContent.replaceAll("[","").replaceAll("]","");const byId=element=>document.getElementById(element);_exports.byId=byId;_exports.toCamelCase=(strings,delimiter)=>{let newString="";return strings.includes(delimiter)?strings.split(delimiter).forEach((string=>{newString+=string.charAt(0).toUpperCase()+string.slice(1)})):newString=strings.charAt(0).toUpperCase()+strings.slice(1),newString};const ucFirst=function(string){let returnAllString=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return returnAllString?string.charAt(0).toUpperCase()+string.slice(1):string.charAt(0).toUpperCase()};_exports.ucFirst=ucFirst;_exports.wordsFormat=strings=>{if(strings.includes(",")){return new Intl.ListFormat(document.documentElement.lang).format(strings.split(","))}return strings};_exports.lcFirst=string=>string.charAt(0).toLowerCase()+string.slice(1);_exports.hideElement=function(){let elements=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];elements.forEach((element=>{byId(element).classList.add("hide")}))};_exports.addClass=(element,className)=>{byId(element).classList.add(className)};_exports.showElement=elements=>{elements.forEach((element=>{byId(element).classList.remove("hide")}))};_exports.toWords=function(delimiter,strings){let upperCase=arguments.length>2&&void 0!==arguments[2]&&arguments[2],newString="";return strings.includes(delimiter)?(strings=strings.split(delimiter)).forEach((string=>{newString+=upperCase?string.toUpperCase():string.charAt(0).toUpperCase()+string.slice(1)+" "})):newString=strings.toUpperCase(),newString.trim()};_exports.getUpperCase=strings=>strings.replace(/[^A-Z]/g,"");_exports.fromCamelCase=(delimiter,strings)=>{let newString="";return(strings=(strings=strings.charAt(0).toUpperCase()+strings.slice(1)).match(/[A-Z][a-z]+/g)).forEach((string=>{newString+=""===newString?string.toLowerCase():delimiter+string.toLowerCase()})),newString};const getBibliographyFormFields=()=>{const form=document.forms["bibliography-form"],inputs=form.getElementsByTagName("input"),textAreas=form.getElementsByTagName("textarea"),selects=form.getElementsByTagName("select");let all=[].concat(Array.prototype.slice.call(inputs),Array.prototype.slice.call(textAreas));return all=all.concat(Array.prototype.slice.call(selects)),all};_exports.getBibliographyFormFields=getBibliographyFormFields;_exports.resetBibliographyFormFields=async function(bio){let resetStyleSource=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];getBibliographyFormFields().forEach((field=>{const name=field.dataset.name;if(name&&bio.allData["pure".concat(ucFirst(name))]?bio.allData["pure".concat(ucFirst(name))]="":"SELECT"!==field.nodeName&&(bio.allData[name]=""),"SELECT"===field.nodeName&&resetStyleSource){const styleSource="style"===name?bio.DEFAULT[name.toUpperCase()]:bio.selectedStyle.DEFAULT[name.toUpperCase()];field.value=styleSource,bio.allData[name]=styleSource}else"SELECT"!==field.nodeName&&(field.value="")})),bio.allData.showOtherFields&&(bio.allData.showOtherFields=!1,byId("id_other_fields").checked=!1),resetStyleSource?bio.setSource():(byId("id-save").remove(),byId("id-delete").remove(),byId("id-generate-label").textContent=await(0,_str.get_string)("button:generate",_common.component))};_exports.getSourceLangString=async strings=>{const labels=await(0,_str.getStrings)(strings.map((key=>({key:key,component:_common.component}))));let i=0,sources=[];return strings.forEach((string=>{sources.push({name:string.replaceAll("source:",""),label:labels[i]}),i++})),sources};const getTextNodes=(node,nodeType,result)=>{var children=node.childNodes;nodeType=nodeType||3,result=result||[],node.nodeType==nodeType&&result.push(node);for(var i=0;i<children.length;i++)result=getTextNodes(children[i],nodeType,result);return result};_exports.getTextNodes=getTextNodes}));

//# sourceMappingURL=helper.min.js.map