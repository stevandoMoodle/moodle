{"version":3,"file":"helper.min.js","sources":["../../src/bibliography/helper.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    tiny_bibliography\n * @copyright  2023 Stevani Andolo <stevani@hotmail.com.au>/\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getStrings, get_string as getString} from 'core/str';\nimport {component} from './../common';\n\n/**\n * Gets the citation number.\n *\n * @param {Document} refelement\n * @returns {string}\n */\nexport const getInTextRefNumber = (refelement) => {\n    return refelement.textContent.replaceAll('[', '').replaceAll(']', '');\n};\n\n/**\n * Returns elementById.\n *\n * @param {element} element\n * @returns {element}\n */\nexport const byId = (element) => {\n    return document.getElementById(element);\n};\n\nexport const toCamelCase = (strings, delimiter) => {\n    let newString = '';\n    if (strings.includes(delimiter)) {\n        strings.split(delimiter).forEach(string => {\n            newString += string.charAt(0).toUpperCase() + string.slice(1);\n        });\n    } else {\n        newString = strings.charAt(0).toUpperCase() + strings.slice(1);\n    }\n    return newString;\n};\n\nexport const ucFirst = (string, returnAllString = true) => {\n    if (returnAllString) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    } else {\n        return string.charAt(0).toUpperCase();\n    }\n};\n\nexport const wordsFormat = (strings) => {\n    if (strings.includes(',')) {\n        const f = new Intl.ListFormat(document.documentElement.lang);\n        return f.format(strings.split(','));\n    }\n    return strings;\n};\n\nexport const lcFirst = (string) => {\n    return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\nexport const hideElement = (elements = []) => {\n    elements.forEach(element => {\n        byId(element).classList.add('hide');\n    });\n};\n\nexport const addClass = (element, className) => {\n    byId(element).classList.add(className);\n};\n\nexport const showElement = (elements) => {\n    elements.forEach(element => {\n        byId(element).classList.remove('hide');\n    });\n};\n\nexport const toWords = (delimiter, strings, upperCase = false) => {\n    let newString = '';\n    if (strings.includes(delimiter)) {\n        strings = strings.split(delimiter);\n        strings.forEach(string => {\n            if (upperCase) {\n                newString += string.toUpperCase();\n            } else {\n                newString += string.charAt(0).toUpperCase() + string.slice(1) + ' ';\n            }\n        });\n    } else {\n        newString = strings.toUpperCase();\n    }\n    return newString.trim();\n};\n\nexport const getUpperCase = (strings) => {\n    return strings.replace(/[^A-Z]/g, '');\n};\n\nexport const fromCamelCase = (delimiter, strings) => {\n    let newString = '';\n    strings = strings.charAt(0).toUpperCase() + strings.slice(1);\n    strings = strings.match(/[A-Z][a-z]+/g);\n    strings.forEach(string => {\n        if (newString === '') {\n            newString += string.toLowerCase();\n        } else {\n            newString += delimiter + string.toLowerCase();\n        }\n    });\n    return newString;\n};\n\nexport const getBibliographyFormFields = () => {\n    const form = document.forms['bibliography-form'];\n    const inputs = form.getElementsByTagName('input');\n    const textAreas = form.getElementsByTagName('textarea');\n    const selects = form.getElementsByTagName('select');\n    let all = [].concat(Array.prototype.slice.call(inputs), Array.prototype.slice.call(textAreas));\n    all = all.concat(Array.prototype.slice.call(selects));\n    return all;\n};\n\nexport const resetBibliographyFormFields = async(bio, resetStyleSource = true) => {\n    getBibliographyFormFields().forEach(field => {\n        const name = field.dataset.name;\n        if (name && bio.allData[`pure${ucFirst(name)}`]) {\n            bio.allData[`pure${ucFirst(name)}`] = '';\n        } else {\n            if (field.nodeName !== 'SELECT') {\n                bio.allData[name] = '';\n            }\n        }\n\n        if (field.nodeName === 'SELECT' && resetStyleSource) {\n            const styleSource = (name === 'style') ?\n                bio.DEFAULT[name.toUpperCase()] :\n                bio.selectedStyle.DEFAULT[name.toUpperCase()];\n\n            field.value = styleSource;\n            bio.allData[name] = styleSource;\n        } else {\n            if (field.nodeName !== 'SELECT') {\n                field.value = '';\n            }\n        }\n    });\n\n    if (bio.allData.showOtherFields) {\n        bio.allData.showOtherFields = false;\n        byId('id_other_fields').checked = false;\n    }\n\n    if (!resetStyleSource) {\n        byId('id-save').remove();\n        byId('id-delete').remove();\n        byId('id-generate-label').textContent = await getString('button:generate', component);\n    } else {\n        bio.setSource();\n    }\n};\n\nexport const getSourceLangString = async(strings) => {\n    const labels = await getStrings(strings.map((key) => ({key, component})));\n\n    let i = 0;\n    let sources = [];\n    strings.forEach((string) => {\n        sources.push({\n            name: string.replaceAll('source:', ''),\n            label: labels[i]\n        });\n        i++;\n    });\n    return sources;\n};\n\n/**\n * Gets last node to set the cursor position.\n * https://stackoverflow.com/questions/7962474/tinymce-insert-content-at-the-bottom.\n *\n * @param {node} node\n * @param {number} nodeType\n * @param {node} result\n * @returns {node}\n */\nexport const getTextNodes = (node, nodeType, result) => {\n    var children = node.childNodes;\n    nodeType = nodeType ? nodeType : 3;\n    result = !result ? [] : result;\n    if (node.nodeType == nodeType) {\n        result.push(node);\n    }\n\n    for (var i = 0; i < children.length; i++) {\n        result = getTextNodes(children[i], nodeType, result);\n    }\n\n    return result;\n};\n"],"names":["refelement","textContent","replaceAll","byId","element","document","getElementById","strings","delimiter","newString","includes","split","forEach","string","charAt","toUpperCase","slice","ucFirst","returnAllString","Intl","ListFormat","documentElement","lang","format","toLowerCase","elements","classList","add","className","remove","upperCase","trim","replace","match","getBibliographyFormFields","form","forms","inputs","getElementsByTagName","textAreas","selects","all","concat","Array","prototype","call","async","bio","resetStyleSource","field","name","dataset","allData","nodeName","styleSource","DEFAULT","selectedStyle","value","showOtherFields","checked","setSource","component","labels","map","key","i","sources","push","label","getTextNodes","node","nodeType","result","children","childNodes","length"],"mappings":"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"}