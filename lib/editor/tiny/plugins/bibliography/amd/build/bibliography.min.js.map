{"version":3,"file":"bibliography.min.js","sources":["../src/bibliography.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    tiny_bibliography\n * @copyright  2023 Stevani Andolo  <stevani@hotmail.com.au>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\nimport {component} from './common';\nimport * as Helper from './helper';\n\n/**\n * Generates bibliography list and display them in the modal.\n *\n * @param {object} $this\n */\nexport const generateBioAndDisplayInModal = ($this) => {\n    let biolist = $this.editor.dom.select('[class=\"id-bibliography-holder\"]');\n    if (biolist.length > 0) {\n        let nodes = Helper.elementId('bibliography-info-list-holder'),\n        index = 1;\n        nodes.innerHTML = '';\n        biolist[0].childNodes.forEach(async node => {\n            let newnode;\n            if (node.nodeName === 'P' && node.textContent.trim() !== '') {\n                // Reset all info to pure text.\n                let textcontent = node.firstChild.innerHTML.replaceAll('\"\"', '\"');\n                textcontent = textcontent.replaceAll('vol. ', '');\n                textcontent = textcontent.replaceAll('no. ', '');\n                textcontent = textcontent.replaceAll('pp. ', '');\n                textcontent = textcontent.replace(/(<([^>]+)>)/gi, '');\n\n                newnode = await $this.getBioListWithButtons({\n                    id: node.getAttribute('class'),\n                    index: index++,\n                    dataobject: `{${textcontent}}`,\n                    bio: node.innerHTML.trim(),\n                    heading: false\n                });\n            } else if (node.nodeName === 'H3' && node.textContent.trim() !== '') {\n                newnode = await $this.getBioListWithButtons({\n                    id: node.getAttribute('class'),\n                    bio: node.innerHTML.trim(),\n                    heading: true\n                });\n            }\n\n            if (newnode) {\n                nodes.innerHTML += newnode;\n            }\n        });\n    }\n};\n\n/**\n * Cite in a bibliography.\n *\n * @param {object} $this\n * @param {event} event\n */\nexport const citeThis = async($this, event) => {\n    const citethis = event.target.closest('[data-action=\"citethis\"]');\n    if (citethis) {\n        const list = $this.editor.dom.select(`[class=\"${citethis.dataset.id}\"]`),\n        index = citethis.dataset.index;\n        if (list) {\n            $this.editor.insertContent(\n                await Templates.render('tiny_bibliography/bibliography_citation', {\n                    index: index\n                })\n            );\n            $this.modal.hide();\n        }\n    }\n};\n\n/**\n * Delete a citation.\n *\n * @param {object} $this\n * @param {event} event\n */\nexport const deleteBibliography = ($this, event) => {\n    const deletebio = event.target.closest('[data-action=\"deletebio\"]');\n    if (deletebio) {\n        const list = $this.editor.dom.select(`[class=\"${deletebio.dataset.id}\"]`);\n        const index = parseInt(deletebio.dataset.index);\n        if (list) {\n            const refno = $this.editor.dom.select(`[class=\"cited-bibliography\"]`);\n            refno.forEach(ref => {\n                const text = Helper.getInTextRefNumber(ref);\n                if (parseInt(text) === index) {\n                    // Delete citation(s) if data-index is the same as current text of it.\n                    ref.remove();\n                }\n            });\n\n            // Reorder citations.\n            reorderCitation($this, index, false);\n\n            // Delete found bibliography list.\n            list[0].remove();\n\n            // Reorder the bibliography list.\n            reorderBibliography($this);\n\n            // Close the modal.\n            $this.modal.hide();\n        }\n    }\n};\n\n/**\n * Edit bibliography list.\n *\n * @param {object} $this\n * @param {event} event\n */\nexport const editBibliography = async($this, event) => {\n    const editbio = event.target.closest('[data-action=\"editbio\"]');\n    if (editbio) {\n        const data = JSON.parse(editbio.dataset.object);\n\n        // Set required bio property values.\n        $this.style = data.style;\n        $this.source = data.source;\n        $this.pureauthor = data.pureauthor;\n        $this.title = data.title;\n\n        if ($this.checkSource('Book')) {\n            $this.city = data.purecity;\n            $this.purecity = data.purecity;\n        }\n\n        $this.publisher = data.publisher;\n        $this.year = data.year;\n\n        if ($this.checkSource('Article in journal')) {\n            $this.volume = data.volume;\n            $this.issue = data.issue;\n            $this.pages = data.pages;\n        }\n\n        $this.create = false;\n        $this.updateid = editbio.dataset.id;\n        $this.updateindex = editbio.dataset.index;\n\n        // Set bio data to the form.\n        Helper.elementId('id_sourcestyle').value = data.style;\n        Helper.elementId('id_typeofsource').value = data.source;\n        Helper.elementId('id_author').value = data.pureauthor;\n        Helper.elementId('id_title').value = data.title;\n\n        const VIP = Helper.elementId('book-source').classList; // Volume, issue & pages.\n        const city = Helper.elementId('fitem_id_city_bio').classList;\n        if ($this.checkSource('Book')) {\n            VIP.add('hide');\n            city.remove('hide');\n            Helper.elementId('id_city_bio').value = data.purecity;\n        }\n\n        Helper.elementId('id_publisher').value = data.publisher;\n        Helper.elementId('id_year').value = data.year;\n\n        if ($this.checkSource('Article in journal')) {\n            VIP.remove('hide');\n            city.add('hide');\n            Helper.elementId('id_volume').value = data.volume;\n            Helper.elementId('id_issue').value = data.issue;\n            Helper.elementId('id_pages').value = data.pages;\n        }\n\n        Helper.elementId('id-generate-label').textContent = await getString('update', component);\n        Helper.elementId('bio-form').click();\n    }\n};\n\n/**\n * Reorder bibliography list.\n *\n * @param {object} $this\n */\nexport const reorderBibliography = ($this) => {\n    let biolist = $this.editor.dom.select('[class=\"id-bibliography-holder\"]');\n\n    // Check if child nodes of biolist is equal to 1, delete the whole bibliograpy div.\n    if (biolist[0].childNodes.length === 1) {\n        biolist[0].remove();\n    }\n\n    if (biolist.length > 0) {\n        let index = 0;\n        biolist[0].childNodes.forEach(node => {\n            if (node.nodeName === 'P' && node.textContent.trim() !== '') {\n                // Reset all info to pure text.\n                node.childNodes[2].removeAttribute('class');\n                node.childNodes[2].classList.add(`id-refno-${index}`);\n                node.childNodes[2].textContent = `[${index}]`;\n\n                node.removeAttribute('class');\n                node.classList.add(`id-bibliography-list-${index}`);\n            }\n            index++;\n        });\n    }\n};\n\n/**\n * Reorder all citations.\n *\n * @param {object} $this\n * @param {number} refnumber\n * @param {boolean} increase\n */\nexport const reorderCitation = ($this, refnumber, increase = false) => {\n    const reflist = $this.editor.dom.select('[class=\"cited-bibliography\"]');\n    if (reflist.length > 0) {\n        reflist.forEach(ref => {\n            const content = parseInt(Helper.getInTextRefNumber(ref));\n            if (content >= refnumber) {\n                ref.textContent = `[${content - 1}]`;\n                if (increase) {\n                    ref.textContent = `[${content + 1}]`;\n                }\n            }\n        });\n    }\n};\n\n/**\n * Generates or updates the bibliography.\n *\n * @param {object} $this\n */\nexport const generateBibliography = async($this) => {\n    $this.author = '';\n    $this.splitAuthorName();\n\n    if ($this.style !== null && $this.source !== null && $this.author !== '' && $this.title !== null &&\n         $this.publisher !== null && $this.year !== null) {\n\n        // Checks and reforms bio's info based on source type.\n        checkAndReformBioInfo($this);\n\n        // Reforms bio's title and publisher based on source type.\n        $this.setTitleBasedOnSource();\n        $this.setPublisherBasedOnSource();\n\n        if ($this.create) {\n            let biolist = $this.editor.dom.select('[class=\"id-bibliography-holder\"]'),\n            index = biolist.length;\n            if (index > 0) {\n                index = biolist[0].querySelectorAll('p').length;\n            }\n\n            $this.updateindex = index + 1;\n            const info = await $this.getBioContent($this);\n            let bibliography, textnodes;\n            if (index > 0) {\n                textnodes = $this.getTextNodes(biolist[0].lastChild);\n                bibliography = info;\n            } else {\n                textnodes = $this.getTextNodes($this.editor.getBody().lastChild);\n                bibliography = await Templates.render('tiny_bibliography/bibliography_header', {\n                    info: info\n                });\n            }\n\n            const currentelement = $this.editor.selection.getNode().getAttribute('class');\n            if (currentelement && currentelement.includes('id-bibliography-list-')) {\n                // Put the cursor to the end of the selected bio element.\n                textnodes = $this.getTextNodes($this.editor.selection.getNode());\n            }\n\n            // Locate to insert a new bio.\n            $this.editor.selection.setCursorLocation(\n                textnodes[textnodes.length - 1],\n                textnodes[textnodes.length - 1].textContent.length\n            );\n\n            // Insert new bio list.\n            await $this.editor.insertContent(bibliography);\n\n            // Check if cursor is currently located within the bio list element.\n            if (currentelement && currentelement.includes('id-bibliography-list-')) {\n                // Reorder citations.\n                let refno = currentelement.split('-');\n                refno = parseInt(refno[refno.length - 1]) + 1;\n\n                // Reorder all citations.\n                reorderCitation($this, refno, true);\n\n                // Reorder bibliography list.\n                reorderBibliography($this);\n            }\n        } else {\n            const targetlist = $this.editor.dom.select(`[class=\"${$this.updateid}\"]`)[0];\n            targetlist.innerHTML = await $this.getBioContent($this);\n            $this.create = true;\n        }\n\n        // Close the modal.\n        $this.modal.hide();\n    } else {\n        alert('You need to provide all information');\n    }\n};\n\n/**\n * Checks and reforms bio's data based on source type.\n *\n * @param {object} $this\n */\nexport const checkAndReformBioInfo = ($this) => {\n    // Extra check based on \"Book\" source type.\n    if ($this.checkSource('Book') && $this.city === null) {\n        alert('You need to provide all information');\n        return;\n    } else {\n        // Reforms bio's city based on source type.\n        $this.setCitybioBasedOnSource();\n    }\n\n    // Extra check based on \"Article in journal\" source type.\n    if ($this.checkSource('Article in journal') && ($this.volume === null || $this.issue === null ||\n            $this.pages === null)) {\n        alert('You need to provide all information');\n        return;\n    } else {\n        // Reforms bio's volume, issue and pages.\n        $this.setVolume(null, true);\n        $this.setIssue(null, true);\n        $this.setPages(null, true);\n    }\n};\n"],"names":["$this","biolist","editor","dom","select","length","nodes","Helper","elementId","index","innerHTML","childNodes","forEach","async","newnode","node","nodeName","textContent","trim","textcontent","firstChild","replaceAll","replace","getBioListWithButtons","id","getAttribute","dataobject","bio","heading","event","citethis","target","closest","list","dataset","insertContent","Templates","render","modal","hide","deletebio","parseInt","ref","text","getInTextRefNumber","remove","reorderCitation","reorderBibliography","editbio","data","JSON","parse","object","style","source","pureauthor","title","checkSource","city","purecity","publisher","year","volume","issue","pages","create","updateid","updateindex","value","VIP","classList","add","component","click","removeAttribute","refnumber","increase","reflist","content","author","splitAuthorName","checkAndReformBioInfo","setTitleBasedOnSource","setPublisherBasedOnSource","querySelectorAll","info","getBioContent","bibliography","textnodes","getTextNodes","lastChild","getBody","currentelement","selection","getNode","includes","setCursorLocation","refno","split","alert","setCitybioBasedOnSource","setVolume","setIssue","setPages"],"mappings":"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"}