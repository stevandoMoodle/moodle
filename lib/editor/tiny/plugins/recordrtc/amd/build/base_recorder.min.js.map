{"version":3,"file":"base_recorder.min.js","sources":["../src/base_recorder.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n//\n\n/**\n * Tiny Record RTC type.\n *\n * @module      tiny_recordrtc/recording/base\n * @copyright   2022 Stevani Andolo <stevani@hotmail.com.au>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString, get_strings as getStrings} from 'core/str';\nimport {component} from './common';\nimport Pending from 'core/pending';\nimport {getData} from './options';\nimport uploadFile from 'editor_tiny/uploader';\nimport {add as addToast} from 'core/toast';\nimport * as ModalEvents from 'core/modal_events';\nimport * as ModalFactory from 'core/modal_factory';\nimport * as Templates from 'core/templates';\n\n/**\n * The RecordRTC base class for audio, video, and any other future types\n */\nexport default class {\n\n    /**\n     * Constructor for the RecordRTC class\n     *\n     * @param {TinyMCE} editor The Editor to which the content will be inserted\n     * @param {Modal} modal The Moodle Modal that contains the interface used for recording\n     */\n    constructor(editor, modal) {\n        this.ready = false;\n\n        if (!this.checkAndWarnAboutBrowserCompatibility()) {\n            return;\n        }\n\n        this.editor = editor;\n        this.config = getData(editor).params;\n        this.modal = modal;\n        this.modalRoot = modal.getRoot()[0];\n        this.startStopButton = this.modalRoot.querySelector('button[data-action=\"startstop\"]');\n        this.uploadButton = this.modalRoot.querySelector('button[data-action=\"upload\"]');\n\n\n        this.player = this.configurePlayer();\n        this.registerEventListeners();\n        this.ready = true;\n\n        this.captureUserMedia();\n    }\n\n    /**\n     * Check whether the browser is compatible.\n     *\n     * @returns {boolean}\n     */\n    isReady() {\n        return this.ready;\n    }\n\n    // Disable eslint's valid-jsdoc rule as the following methods are abstract and mnust be overridden by the child class.\n\n    /* eslint-disable valid-jsdoc, no-unused-vars */\n\n    /**\n     * Get the Player element for this type.\n     *\n     * @returns {HTMLElement} The player element, typically an audio or video tag.\n     */\n    configurePlayer() {\n        throw new Error(`configurePlayer() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Get the list of supported mimetypes for this recorder.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/isTypeSupported}\n     *\n     * @returns {string[]} The list of supported mimetypes.\n     */\n    getSupportedTypes() {\n        throw new Error(`getSupportedTypes() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Get any recording options passed into the MediaRecorder.\n     * Please note that the mimeType will be fetched from {@link getSupportedTypes()}.\n     *\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/MediaRecorder#options}\n     * @returns {Object}\n     */\n    getRecordingOptions() {\n        throw new Error(`getRecordingOptions() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Get a filename for the generated file.\n     *\n     * Typically this function will take a prefix and add a type-specific suffix such as the extension to it.\n     *\n     * @param {string} prefix The prefix for the filename generated by the recorder.\n     * @returns {string}\n     */\n    getFileName(prefix) {\n        throw new Error(`getFileName() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Get a list of constraints as required by the getUserMedia() function.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#constraints}\n     *\n     * @returns {Object}\n     */\n    getMediaConstraints() {\n        throw new Error(`getMediaConstraints() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Whether to start playing the recording as it is captured.\n     * @returns {boolean} Whether to start playing the recording as it is captured.\n     */\n    playOnCapture() {\n        return false;\n    }\n\n    /**\n     * Get the time limit for this recording type.\n     *\n     * @returns {number} The time limit in seconds.\n     */\n    getTimeLimit() {\n        throw new Error(`getTimeLimit() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Get the name of the template used when embedding the URL in the editor content.\n     *\n     * @returns {string}\n     */\n    getEmbedTemplateName() {\n        throw new Error(`getEmbedTemplateName() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Fetch the Class of the Modal to be displayed.\n     *\n     * @returns {Modal}\n     */\n    static getModalClass() {\n        throw new Error(`getModalClass() must be implemented in ${this.constructor.name}`);\n    }\n\n    /* eslint-enable valid-jsdoc, no-unused-vars */\n\n    /**\n     * Get the options for the MediaRecorder.\n     *\n     * @returns {object} The options for the MediaRecorder instance.\n     */\n    getParsedRecordingOptions() {\n        const types = this.getSupportedTypes();\n        const options = this.getParsedRecordingOptions();\n        const compatTypes = types.filter((type) => window.MediaRecorder.isTypeSupported(type));\n\n        if (compatTypes.length !== 0) {\n            options.mimeType = compatTypes[0];\n        }\n\n        return options;\n    }\n\n    /**\n     * Start capturing the User Media and handle success or failure of the capture.\n     */\n    async captureUserMedia() {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia(this.getMediaConstraints());\n            this.handleCaptureSuccess(stream);\n        } catch (error) {\n            this.handleCaptureFailure(error);\n        }\n    }\n\n    /**\n     * Display an error message to the user.\n     *\n     * @param {Promise<string>} title The error title\n     * @param {Promise<string>} content The error message\n     * @returns {Promise<Modal>}\n     */\n    async displayAlert(title, content) {\n        const pendingPromise = new Pending('core/confirm:alert');\n        const ModalFactory = await import('core/modal_factory');\n        const modal = await ModalFactory.create({\n            type: ModalFactory.types.ALERT,\n            title: title,\n            body: content,\n            removeOnClose: true,\n        });\n\n        modal.show();\n        pendingPromise.resolve();\n\n        return modal;\n    }\n\n    /**\n     * Handle successful capture of the User Media.\n     *\n     * @param {MediaStream} stream The stream as captured by the User Media.\n     */\n    handleCaptureSuccess(stream) {\n        // Set audio player source to microphone stream.\n        this.player.srcObject = stream;\n\n        if (this.playOnCapture()) {\n            // Mute audio, distracting while recording.\n            this.player.muted = true;\n\n            this.player.play();\n        }\n\n        this.stream = stream;\n    }\n\n    /**\n     * Handle failure to capture the User Media.\n     *\n     * @param {Error} error\n     */\n    handleCaptureFailure(error) {\n        // Changes 'CertainError' -> 'gumcertain' to match language string names.\n        var subject = `gum${error.name.replace('Error', '').toLowerCase()}`;\n        this.displayAlert(\n            getString(`${subject}_title`, component),\n            getString(subject, component)\n        );\n    }\n\n    /**\n     * Close the modal and stop recording.\n     */\n    close() {\n        // Closing the modal will destroy it and remove it from the DOM.\n        // It will also stop the recording via the hidden Modal Event.\n        this.modal.hide();\n    }\n\n    /**\n     * Register event listeners for the modal.\n     */\n    registerEventListeners() {\n        this.modalRoot.addEventListener('click', this.handleModalClick.bind(this));\n        this.modal.getRoot().on(ModalEvents.hidden, () => {\n            this.stopRecording();\n        });\n    }\n\n    /**\n     * Handle a click within the Modal.\n     *\n     * @param {MouseEvent} event The click event\n     */\n    handleModalClick(event) {\n        const button = event.target.closest('button');\n        if (button && button.dataset.action) {\n            const action = button.dataset.action;\n            if (action === 'startstop') {\n                this.handleRecordingStartStopRequested();\n            }\n\n            if (action === 'upload') {\n                this.uploadRecording();\n            }\n        }\n    }\n\n    /**\n     * Handle the click event for the recording start/stop button.\n     */\n    handleRecordingStartStopRequested() {\n        if (this.mediaRecorder?.state === 'recording') {\n            this.stopRecording();\n        } else {\n            this.startRecording();\n        }\n    }\n\n    /**\n     * Handle the media stream after it has finished.\n     */\n    onMediaStopped() {\n        // Set source of audio player.\n        this.blob = new Blob(this.data.chunks, {\n            type: this.mediaRecorder.mimeType\n        });\n        this.player.srcObject = null;\n        this.player.src = URL.createObjectURL(this.blob);\n\n        // Hide the start/stop button.\n        this.getButtonContainer('start-stop')?.classList.toggle('hide', true);\n\n        // Show audio player with controls enabled, and unmute.\n        this.player.muted = false;\n        this.player.controls = true;\n        this.getButtonContainer('player')?.classList.toggle('hide', false);\n\n        // Show upload button.\n        const uploadContainer = this.getButtonContainer('upload');\n        uploadContainer.classList.toggle('hide', false);\n        this.uploadButton.disabled = false;\n    }\n\n    /**\n     * Upload the recording and insert it into the editor content.\n     */\n    async uploadRecording() {\n        // Trigger error if no recording has been made.\n        if (this.data.chunks.length === 0) {\n            this.displayAlert('norecordingfound');\n            return;\n        }\n\n        const uploadContainer = this.getButtonContainer('upload');\n        uploadContainer.classList.toggle('hide', true);\n\n        const fileName = this.getFileName((Math.random() * 1000).toString().replace('.', ''));\n\n        // Upload recording to server.\n        try {\n            const fileURL = await uploadFile(this.editor, 'media', this.blob, fileName, (progress) => {\n                // TODO Display the progress somewhere.\n                window.console.log(progress);\n            });\n            this.insertMedia(fileURL);\n            this.close();\n            addToast(await getString('recordinguploaded', component));\n        } catch (error) {\n            // Show a toast and unhide the button.\n            addToast(await getString('uploaderror', component), {\n                type: 'error',\n            });\n            uploadContainer.classList.toggle('hide', false);\n        }\n    }\n\n    /**\n     * Helper to get the container that a button is in.\n     *\n     * @param {string} purpose The button purpose\n     * @returns {HTMLElement}\n     */\n    getButtonContainer(purpose) {\n        return this.modalRoot.querySelector(`[data-purpose=\"${purpose}-container\"]`);\n    }\n\n    /**\n     * Check whether the browser is compatible with capturing media.\n     *\n     * @returns {boolean}\n     */\n    static isBrowserCompatible() {\n        return this.checkSecure() && this.hasUserMedia();\n    }\n\n    static async display(editor) {\n        const ModalClass = this.getModalClass();\n        const modal = await ModalFactory.create({\n            type: ModalClass.TYPE,\n            templateContext: {},\n            large: true,\n        });\n\n        // Set up the VideoRecorder.\n        const recorder = new this(editor, modal);\n        if (recorder.isReady()) {\n            modal.show();\n        }\n        return modal;\n    }\n\n    /**\n     * Check whether the browser is compatible with capturing media, and display a warning if not.\n     *\n     * @returns {boolean}\n     */\n    checkAndWarnAboutBrowserCompatibility() {\n        if (!this.constructor.checkSecure()) {\n            getStrings(['insecurealert_title', 'insecurealert'].map((key) => ({key, component})))\n                .then(([title, message]) => addToast(message, {title, type: 'error'}))\n                .catch();\n            return false;\n        }\n\n        if (!this.constructor.hasUserMedia) {\n            getStrings(['nowebrtc_title', 'nowebrtc'].map((key) => ({key, component})))\n                .then(([title, message]) => addToast(message, {title, type: 'error'}))\n                .catch();\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Check whether the browser supports WebRTC.\n     *\n     * @returns {boolean}\n     */\n    static hasUserMedia() {\n        return (navigator.mediaDevices && window.MediaRecorder);\n    }\n\n    /**\n     *  Notify and redirect user if plugin is used from insecure location.\n     *\n     * @returns {boolean} Whether the plugin can be loaded.\n     */\n    static checkSecure() {\n        return (window.location.protocol === 'https:') || (window.location.host.indexOf('localhost') !== -1);\n    }\n\n    /**\n     * Update the content of the stop recording button timer.\n     */\n    async setStopRecordingButton() {\n        const {html, js} = await Templates.renderForPromise('tiny_recordrtc/timeremaining', this.getTimeRemaining());\n        Templates.replaceNodeContents(this.startStopButton, html, js);\n        this.buttonTimer = setInterval(this.updateButtonTime.bind(this), 500);\n    }\n\n    /**\n     * Update the time on the stop recording button.\n     */\n    updateButtonTime() {\n        const {remaining, minutes, seconds} = this.getTimeRemaining();\n        if (remaining < 0) {\n            this.stopRecording();\n        } else {\n            this.startStopButton.querySelector('[data-type=\"minutes\"]').textContent = minutes;\n            this.startStopButton.querySelector('[data-type=\"seconds\"]').textContent = seconds;\n        }\n    }\n\n    /**\n     * Clear the timer for the stop recording button.\n     */\n    clearButtonTimer() {\n        if (this.buttonTimer) {\n            clearInterval(this.buttonTimer);\n        }\n        this.buttonTimer = null;\n    }\n\n    /**\n     * Get the time remaining for the recording.\n     *\n     * @returns {Object} The minutes and seconds remaining.\n     */\n    getTimeRemaining() {\n        // All times are in milliseconds\n        const now = new Date().getTime();\n        const remaining = Math.floor(this.getTimeLimit() - ((now - this.startTime) / 1000));\n\n        const formatter = new Intl.NumberFormat(navigator.language, {minimumIntegerDigits: 2});\n        const seconds = formatter.format(remaining % 60);\n        const minutes = formatter.format(Math.floor((remaining - seconds) / 60));\n        return {\n            remaining,\n            minutes,\n            seconds,\n        };\n    }\n\n    /**\n     * Get the maximum file size that can be uploaded.\n     *\n     * @returns {number} The max byte size\n     */\n    getMaxUploadSize() {\n        return this.config.maxrecsize;\n    }\n\n    /**\n     * Stop the recording.\n     * Please note that this should only stop the recording.\n     * Anything related to processing the recording should be handled by the\n     * mediaRecorder's stopped event handler which is processed after it has stopped.\n     */\n    stopRecording() {\n        if (this.mediaRecorder && this.mediaRecorder.state !== 'inactive') {\n            this.mediaRecorder.stop();\n\n            // Unmute the player so that the audio is heard during playback.\n            this.player.muted = false;\n        } else {\n            // There is no recording to stop, but the stream must still be cleaned up.\n            this.cleanupStream();\n        }\n    }\n\n    /**\n     * Clean up the stream.\n     *\n     * This involves stopping any track which is still active.\n     */\n    cleanupStream() {\n        if (this.stream) {\n            this.stream.getTracks()\n                .filter((track) => track.readyState !== 'ended')\n                .forEach((track) => track.stop());\n        }\n    }\n\n    /**\n     * Handle the mediaRecorder `stop` event.\n     */\n    handleStopped() {\n        // Tidy up the stream.\n        this.cleanupStream();\n\n        // Handle the stream data.\n        this.onMediaStopped();\n\n        // Clear the button timer.\n        this.clearButtonTimer();\n    }\n\n    /**\n     * Handle the mediaRecorder `start` event.\n     *\n     * This event is called when the recording starts.\n     */\n    handleStarted() {\n        this.startTime = new Date().getTime();\n        this.setStopRecordingButton();\n    }\n\n    /**\n     * Handle the mediaRecorder `dataavailable` event.\n     *\n     * @param {Event} event\n     */\n    handleDataAvailable(event) {\n        if (this.isRecording()) {\n            const newSize = this.data.blobSize + event.data.size;\n            // Recording stops when either the maximum upload size is reacher, or the time limit expires.\n            // The time limit is checked in the `updateButtonTime` function.\n            if (newSize >= this.getMaxUploadSize()) {\n                this.stopRecording();\n                this.displayFileLimitHitMessage();\n            } else {\n                // Push recording slice to array.\n                this.data.chunks.push(event.data);\n\n                // Size of all recorded data so far.\n                this.data.blobSize = newSize;\n            }\n        }\n    }\n\n    async displayFileLimitHitMessage() {\n        addToast(await getString('maxfilesizehit', component), {\n            title: await getString('maxfilesizehit_title', component),\n            type: 'error',\n        });\n    }\n\n    /**\n     * Check whether the recording is in progress.\n     *\n     * @returns {boolean}\n     */\n    isRecording() {\n        return this.mediaRecorder?.state === 'recording';\n    }\n\n    /**\n     * Start the recording\n     */\n    async startRecording() {\n        if (this.mediaRecorder) {\n            // Stop the existing recorder if it exists.\n            this.mediaRecorder.stop();\n            this.mediaRecorder = null;\n        }\n\n        // The options for the recording codecs and bitrates.\n        this.mediaRecorder = new MediaRecorder(this.stream, this.getParsedRecordingOptions());\n\n        this.mediaRecorder.addEventListener('dataavailable', this.handleDataAvailable.bind(this));\n        this.mediaRecorder.addEventListener('stop', this.handleStopped.bind(this));\n        this.mediaRecorder.addEventListener('start', this.handleStarted.bind(this));\n\n        this.data = {\n            chunks: [],\n            blobSize: 0,\n        };\n\n        this.mediaRecorder.start(1000); // Capture in 1s chunks. Must be set to work with Firefox.\n    }\n\n    /**\n     * Insert the HTML to embed the recording into the editor content.\n     *\n     * @param {string} source The URL to view the media.\n     */\n    async insertMedia(source) {\n        const {html} = await Templates.renderForPromise(\n            this.getEmbedTemplateName(),\n            this.getEmbedTemplateContext({\n                source,\n            })\n        );\n        this.editor.insertContent(html);\n    }\n\n    /**\n     * Add or modify the template parameters for the specified type.\n     *\n     * @param {Object} templateContext The Tempalte context to use\n     * @returns {Object} The finalised template context\n     */\n    getEmbedTemplateContext(templateContext) {\n        return templateContext;\n    }\n}\n"],"names":["constructor","editor","modal","ready","this","checkAndWarnAboutBrowserCompatibility","config","params","modalRoot","getRoot","startStopButton","querySelector","uploadButton","player","configurePlayer","registerEventListeners","captureUserMedia","isReady","Error","name","getSupportedTypes","getRecordingOptions","getFileName","prefix","getMediaConstraints","playOnCapture","getTimeLimit","getEmbedTemplateName","getParsedRecordingOptions","types","options","compatTypes","filter","type","window","MediaRecorder","isTypeSupported","length","mimeType","stream","navigator","mediaDevices","getUserMedia","handleCaptureSuccess","error","handleCaptureFailure","title","content","pendingPromise","Pending","ModalFactory","create","ALERT","body","removeOnClose","show","resolve","srcObject","muted","play","subject","replace","toLowerCase","displayAlert","component","close","hide","addEventListener","handleModalClick","bind","on","ModalEvents","hidden","stopRecording","event","button","target","closest","dataset","action","handleRecordingStartStopRequested","uploadRecording","mediaRecorder","state","startRecording","onMediaStopped","blob","Blob","data","chunks","src","URL","createObjectURL","getButtonContainer","classList","toggle","controls","disabled","uploadContainer","fileName","Math","random","toString","fileURL","progress","console","log","insertMedia","purpose","checkSecure","hasUserMedia","ModalClass","getModalClass","TYPE","templateContext","large","map","key","then","_ref2","message","catch","_ref","location","protocol","host","indexOf","html","js","Templates","renderForPromise","getTimeRemaining","replaceNodeContents","buttonTimer","setInterval","updateButtonTime","remaining","minutes","seconds","textContent","clearButtonTimer","clearInterval","now","Date","getTime","floor","startTime","formatter","Intl","NumberFormat","language","minimumIntegerDigits","format","getMaxUploadSize","maxrecsize","stop","cleanupStream","getTracks","track","readyState","forEach","handleStopped","handleStarted","setStopRecordingButton","handleDataAvailable","isRecording","newSize","blobSize","size","displayFileLimitHitMessage","push","start","source","getEmbedTemplateContext","insertContent"],"mappings":"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"}