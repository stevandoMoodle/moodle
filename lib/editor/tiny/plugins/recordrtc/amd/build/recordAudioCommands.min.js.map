{"version":3,"file":"recordAudioCommands.min.js","sources":["../src/recordAudioCommands.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Record RTC - record audio command.\n *\n * @module      tiny_recordrtc/recordAudioCommands\n * @copyright   2022, Stevani Andolo <stevani@hotmail.com.au>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString} from 'core/str';\nimport {Loader} from './loader';\nimport {getButtonImage} from 'editor_tiny/utils';\nimport {\n    audioButtonName,\n    component\n} from './common';\n\nconst isAudio = (node) => node.nodeName.toLowerCase() === 'audio';\n\nexport const audioSetup = async() => {\n    const [\n        audioButtonTitle,\n        audio,\n    ] = await Promise.all([\n        getString('audiobuttontitle', component),\n        getButtonImage('audio', component),\n    ]);\n\n    return (editor) => {\n        const loader = new Loader(editor);\n        let icon = 'audio';\n        editor.ui.registry.addIcon(icon, audio.html);\n\n        // Register the Menu Button as a toggle.\n        // This means that when highlighted over an existing Media Image element it will show as toggled on.\n        editor.ui.registry.addToggleButton(audioButtonName, {\n            icon,\n            tooltip: audioButtonTitle,\n            onAction: () => {\n                loader.displayAudioDialogue();\n            },\n            onSetup: api => {\n                return editor.selection.selectorChangedWithUnbind(\n                    'audio:not([data-mce-object]):not([data-mce-placeholder])',\n                    api.setActive\n                ).unbind;\n            }\n        });\n\n        editor.ui.registry.addMenuItem(audioButtonName, {\n            icon,\n            tooltip: audioButtonTitle,\n            onAction: () => loader.displayAudioDialogue()\n        });\n\n        editor.ui.registry.addContextMenu(audioButtonName, {\n            update: isAudio,\n        });\n\n        editor.ui.registry.addContextToolbar(audioButtonName, {\n            predicate: isAudio,\n            items: audioButtonName,\n            position: 'node',\n            scope: 'node'\n        });\n    };\n};\n"],"names":["isAudio","node","nodeName","toLowerCase","audioSetup","Promise","all","component","audioButtonTitle","audio","editor","loader","Loader","ui","registry","addIcon","html","addToggleButton","audioButtonName","icon","tooltip","onAction","displayAudioDialogue","onSetup","api","selection","selectorChangedWithUnbind","setActive","unbind","addMenuItem","addContextMenu","update","addContextToolbar","predicate","items","position","scope"],"mappings":"4kDA+BMA,QAAU,SAACC,YAAyC,UAAhCA,KAAKC,SAASC,eAE3BC,wCAAa,iNAIZC,QAAQC,IAAI,EAClB,mBAAU,mBAAoBC,oBAC9B,yBAAe,QAASA,6HAJxBC,wCACAC,uDAMG,SAACC,YACEC,OAAS,IAAIC,eAAOF,QAE1BA,OAAOG,GAAGC,SAASC,QADR,QACsBN,MAAMO,MAIvCN,OAAOG,GAAGC,SAASG,gBAAgBC,wBAAiB,CAChDC,KANO,QAOPC,QAASZ,iBACTa,SAAU,WACNV,OAAOW,wBAEXC,QAAS,SAAAC,YACEd,OAAOe,UAAUC,0BACpB,2DACAF,IAAIG,WACNC,UAIVlB,OAAOG,GAAGC,SAASe,YAAYX,wBAAiB,CAC5CC,KApBO,QAqBPC,QAASZ,iBACTa,SAAU,kBAAMV,OAAOW,0BAG3BZ,OAAOG,GAAGC,SAASgB,eAAeZ,wBAAiB,CAC/Ca,OAAQ/B,UAGZU,OAAOG,GAAGC,SAASkB,kBAAkBd,wBAAiB,CAClDe,UAAWjC,QACXkC,MAAOhB,wBACPiB,SAAU,OACVC,MAAO"}