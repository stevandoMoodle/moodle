{"version":3,"file":"videomodule.min.js","sources":["../../src/recording/videomodule.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Record RTC - video module configuration.\n *\n * @module      tiny_recordrtc/videomodule\n * @copyright   2022, Stevani Andolo <stevani@hotmail.com.au>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString} from 'core/str';\nimport * as CompatCheckModule from './compatcheckmodule';\nimport * as CommonModule from './commonmodule';\nimport {component} from '../common';\n\n// Setup to get audio+video stream from microphone/webcam.\nexport const captureAudioVideo = (config) => {\n    CommonModule.captureUserMedia(\n        // Media constraints.\n        {\n            audio: true,\n            video: {\n                width: {ideal: 640},\n                height: {ideal: 480}\n            }\n        },\n\n        // Success callback.\n        function(audioVideoStream) {\n            // Set video player source to microphone+webcam stream, and play it back as it's recording.\n            CommonModule.data.playerDOM.srcObject = audioVideoStream;\n            CommonModule.data.playerDOM.play();\n\n            config.onMediaCaptured(audioVideoStream);\n        },\n\n        // Error callback.\n        function(error) {\n            config.onMediaCapturingFailed(error);\n        }\n    );\n};\n\nexport const init = async(scope) => {\n    const [\n        startrecording,\n        recordagain,\n        recordingfailed\n    ] = await Promise.all([\n        getString('startrecording', component),\n        getString('recordagain', component),\n        getString('recordingfailed', component)\n    ]);\n\n    // Assignment of global variables.\n    CommonModule.data.editorScope = scope; // Allows access to the editor's \"this\" context.\n    CommonModule.data.alertWarning = document.querySelector('div#alert-warning');\n    CommonModule.data.alertDanger = document.querySelector('div#alert-danger');\n    CommonModule.data.player = document.querySelector('video#player');\n    CommonModule.data.playerDOM = document.querySelector('video#player');\n    CommonModule.data.startStopBtn = document.querySelector('button#start-stop');\n    CommonModule.data.uploadBtn = document.querySelector('button#upload');\n    CommonModule.data.recType = 'video';\n    CommonModule.data.maxUploadSize = scope.maxrecsize;\n\n    // Show alert and close plugin if WebRTC is not supported.\n    CompatCheckModule.checkHasGum();\n    // Show alert and redirect user if connection is not secure.\n    CompatCheckModule.checkSecure();\n\n    // Run when user clicks on \"record\" button.\n    CommonModule.data.startStopBtn.addEventListener('click', function() {\n        CommonModule.data.startStopBtn.disabled = true;\n\n        // If button is displaying \"Start Recording\" or \"Record Again\".\n        if ((CommonModule.data.startStopBtn.textContent.trim() === startrecording) ||\n            (CommonModule.data.startStopBtn.textContent.trim() === recordagain) ||\n            (CommonModule.data.startStopBtn.textContent.trim() === recordingfailed)) {\n            // Make sure the upload button is not shown.\n            CommonModule.data.uploadBtn.parentElement.parentElement.classList.add('hide');\n\n            // Change look of recording button.\n            CommonModule.data.startStopBtn.classList.replace('btn-outline-danger', 'btn-danger');\n\n            // Empty the array containing the previously recorded chunks.\n            CommonModule.data.chunks = [];\n            CommonModule.data.blobSize = 0;\n            CommonModule.data.uploadBtn.removeEventListener('click', CommonModule.uploadHandler);\n\n            // Initialize common configurations.\n            var commonConfig = {\n                // When the stream is captured from the microphone/webcam.\n                onMediaCaptured: function(stream) {\n                    // Make video stream available at a higher level by making it a property of the common module.\n                    CommonModule.data.stream = stream;\n                    CommonModule.startRecording(CommonModule.data.recType, CommonModule.data.stream);\n                },\n\n                // Revert button to \"Record Again\" when recording is stopped.\n                onMediaStopped: function(btnLabel) {\n                    CommonModule.data.startStopBtn.textContent = btnLabel;\n                    CommonModule.data.startStopBtn.disabled = false;\n                    CommonModule.data.startStopBtn.classList.replace('btn-danger', 'btn-outline-danger');\n                },\n\n                // Handle recording errors.\n                onMediaCapturingFailed: function(error) {\n                    CommonModule.handleGumRrrors(error, commonConfig);\n                }\n            };\n\n            // Show video tag without controls to view webcam stream.\n            CommonModule.data.player.parentElement.parentElement.classList.remove('hide');\n            CommonModule.data.player.controls = false;\n\n            // Capture audio+video stream from webcam/microphone.\n            captureAudioVideo(commonConfig);\n        } else { // If button is displaying \"Stop Recording\".\n            // First of all clears the countdownTicker.\n            window.clearInterval(CommonModule.data.countdownTicker);\n\n            // Disable \"Record Again\" button for 1s to allow background processing (closing streams).\n            window.setTimeout(function() {\n                CommonModule.data.startStopBtn.disabled = false;\n            }, 1000);\n\n            // Stop recording.\n            CommonModule.stopRecording(CommonModule.data.stream);\n\n            // Change button to offer to record again.\n            CommonModule.data.startStopBtn.textContent = recordagain;\n            CommonModule.data.startStopBtn.classList.replace('btn-danger', 'btn-outline-danger');\n        }\n    });\n};\n"],"names":["captureAudioVideo","config","CommonModule","captureUserMedia","audio","video","width","ideal","height","audioVideoStream","data","playerDOM","srcObject","play","onMediaCaptured","error","onMediaCapturingFailed","init","scope","Promise","all","component","startrecording","recordagain","recordingfailed","editorScope","alertWarning","document","querySelector","alertDanger","player","startStopBtn","uploadBtn","recType","maxUploadSize","maxrecsize","CompatCheckModule","checkHasGum","checkSecure","addEventListener","disabled","textContent","trim","parentElement","classList","add","replace","chunks","blobSize","removeEventListener","uploadHandler","commonConfig","stream","startRecording","onMediaStopped","btnLabel","handleGumRrrors","remove","controls","window","clearInterval","countdownTicker","setTimeout","stopRecording"],"mappings":"w6FA6BaA,kBAAoB,SAACC,QAC9BC,aAAaC,iBAET,CACIC,OAAO,EACPC,MAAO,CACHC,MAAO,CAACC,MAAO,KACfC,OAAQ,CAACD,MAAO,QAKxB,SAASE,kBAELP,aAAaQ,KAAKC,UAAUC,UAAYH,iBACxCP,aAAaQ,KAAKC,UAAUE,OAE5BZ,OAAOa,gBAAgBL,qBAI3B,SAASM,OACLd,OAAOe,uBAAuBD,oEAK7BE,kCAAO,iBAAMC,yNAKZC,QAAQC,IAAI,EAClB,mBAAU,iBAAkBC,oBAC5B,mBAAU,cAAeA,oBACzB,mBAAU,kBAAmBA,sHAN7BC,sCACAC,mCACAC,uCAQJtB,aAAaQ,KAAKe,YAAcP,MAChChB,aAAaQ,KAAKgB,aAAeC,SAASC,cAAc,qBACxD1B,aAAaQ,KAAKmB,YAAcF,SAASC,cAAc,oBACvD1B,aAAaQ,KAAKoB,OAASH,SAASC,cAAc,gBAClD1B,aAAaQ,KAAKC,UAAYgB,SAASC,cAAc,gBACrD1B,aAAaQ,KAAKqB,aAAeJ,SAASC,cAAc,qBACxD1B,aAAaQ,KAAKsB,UAAYL,SAASC,cAAc,iBACrD1B,aAAaQ,KAAKuB,QAAU,QAC5B/B,aAAaQ,KAAKwB,cAAgBhB,MAAMiB,WAGxCC,kBAAkBC,cAElBD,kBAAkBE,cAGlBpC,aAAaQ,KAAKqB,aAAaQ,iBAAiB,SAAS,cACrDrC,aAAaQ,KAAKqB,aAAaS,UAAW,EAGrCtC,aAAaQ,KAAKqB,aAAaU,YAAYC,SAAWpB,gBACtDpB,aAAaQ,KAAKqB,aAAaU,YAAYC,SAAWnB,aACtDrB,aAAaQ,KAAKqB,aAAaU,YAAYC,SAAWlB,gBAAkB,CAEzEtB,aAAaQ,KAAKsB,UAAUW,cAAcA,cAAcC,UAAUC,IAAI,QAGtE3C,aAAaQ,KAAKqB,aAAaa,UAAUE,QAAQ,qBAAsB,cAGvE5C,aAAaQ,KAAKqC,OAAS,GAC3B7C,aAAaQ,KAAKsC,SAAW,EAC7B9C,aAAaQ,KAAKsB,UAAUiB,oBAAoB,QAAS/C,aAAagD,mBAGlEC,aAAe,CAEfrC,gBAAiB,SAASsC,QAEtBlD,aAAaQ,KAAK0C,OAASA,OAC3BlD,aAAamD,eAAenD,aAAaQ,KAAKuB,QAAS/B,aAAaQ,KAAK0C,SAI7EE,eAAgB,SAASC,UACrBrD,aAAaQ,KAAKqB,aAAaU,YAAcc,SAC7CrD,aAAaQ,KAAKqB,aAAaS,UAAW,EAC1CtC,aAAaQ,KAAKqB,aAAaa,UAAUE,QAAQ,aAAc,uBAInE9B,uBAAwB,SAASD,OAC7Bb,aAAasD,gBAAgBzC,MAAOoC,gBAK5CjD,aAAaQ,KAAKoB,OAAOa,cAAcA,cAAcC,UAAUa,OAAO,QACtEvD,aAAaQ,KAAKoB,OAAO4B,UAAW,EAGpC1D,kBAAkBmD,mBAGlBQ,OAAOC,cAAc1D,aAAaQ,KAAKmD,iBAGvCF,OAAOG,YAAW,WACd5D,aAAaQ,KAAKqB,aAAaS,UAAW,IAC3C,KAGHtC,aAAa6D,cAAc7D,aAAaQ,KAAK0C,QAG7ClD,aAAaQ,KAAKqB,aAAaU,YAAclB,YAC7CrB,aAAaQ,KAAKqB,aAAaa,UAAUE,QAAQ,aAAc"}