{"version":3,"file":"options.min.js","sources":["../src/options.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Option helper for TinyMCE Editor Manager.\n *\n * @module editor_tiny/options\n * @copyright  2022 Andrew Lyons <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nconst optionsMoodleAll = 'moodle:options';\nconst optionContextId = 'moodle:contextid';\nconst optionDraftItemId = 'moodle:draftitemid';\nconst filePickers = 'moodle:filepickers';\n\nexport const register = (editor, options) => {\n    const registerOption = editor.options.register;\n    const setOption = editor.options.set;\n\n    // TODO Decide if we want to keep this or not.\n    registerOption(optionsMoodleAll, {\n        processor: 'object',\n        \"default\": {},\n    });\n    setOption(optionsMoodleAll, options);\n\n    registerOption(optionContextId, {\n        processor: 'number',\n        \"default\": 0,\n    });\n    setOption(optionContextId, options.context);\n\n    registerOption(filePickers, {\n        processor: 'object',\n        \"default\": {},\n    });\n    setOption(filePickers, options.filepicker);\n\n    registerOption(optionDraftItemId, {\n        processor: 'number',\n    });\n    setOption(optionDraftItemId, options.draftitemid);\n};\n\nexport const getContextId = (editor) => editor.options.get(optionContextId);\nexport const getDraftItemId = (editor) => editor.options.get(optionDraftItemId);\nexport const getFilepickers = (editor) => editor.options.get(filePickers);\nexport const getFilePicker = (editor, type) => getFilepickers(editor)[type];\n\nexport const getInitialPluginConfiguration = (options) => {\n    const config = {};\n\n    Object.entries(options.plugins).forEach(([pluginName, pluginConfig]) => {\n        const values = Object.entries(pluginConfig.config ?? {});\n        values.forEach(([key, value]) => {\n            config[`${pluginName}:${key}`] = value;\n        });\n    });\n\n    return config;\n};\n"],"names":["editor","options","registerOption","register","setOption","set","processor","context","filepicker","draftitemid","get","getFilepickers","type","config","Object","entries","plugins","forEach","pluginName","pluginConfig","key","value"],"mappings":";;;;;;;4wCA4BwB,SAACA,OAAQC,aACvBC,eAAiBF,OAAOC,QAAQE,SAChCC,UAAYJ,OAAOC,QAAQI,IAGjCH,eAVqB,iBAUY,CAC7BI,UAAW,iBACA,KAEfF,UAdqB,iBAcOH,SAE5BC,eAfoB,mBAeY,CAC5BI,UAAW,iBACA,IAEfF,UAnBoB,mBAmBOH,QAAQM,SAEnCL,eAnBgB,qBAmBY,CACxBI,UAAW,iBACA,KAEfF,UAvBgB,qBAuBOH,QAAQO,YAE/BN,eA1BsB,qBA0BY,CAC9BI,UAAW,WAEfF,UA7BsB,qBA6BOH,QAAQQ,oCAGb,SAACT,eAAWA,OAAOC,QAAQS,IAjC/B,6CAkCM,SAACV,eAAWA,OAAOC,QAAQS,IAjC/B,2BAkCbC,eAAiB,SAACX,eAAWA,OAAOC,QAAQS,IAjCrC,qFAkCS,SAACV,OAAQY,aAASD,eAAeX,QAAQY,8CAEzB,SAACX,aACpCY,OAAS,UAEfC,OAAOC,QAAQd,QAAQe,SAASC,SAAQ,qEAAEC,oBAAYC,sBACnCL,OAAOC,qCAAQI,aAAaN,4DAAU,IAC9CI,SAAQ,kDAAEG,aAAKC,eAClBR,iBAAUK,uBAAcE,MAASC,YAIlCR"}