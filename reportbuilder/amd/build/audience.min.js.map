{"version":3,"file":"audience.min.js","sources":["../src/audience.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Report builder audiences\n *\n * @module      core_reportbuilder/audience\n * @copyright   2021 David Matamoros <davidmc@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\"use strict\";\n\nimport 'core/inplace_editable';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {prefetchStrings} from 'core/prefetch';\nimport {get_string as getString} from 'core/str';\nimport DynamicForm from 'core_form/dynamicform';\nimport {add as addToast} from 'core/toast';\nimport {deleteAudience} from 'core_reportbuilder/local/repository/audiences';\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\nimport {loadFragment} from 'core/fragment';\nimport {markFormAsDirty} from 'core_form/changechecker';\n\nlet reportId = 0;\nlet contextId = 0;\n\n/**\n * Add audience card\n *\n * @param {String} className\n * @param {String} title\n */\nconst addAudienceCard = (className, title) => {\n    const pendingPromise = new Pending('core_reportbuilder/audience:add');\n\n    const audiencesContainer = document.querySelector(reportSelectors.regions.audiencesContainer);\n    const audienceCardLength = audiencesContainer.querySelectorAll(reportSelectors.regions.audienceCard).length;\n\n    const params = {\n        classname: className,\n        reportid: reportId,\n        showormessage: (audienceCardLength > 0),\n        title: title,\n    };\n\n    // Load audience card fragment, render and then initialise the form within.\n    loadFragment('core_reportbuilder', 'audience_form', contextId, params)\n        .then((html, js) => {\n            const audienceCard = Templates.appendNodeContents(audiencesContainer, html, js)[0];\n            const audienceEmptyMessage = audiencesContainer.querySelector(reportSelectors.regions.audienceEmptyMessage);\n\n            const audienceForm = initAudienceCardForm(audienceCard);\n            // Mark as dirty new audience form created to prevent users leaving the page without saving it.\n            markFormAsDirty(audienceForm.getFormNode());\n            audienceEmptyMessage.classList.add('hidden');\n\n            return getString('audienceadded', 'core_reportbuilder', title);\n        })\n        .then(addToast)\n        .then(() => pendingPromise.resolve())\n        .catch(Notification.exception);\n};\n\n/**\n * Edit audience card\n *\n * @param {Element} audienceCard\n */\nconst editAudienceCard = audienceCard => {\n    const pendingPromise = new Pending('core_reportbuilder/audience:edit');\n\n    // Load audience form with data for editing, then toggle visible controls in the card.\n    const audienceForm = initAudienceCardForm(audienceCard);\n    audienceForm.load({id: audienceCard.dataset.instanceid})\n        .then(() => {\n            const audienceFormContainer = audienceCard.querySelector(reportSelectors.regions.audienceFormContainer);\n            const audienceDescription = audienceCard.querySelector(reportSelectors.regions.audienceDescription);\n            const audienceEdit = audienceCard.querySelector(reportSelectors.actions.audienceEdit);\n\n            audienceFormContainer.classList.remove('hidden');\n            audienceDescription.classList.add('hidden');\n            audienceEdit.disabled = true;\n\n            return pendingPromise.resolve();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Initialise dynamic form within given audience card\n *\n * @param {Element} audienceCard\n * @return {DynamicForm}\n */\nconst initAudienceCardForm = audienceCard => {\n    const audienceFormContainer = audienceCard.querySelector(reportSelectors.regions.audienceFormContainer);\n    const audienceForm = new DynamicForm(audienceFormContainer, '\\\\core_reportbuilder\\\\form\\\\audience');\n\n    // After submitting the form, update the card instance and description properties.\n    audienceForm.addEventListener(audienceForm.events.FORM_SUBMITTED, data => {\n        const audienceHeading = audienceCard.querySelector(reportSelectors.regions.audienceHeading);\n        const audienceDescription = audienceCard.querySelector(reportSelectors.regions.audienceDescription);\n\n        audienceCard.dataset.instanceid = data.detail.instanceid;\n\n        audienceHeading.innerHTML = data.detail.heading;\n        audienceDescription.innerHTML = data.detail.description;\n\n        closeAudienceCardForm(audienceCard);\n\n        return getString('audiencesaved', 'core_reportbuilder')\n            .then(addToast);\n    });\n\n    // If cancelling the form, close the card or remove it if it was never created.\n    audienceForm.addEventListener(audienceForm.events.FORM_CANCELLED, () => {\n        if (audienceCard.dataset.instanceid > 0) {\n            closeAudienceCardForm(audienceCard);\n        } else {\n            removeAudienceCard(audienceCard);\n        }\n    });\n\n    return audienceForm;\n};\n\n/**\n * Delete audience card\n *\n * @param {Element} audienceDelete\n */\nconst deleteAudienceCard = audienceDelete => {\n    const audienceCard = audienceDelete.closest(reportSelectors.regions.audienceCard);\n    const audienceTitle = audienceCard.dataset.title;\n\n    Notification.saveCancelPromise(\n        getString('deleteaudience', 'core_reportbuilder', audienceTitle),\n        getString('deleteaudienceconfirm', 'core_reportbuilder', audienceTitle),\n        getString('delete', 'core'),\n        {triggerElement: audienceDelete}\n    ).then(() => {\n        const pendingPromise = new Pending('core_reportbuilder/audience:delete');\n\n        return deleteAudience(reportId, audienceCard.dataset.instanceid)\n            .then(() => addToast(getString('audiencedeleted', 'core_reportbuilder', audienceTitle)))\n            .then(() => {\n                removeAudienceCard(audienceCard);\n                return pendingPromise.resolve();\n            })\n            .catch(Notification.exception);\n    }).catch(() => {\n        return;\n    });\n};\n\n/**\n * Close audience card form\n *\n * @param {Element} audienceCard\n */\nconst closeAudienceCardForm = audienceCard => {\n    // Remove the [data-region=\"audience-form-container\"] (with all the event listeners attached to it), and create it again.\n    const audienceFormContainer = audienceCard.querySelector(reportSelectors.regions.audienceFormContainer);\n    const NewAudienceFormContainer = audienceFormContainer.cloneNode(false);\n    audienceCard.querySelector(reportSelectors.regions.audienceForm).replaceChild(NewAudienceFormContainer, audienceFormContainer);\n    // Show the description container and enable the action buttons.\n    audienceCard.querySelector(reportSelectors.regions.audienceDescription).classList.remove('hidden');\n    audienceCard.querySelector(reportSelectors.actions.audienceEdit).disabled = false;\n    audienceCard.querySelector(reportSelectors.actions.audienceDelete).disabled = false;\n};\n\n/**\n * Remove audience card\n *\n * @param {Element} audienceCard\n */\nconst removeAudienceCard = audienceCard => {\n    audienceCard.remove();\n\n    const audiencesContainer = document.querySelector(reportSelectors.regions.audiencesContainer);\n    const audienceCards = audiencesContainer.querySelectorAll(reportSelectors.regions.audienceCard);\n\n    // Show message if there are no cards remaining, ensure first card's separator is not present.\n    if (audienceCards.length === 0) {\n        const audienceEmptyMessage = document.querySelector(reportSelectors.regions.audienceEmptyMessage);\n        audienceEmptyMessage.classList.remove('hidden');\n    } else {\n        const audienceFirstCardSeparator = audienceCards[0].querySelector('.audience-separator');\n        audienceFirstCardSeparator?.remove();\n    }\n};\n\nlet initialized = false;\n\n/**\n * Initialise audiences tab.\n *\n * @param {Number} id\n * @param {Number} contextid\n */\nexport const init = (id, contextid) => {\n    prefetchStrings('core_reportbuilder', [\n        'audienceadded',\n        'audiencedeleted',\n        'audiencesaved',\n        'deleteaudience',\n        'deleteaudienceconfirm',\n    ]);\n\n    prefetchStrings('core', [\n        'delete',\n    ]);\n\n    reportId = id;\n    contextId = contextid;\n\n    if (initialized) {\n        // We already added the event listeners (can be called multiple times by mustache template).\n        return;\n    }\n\n    document.addEventListener('click', event => {\n\n        // Add instance.\n        const audienceAdd = event.target.closest(reportSelectors.actions.audienceAdd);\n        if (audienceAdd) {\n            event.preventDefault();\n            addAudienceCard(audienceAdd.dataset.uniqueIdentifier, audienceAdd.dataset.name);\n        }\n\n        // Edit instance.\n        const audienceEdit = event.target.closest(reportSelectors.actions.audienceEdit);\n        if (audienceEdit) {\n            const audienceEditCard = audienceEdit.closest(reportSelectors.regions.audienceCard);\n\n            event.preventDefault();\n            editAudienceCard(audienceEditCard);\n        }\n\n        // Delete instance.\n        const audienceDelete = event.target.closest(reportSelectors.actions.audienceDelete);\n        if (audienceDelete) {\n            event.preventDefault();\n            deleteAudienceCard(audienceDelete);\n        }\n    });\n\n    initialized = true;\n};\n"],"names":["reportId","contextId","initAudienceCardForm","audienceCard","audienceFormContainer","querySelector","reportSelectors","regions","audienceForm","DynamicForm","addEventListener","events","FORM_SUBMITTED","data","audienceHeading","audienceDescription","dataset","instanceid","detail","innerHTML","heading","description","closeAudienceCardForm","then","addToast","FORM_CANCELLED","removeAudienceCard","NewAudienceFormContainer","cloneNode","replaceChild","classList","remove","actions","audienceEdit","disabled","audienceDelete","audienceCards","document","audiencesContainer","querySelectorAll","length","audienceEmptyMessage","audienceFirstCardSeparator","initialized","id","contextid","event","className","title","pendingPromise","audienceCardLength","params","audienceAdd","target","closest","preventDefault","uniqueIdentifier","name","Pending","classname","reportid","showormessage","html","js","Templates","appendNodeContents","getFormNode","add","resolve","catch","Notification","exception","audienceEditCard","load","editAudienceCard","audienceTitle","saveCancelPromise","triggerElement","deleteAudienceCard"],"mappings":"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"}